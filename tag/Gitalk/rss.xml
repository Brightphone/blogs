<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>brightphone.github.io/blogs/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>自动初始化 Gitalk 和 Gitment 评论</title>
	  <link>/blogs//git-comments-initialize</link>
	  <author></author>
	  <pubDate>2017-10-28T00:00:00+00:00</pubDate>
	  <guid>/blogs//git-comments-initialize</guid>
	  <description><![CDATA[
	     <p>之前的博客一直都使用 Disqus 作为评论系统，然后因为 Disqus 在国内无法访问，很多读者都只能通过邮件的方式咨询一些问题，昨天觉得长痛不如短痛，直接将博客的评论迁移到了 <a href="https://github.com/gitalk/gitalk">Gitalk</a>，最开始选择了使用 Gitment 作为评论系统，但是由于其开发者很久没有维护、代码七个月也没有更新，所以就选择了有更多人维护的 Gitalk 作为目前博客的评论系统。</p>

<p>无论是 Gitalk 还是 Gitment 都只能手动初始化所有文章的评论或者一个一个点开界面，作者觉得这件事情非常麻烦，所以手动抓了一下 Gitalk 和 Gitment 在初始化评论时发出的网络请求后写了一个用于自动化初始评论的脚本。</p>

<h2 id="获得权限">获得权限</h2>

<p>在使用该脚本之前首先要在 GitHub 创建一个新的 <a href="https://github.com/settings/tokens">Personal access tokens</a>，选择 <code class="highlighter-rouge">Generate new token</code> 后，在当前的页面中为 Token 添加所有 Repo 的权限：</p>

<p><img src="https://img.draveness.me/2017-10-28-personal-access-token.png" alt="personal-access-token" /></p>

<p>在这里创建之后，点击界面最下的面 <code class="highlighter-rouge">Generate token</code> 按钮获得一个新的 token：</p>

<p><img src="https://img.draveness.me/2017-10-28-new-token.png" alt="new-token" /></p>

<blockquote>
  <p>作者已经把这个 token 删掉了，不要想着用这个 token 就能获得到作者 GitHub 的权限。</p>
</blockquote>

<h2 id="自动化脚本">自动化脚本</h2>

<p>作者在抓取了 Gitalk 和 Gitment 的 API 请求发现，这两个评论服务是<strong>通过 GitHub 提供的 API 创建含有相应标签的 issue</strong>，所以我们应该也可以直接使用 GitHub 的 API 创建所有博客文章对应的 issue，这与通过评论插件创建 issue 是完全一样的，在创建之后无论是 Gitalk 还是 Gitment 都可以通过对应的标签直接在仓库中找到对应的 issue 了。</p>

<p>本文中提供的自动化脚本使用的是 Ruby 代码，请确定自己的机器上已经安装了 Ruby，并且使用如下的命令安装脚本所需要的所有依赖：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">sudo</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">faraday</span> <span class="n">activesupport</span> <span class="n">sitemap</span><span class="o">-</span><span class="n">parser</span>
</code></pre></div></div>

<h3 id="使用-sitemap-文件">使用 sitemap 文件</h3>

<p>如果我们使用的博客服务是 Jekyll，那么就可以通过 <a href="https://github.com/jekyll/jekyll-sitemap">jekyll-sitemap</a> 插件为博客创建对应的 sitemap 文件，例如：https://draveness.me/sitemap.xml。</p>

<p>有 sitemap 文件之后就非常好办了，在任意目录下创建 <code class="highlighter-rouge">comment.rb</code> 文件后，将下面的代码粘贴到文件中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">username</span> <span class="o">=</span> <span class="s2">"draveness"</span> <span class="c1"># GitHub 用户名</span>
<span class="n">new_token</span> <span class="o">=</span> <span class="s2">"xxxxxxx"</span>  <span class="c1"># GitHub Token</span>
<span class="n">repo_name</span> <span class="o">=</span> <span class="s2">"github-comments-repo"</span> <span class="c1"># 存放 issues</span>
<span class="n">sitemap_url</span> <span class="o">=</span> <span class="s2">"https://draveness.me/sitemap.xml"</span> <span class="c1"># sitemap</span>
<span class="n">kind</span> <span class="o">=</span> <span class="s2">"Gitalk"</span> <span class="c1"># "Gitalk" or "gitment"</span>

<span class="nb">require</span> <span class="s1">'open-uri'</span>
<span class="nb">require</span> <span class="s1">'faraday'</span>
<span class="nb">require</span> <span class="s1">'active_support'</span>
<span class="nb">require</span> <span class="s1">'active_support/core_ext'</span>
<span class="nb">require</span> <span class="s1">'sitemap-parser'</span>

<span class="n">sitemap</span> <span class="o">=</span> <span class="no">SitemapParser</span><span class="p">.</span><span class="nf">new</span> <span class="n">sitemap_url</span>
<span class="n">urls</span> <span class="o">=</span> <span class="n">sitemap</span><span class="p">.</span><span class="nf">to_a</span>

<span class="n">conn</span> <span class="o">=</span> <span class="no">Faraday</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">"https://api.github.com/repos/</span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span>
  <span class="n">conn</span><span class="p">.</span><span class="nf">basic_auth</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">.</span><span class="nf">adapter</span>  <span class="no">Faraday</span><span class="p">.</span><span class="nf">default_adapter</span>
<span class="k">end</span>

<span class="n">urls</span><span class="p">.</span><span class="nf">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
  <span class="n">title</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="nf">read</span><span class="p">.</span><span class="nf">scan</span><span class="p">(</span><span class="sr">/&lt;title&gt;(.*?)&lt;\/title&gt;/</span><span class="p">).</span><span class="nf">first</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">force_encoding</span><span class="p">(</span><span class="s1">'UTF-8'</span><span class="p">)</span>
  <span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">post</span> <span class="k">do</span> <span class="o">|</span><span class="n">req</span><span class="o">|</span>
    <span class="n">req</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">body: </span><span class="n">url</span><span class="p">,</span> <span class="ss">labels: </span><span class="p">[</span><span class="n">kind</span><span class="p">,</span> <span class="n">url</span><span class="p">],</span> <span class="ss">title: </span><span class="n">title</span> <span class="p">}.</span><span class="nf">to_json</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="n">response</span><span class="p">.</span><span class="nf">body</span>
  <span class="nb">sleep</span> <span class="mi">15</span> <span class="k">if</span> <span class="n">index</span> <span class="o">%</span> <span class="mi">20</span> <span class="o">==</span> <span class="mi">0</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里有 5 个配置项，分别是 GitHub 用户名、在上一步获得的 Token、存放 issues 的仓库、sitemap 的地址以及最后你在博客中使用了哪个评论插件，不同的插件拥有标签，可以选择 <code class="highlighter-rouge">"Gitalk"</code> 或者 <code class="highlighter-rouge">"gitment"</code>，对于其他评论的插件应该如何设置，作者就并不清楚了。</p>

<blockquote>
  <p>需要注意的是，在使用上述的代码为博客创建 issue 时，会为博客中 sitemap 包含的<strong>全部界面创建对应的 issue</strong>，其中包括例如首页、标签界面等，这对于作者来说不是太大的问题，但是对这个问题敏感的读者可以使用下一小节中的代码。</p>
</blockquote>

<p>在配置完成后就可以在命令行中的当前目录下输入以下命令：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">ruby</span> <span class="n">comment</span><span class="p">.</span><span class="nf">rb</span>
</code></pre></div></div>

<p>然后当前脚本就会运行并初始化所有的评论了。</p>

<h3 id="无-sitemap-或自定义">无 sitemap 或自定义</h3>

<p>如果博客中不包含任何的 sitemap 文件，或者想要手动选择想要初始化的一些文章其实也是可以的，可以使用简化的代码<strong>批量初始化指定博客</strong>的评论：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">username</span> <span class="o">=</span> <span class="s2">"draveness"</span> <span class="c1"># GitHub 用户名</span>
<span class="n">new_token</span> <span class="o">=</span> <span class="s2">"xxxxxxx"</span>  <span class="c1"># GitHub Token</span>
<span class="n">repo_name</span> <span class="o">=</span> <span class="s2">"github-comments-repo"</span> <span class="c1"># 存放 issues</span>
<span class="n">kind</span> <span class="o">=</span> <span class="s2">"Gitalk"</span> <span class="c1"># "Gitalk" or "gitment"</span>
<span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"xxxxx"</span><span class="p">]</span>

<span class="nb">require</span> <span class="s1">'open-uri'</span>
<span class="nb">require</span> <span class="s1">'faraday'</span>
<span class="nb">require</span> <span class="s1">'active_support'</span>
<span class="nb">require</span> <span class="s1">'active_support/core_ext'</span>

<span class="n">conn</span> <span class="o">=</span> <span class="no">Faraday</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">"https://api.github.com/repos/</span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">repo_name</span><span class="si">}</span><span class="s2">/issues"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">conn</span><span class="o">|</span>
  <span class="n">conn</span><span class="p">.</span><span class="nf">basic_auth</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span>
  <span class="n">conn</span><span class="p">.</span><span class="nf">adapter</span>  <span class="no">Faraday</span><span class="p">.</span><span class="nf">default_adapter</span>
<span class="k">end</span>

<span class="n">urls</span><span class="p">.</span><span class="nf">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
  <span class="n">title</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">).</span><span class="nf">read</span><span class="p">.</span><span class="nf">scan</span><span class="p">(</span><span class="sr">/&lt;title&gt;(.*?)&lt;\/title&gt;/</span><span class="p">).</span><span class="nf">first</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">force_encoding</span><span class="p">(</span><span class="s1">'UTF-8'</span><span class="p">)</span>
  <span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">post</span> <span class="k">do</span> <span class="o">|</span><span class="n">req</span><span class="o">|</span>
    <span class="n">req</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">body: </span><span class="n">url</span><span class="p">,</span> <span class="ss">labels: </span><span class="p">[</span><span class="n">kind</span><span class="p">,</span> <span class="n">url</span><span class="p">],</span> <span class="ss">title: </span><span class="n">title</span> <span class="p">}.</span><span class="nf">to_json</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="n">response</span><span class="p">.</span><span class="nf">body</span>
  <span class="nb">sleep</span> <span class="mi">15</span> <span class="k">if</span> <span class="n">index</span> <span class="o">%</span> <span class="mi">20</span> <span class="o">==</span> <span class="mi">0</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里就需要<strong>手动填入需要初始化文章的数组</strong>了，当然如果你有 sitemap 文件，其实可以在 irb 中运行以下的代码得到全部的文章数组，再手动从其中剔除不想要创建评论的页面：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">irb</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'sitemap-parser'</span>
 <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">sitemap_url</span> <span class="o">=</span> <span class="s2">"https://draveness.me/sitemap.xml"</span>
 <span class="o">=&gt;</span> <span class="s2">"https://draveness.me/sitemap.xml"</span>
<span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="no">SitemapParser</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">sitemap_url</span><span class="p">).</span><span class="nf">to_a</span>
 <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"https://draveness.me/prolog-ji-chu-1"</span><span class="p">,</span> <span class="s2">"https://draveness.me/prolog-pi-pei-2"</span><span class="p">,</span> <span class="s2">"https://draveness.me/prolog-di-gui-3"</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="s2">"https://draveness.me/dynamo"</span><span class="p">]</span>
</code></pre></div></div>

<p>当我们将上述结果中不想要创建评论的文章删除之后，将结果填到 <code class="highlighter-rouge">urls</code> 这个临时变量中，运行下面的命令就可以了。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">ruby</span> <span class="n">comment</span><span class="p">.</span><span class="nf">rb</span>
</code></pre></div></div>

<h2 id="其他">其他</h2>

<p>由于 GitHub 会脚本的请求会做一定的限制，所以在连续请求接口，批量创建 issues 的过程中可能会出现创建失败的情况，你可以通过命令中打印的结果看到，不过在脚本中已经在每 20 次创建时休眠 15 秒，所以应该也不会遇到这个问题。</p>

<p>另外，GitHub 中 issue 的可以创建但是并不能删除，所以在配置时请一定检查好所有的配置项是否正确，否则会批量创建一些无用的 issue 虽然没有什么影响，但是看起来非常头疼。</p>

<h2 id="总结">总结</h2>

<p>手动初始化每一篇文章的评论确实是非常痛苦的，放弃 Disqus 确实也考虑了比较久的事件，Disqus 中也确实有一些有价值的评论，但是本着长痛不如短痛的原则，还是选择迁移到 Gitalk，当然作者也希望 Gitalk 官方能够提供更好地使用体验。</p>


	  ]]></description>
	</item>


</channel>
</rss>
