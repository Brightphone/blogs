<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>brightphone.github.io/blogs/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>浅谈 WEBrick 的多线程模型</title>
	  <link>/blogs//rack-webrick</link>
	  <author></author>
	  <pubDate>2017-11-01T00:00:00+00:00</pubDate>
	  <guid>/blogs//rack-webrick</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>这篇文章会介绍在开发环境中最常用的应用容器 WEBrick 的实现原理，除了通过源代码分析之外，我们也会介绍它的 IO 模型以及一些特点。</p>

<p>在 GitHub 上，WEBrick 从 2003 年的六月份就开始开发了，有着十几年历史的 WEBrick 的实现非常简单，总共只有 4000 多行的代码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">loc_counter</span> <span class="o">.</span>
<span class="mi">40</span> <span class="n">files</span> <span class="n">processed</span>
<span class="no">Total</span>     <span class="mi">6918</span> <span class="n">lines</span>
<span class="no">Empty</span>     <span class="mi">990</span> <span class="n">lines</span>
<span class="no">Comments</span>  <span class="mi">1927</span> <span class="n">lines</span>
<span class="no">Code</span>      <span class="mi">4001</span> <span class="n">lines</span>
</code></pre></div></div>

<h2 id="webrick-的实现">WEBrick 的实现</h2>

<p>由于 WEBrick 是 Rack 中内置的处理器，所以与 Unicorn 和 Puma 这种第三方开发的 webserver 不同，WEBrick 的处理器是在 Rack 中实现的，而 WEBrick 的运行也都是从这个处理器的开始的。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Rack</span>
  <span class="k">module</span> <span class="nn">Handler</span>
    <span class="k">class</span> <span class="nc">WEBrick</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServlet</span><span class="o">::</span><span class="no">AbstractServlet</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
        <span class="n">environment</span>  <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'development'</span>
        <span class="n">default_host</span> <span class="o">=</span> <span class="n">environment</span> <span class="o">==</span> <span class="s1">'development'</span> <span class="p">?</span> <span class="s1">'localhost'</span> <span class="p">:</span> <span class="kp">nil</span>

        <span class="n">options</span><span class="p">[</span><span class="ss">:BindAddress</span><span class="p">]</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:Host</span><span class="p">)</span> <span class="o">||</span> <span class="n">default_host</span>
        <span class="n">options</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">||=</span> <span class="mi">8080</span>
        <span class="vi">@server</span> <span class="o">=</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="vi">@server</span><span class="p">.</span><span class="nf">mount</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="p">,</span> <span class="n">app</span>
        <span class="k">yield</span> <span class="vi">@server</span>  <span class="k">if</span> <span class="nb">block_given?</span>
        <span class="vi">@server</span><span class="p">.</span><span class="nf">start</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>我们在上一篇文章 <a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a> 中介绍 Rack 的实现原理时，最终调用了上述方法，从这里开始大部分的实现都与 WEBrick 有关了。</p>

<p>在这里，你可以看到方法会先处理传入的参数比如：地址、端口号等等，在这之后会使用 WEBrick 提供的 <code class="highlighter-rouge">HTTPServer</code> 来处理 HTTP 请求，调用 <code class="highlighter-rouge">mount</code> 在根路由上挂载应用和处理器 <code class="highlighter-rouge">Rack::Handler::WEBrick</code> 接受请求，最后执行 <code class="highlighter-rouge">#start</code> 方法启动服务器。</p>

<h3 id="初始化服务器">初始化服务器</h3>

<p><code class="highlighter-rouge">HTTPServer</code> 的初始化分为两个阶段，一部分是 <code class="highlighter-rouge">HTTPServer</code> 的初始化，另一部分调用父类的 <code class="highlighter-rouge">initialize</code> 方法，在自己构造器中，会配置当前服务器能够处理的 HTTP 版本并初始化新的 <code class="highlighter-rouge">MountTable</code> 实例：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">46</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::HTTPServer&gt;</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">config</span><span class="o">=</span><span class="p">{},</span> <span class="n">default</span><span class="o">=</span><span class="no">Config</span><span class="o">::</span><span class="no">HTTP</span><span class="p">)</span>
  <span class="k">super</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
  <span class="vi">@http_version</span> <span class="o">=</span> <span class="no">HTTPVersion</span><span class="o">::</span><span class="n">convert</span><span class="p">(</span><span class="vi">@config</span><span class="p">[</span><span class="ss">:HTTPVersion</span><span class="p">])</span>

  <span class="vi">@mount_tab</span> <span class="o">=</span> <span class="no">MountTable</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">if</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:DocumentRoot</span><span class="p">]</span>
    <span class="n">mount</span><span class="p">(</span><span class="s2">"/"</span><span class="p">,</span> <span class="no">HTTPServlet</span><span class="o">::</span><span class="no">FileHandler</span><span class="p">,</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:DocumentRoot</span><span class="p">],</span>
          <span class="vi">@config</span><span class="p">[</span><span class="ss">:DocumentRootOptions</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:AccessLog</span><span class="p">]</span>
    <span class="vi">@config</span><span class="p">[</span><span class="ss">:AccessLog</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">[</span> <span class="vg">$stderr</span><span class="p">,</span> <span class="no">AccessLog</span><span class="o">::</span><span class="no">COMMON_LOG_FORMAT</span> <span class="p">],</span>
      <span class="p">[</span> <span class="vg">$stderr</span><span class="p">,</span> <span class="no">AccessLog</span><span class="o">::</span><span class="no">REFERER_LOG_FORMAT</span> <span class="p">]</span>
    <span class="p">]</span>
  <span class="k">end</span>

  <span class="vi">@virtual_hosts</span> <span class="o">=</span> <span class="no">Array</span><span class="p">.</span><span class="nf">new</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在父类 <code class="highlighter-rouge">GenericServer</code> 中初始化了用于监听端口号的 Socket 连接：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">185</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::GenericServer&gt;</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">config</span><span class="o">=</span><span class="p">{},</span> <span class="n">default</span><span class="o">=</span><span class="no">Config</span><span class="o">::</span><span class="no">General</span><span class="p">)</span>
  <span class="vi">@config</span> <span class="o">=</span> <span class="n">default</span><span class="p">.</span><span class="nf">dup</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
  <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:Stop</span>

  <span class="vi">@listeners</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">listen</span><span class="p">(</span><span class="vi">@config</span><span class="p">[</span><span class="ss">:BindAddress</span><span class="p">],</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:Port</span><span class="p">])</span>
  <span class="k">if</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="vi">@config</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">=</span> <span class="vi">@listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">addr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>每一个服务器都会在初始化的时候创建一系列的 <code class="highlighter-rouge">listener</code> 用于监听地址和端口号组成的元组，其内部调用了 <code class="highlighter-rouge">Utils</code> 模块中定义的方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">127</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::GenericServer&gt;</span>

<span class="k">def</span> <span class="nf">listen</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="vi">@listeners</span> <span class="o">+=</span> <span class="no">Utils</span><span class="o">::</span><span class="n">create_listeners</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">utils</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">61</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::Utils&gt;</span>

<span class="k">def</span> <span class="nf">create_listeners</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="n">sockets</span> <span class="o">=</span> <span class="no">Socket</span><span class="p">.</span><span class="nf">tcp_server_sockets</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="n">sockets</span> <span class="o">=</span> <span class="n">sockets</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">autoclose</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="n">ts</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="p">.</span><span class="nf">for_fd</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">fileno</span><span class="p">)</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">close</span>
    <span class="n">ts</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sockets</span>
<span class="k">end</span>
<span class="kp">module_function</span> <span class="ss">:create_listeners</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">.create_listeners</code> 方法中调用了 <code class="highlighter-rouge">.tcp_server_sockets</code> 方法由于初始化一组 <code class="highlighter-rouge">Socket</code> 对象，最后得到一个数组的 <code class="highlighter-rouge">TCPServer</code> 实例。</p>

<h3 id="挂载应用">挂载应用</h3>

<p>在使用 <code class="highlighter-rouge">WEBrick</code> 启动服务的时候，第二步就是将处理器和 Rack 应用挂载到根路由下：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vi">@server</span><span class="p">.</span><span class="nf">mount</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="p">,</span> <span class="n">app</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">#mount</code> 方法其实是一个比较简单的方法，因为我们在构造器中已经初始化了 <code class="highlighter-rouge">MountTable</code> 对象，所以这一步只是将传入的多个参数放到这个表中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">155</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">mount</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">servlet</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">)</span>
  <span class="vi">@mount_tab</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span> <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span> <span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">MountTable</code> 是一个包含从路由到 Rack 处理器一个 App 的映射表：</p>

<p><img src="https://img.draveness.me/2017-11-01-mounttable-and-applications.png" alt="mounttable-and-applications" /></p>

<p>当执行了 <code class="highlighter-rouge">MountTable</code> 的 <code class="highlighter-rouge">#compile</code> 方法时，上述的对象就会将表中的所有键按照加入的顺序逆序拼接成一个如下的正则表达式用来匹配传入的路由：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">^</span><span class="p">(</span><span class="sr">/|/</span><span class="n">admin</span><span class="o">|</span><span class="sr">/user)(?=/</span><span class="o">|</span><span class="err">$</span><span class="p">)</span>
</code></pre></div></div>

<p>上述正则表达式在使用时如果匹配到了指定的路由就会返回 <code class="highlighter-rouge">$&amp;</code> 和 <code class="highlighter-rouge">$'</code> 两个部分，前者表示整个匹配的文本，后者表示匹配文本后面的字符串。</p>

<h3 id="启动服务器">启动服务器</h3>

<p>在 <code class="highlighter-rouge">Rack::Handler::WEBrick</code> 中的 <code class="highlighter-rouge">.run</code> 方法先初始化了服务器，将处理器和应用挂载到了根路由上，在最后执行 <code class="highlighter-rouge">#start</code> 方法启动服务器：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">152</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">GenericServer</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">ServerError</span><span class="p">,</span> <span class="s2">"already started."</span> <span class="k">if</span> <span class="vi">@status</span> <span class="o">!=</span> <span class="ss">:Stop</span>

  <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:Running</span>
  <span class="k">begin</span>
    <span class="k">while</span> <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:Running</span>
      <span class="k">begin</span>
        <span class="k">if</span> <span class="n">svrs</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">select</span><span class="p">([</span><span class="o">*</span><span class="vi">@listeners</span><span class="p">],</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span>
          <span class="n">svrs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">each</span><span class="p">{</span> <span class="o">|</span><span class="n">svr</span><span class="o">|</span>
            <span class="n">sock</span> <span class="o">=</span> <span class="n">accept_client</span><span class="p">(</span><span class="n">svr</span><span class="p">)</span>
            <span class="n">start_thread</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="k">end</span>
      <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EBADF</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTSOCK</span><span class="p">,</span> <span class="no">IOError</span><span class="p">,</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
        <span class="k">raise</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">ensure</span>
    <span class="n">cleanup_listener</span>
    <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:Stop</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>由于原方法的实现比较复杂不容易阅读，在这里对方法进行了简化，省略了向 logger 中输出内容、处理服务的关闭以及执行回调等功能。</p>

<p>我们可以理解为上述方法通过 <code class="highlighter-rouge">.select</code> 方法对一组 Socket 进行监听，当有消息需要处理时就依次执行 <code class="highlighter-rouge">#accept_client</code> 和 <code class="highlighter-rouge">#start_thread</code> 两个方法处理来自客户端的请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">254</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">GenericServer</span>

<span class="k">def</span> <span class="nf">accept_client</span><span class="p">(</span><span class="n">svr</span><span class="p">)</span>
  <span class="n">sock</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="k">begin</span>
    <span class="n">sock</span> <span class="o">=</span> <span class="n">svr</span><span class="p">.</span><span class="nf">accept</span>
    <span class="n">sock</span><span class="p">.</span><span class="nf">sync</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="no">Utils</span><span class="o">::</span><span class="n">set_non_blocking</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNRESET</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNABORTED</span><span class="p">,</span>
         <span class="no">Errno</span><span class="o">::</span><span class="no">EPROTO</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EINVAL</span>
  <span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="se">\n\t</span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">backtrace</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span> <span class="n">msg</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="n">sock</span>
<span class="k">end</span>
</code></pre></div></div>

<p>WEBrick 在 <code class="highlighter-rouge">#accept_client</code> 方法中执行了 <code class="highlighter-rouge">#accept</code> 方法来得到一个 TCP 客户端 Socket，同时会通过 <code class="highlighter-rouge">set_non_blocking</code> 将该 Socket 变成非阻塞的，最后在方法末尾返回创建的 Socket。</p>

<p>在 <code class="highlighter-rouge">#start_thread</code> 方法中会<strong>开启一个新的线程</strong>，并在新的线程中执行 <code class="highlighter-rouge">#run</code> 方法来处理请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">278</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">GenericServer</span>

<span class="k">def</span> <span class="nf">start_thread</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="no">Thread</span><span class="p">.</span><span class="nf">start</span> <span class="p">{</span>
    <span class="k">begin</span>
      <span class="no">Thread</span><span class="p">.</span><span class="nf">current</span><span class="p">[</span><span class="ss">:WEBrickSocket</span><span class="p">]</span> <span class="o">=</span> <span class="n">sock</span>
      <span class="n">run</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTCONN</span><span class="p">,</span> <span class="no">ServerError</span><span class="p">,</span> <span class="no">Exception</span>
    <span class="k">ensure</span>
      <span class="no">Thread</span><span class="p">.</span><span class="nf">current</span><span class="p">[</span><span class="ss">:WEBrickSocket</span><span class="p">]</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="n">sock</span><span class="p">.</span><span class="nf">close</span>
    <span class="k">end</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="处理请求">处理请求</h3>

<p>所有的请求都不会由 <code class="highlighter-rouge">GenericServer</code> 这个通用的服务器来处理，它只处理通用的逻辑，对于 HTTP 请求的处理都是在 <code class="highlighter-rouge">HTTPServer#run</code> 中完成的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">69</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
  <span class="k">while</span> <span class="kp">true</span>
    <span class="n">res</span> <span class="o">=</span> <span class="no">HTTPResponse</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">req</span> <span class="o">=</span> <span class="no">HTTPRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">server</span> <span class="o">=</span> <span class="nb">self</span>
    <span class="k">begin</span>
      <span class="n">timeout</span> <span class="o">=</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:RequestTimeout</span><span class="p">]</span>
      <span class="k">while</span> <span class="n">timeout</span> <span class="o">&gt;</span> <span class="mi">0</span>
        <span class="k">break</span> <span class="k">if</span> <span class="n">sock</span><span class="p">.</span><span class="nf">to_io</span><span class="p">.</span><span class="nf">wait_readable</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
        <span class="k">break</span> <span class="k">if</span> <span class="vi">@status</span> <span class="o">!=</span> <span class="ss">:Running</span>
        <span class="n">timeout</span> <span class="o">-=</span> <span class="mf">0.5</span>
      <span class="k">end</span>
      <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span> <span class="k">if</span> <span class="n">timeout</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="vi">@status</span> <span class="o">!=</span> <span class="ss">:Running</span>
      <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span> <span class="k">if</span> <span class="n">sock</span><span class="p">.</span><span class="nf">eof?</span>
      <span class="n">req</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">request_method</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_method</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">request_uri</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_uri</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">request_http_version</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">http_version</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span><span class="p">,</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">RequestTimeout</span><span class="p">,</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">Error</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">set_error</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">Status</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="n">ex</span><span class="p">.</span><span class="nf">code</span>
    <span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">set_error</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
    <span class="k">ensure</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span> <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_line</span>
    <span class="k">end</span>
    <span class="k">break</span> <span class="k">if</span> <span class="vi">@http_version</span> <span class="o">&lt;</span> <span class="s2">"1.1"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>对 HTTP 协议了解的读者应该能从上面的代码中看到很多与 HTTP 协议相关的东西，比如 HTTP 的版本号、方法、URL 等等，上述方法总共做了三件事情，等待监听的 Socket 变得可读，执行 <code class="highlighter-rouge">#parse</code> 方法解析 Socket 上的数据，通过 <code class="highlighter-rouge">#service</code> 方法完成处理请求的响应，首先是对 Socket 上的数据进行解析：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httprequest</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">192</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPRequest</span>

<span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">socket</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
  <span class="vi">@socket</span> <span class="o">=</span> <span class="n">socket</span>
  <span class="k">begin</span>
    <span class="vi">@peeraddr</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:peeraddr</span><span class="p">)</span> <span class="p">?</span> <span class="n">socket</span><span class="p">.</span><span class="nf">peeraddr</span> <span class="p">:</span> <span class="p">[]</span>
    <span class="vi">@addr</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:addr</span><span class="p">)</span> <span class="p">?</span> <span class="n">socket</span><span class="p">.</span><span class="nf">addr</span> <span class="p">:</span> <span class="p">[]</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTCONN</span>
    <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span>
  <span class="k">end</span>

  <span class="n">read_request_line</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
  <span class="k">if</span> <span class="vi">@http_version</span><span class="p">.</span><span class="nf">major</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="k">if</span> <span class="vi">@request_method</span> <span class="o">==</span> <span class="s2">"CONNECT"</span>
  <span class="k">return</span> <span class="k">if</span> <span class="vi">@unparsed_uri</span> <span class="o">==</span> <span class="s2">"*"</span>

  <span class="k">begin</span>
    <span class="n">setup_forwarded_info</span>
    <span class="vi">@request_uri</span> <span class="o">=</span> <span class="n">parse_uri</span><span class="p">(</span><span class="vi">@unparsed_uri</span><span class="p">)</span>
    <span class="vi">@path</span> <span class="o">=</span> <span class="no">HTTPUtils</span><span class="o">::</span><span class="n">unescape</span><span class="p">(</span><span class="vi">@request_uri</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
    <span class="vi">@path</span> <span class="o">=</span> <span class="no">HTTPUtils</span><span class="o">::</span><span class="n">normalize_path</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
    <span class="vi">@host</span> <span class="o">=</span> <span class="vi">@request_uri</span><span class="p">.</span><span class="nf">host</span>
    <span class="vi">@port</span> <span class="o">=</span> <span class="vi">@request_uri</span><span class="p">.</span><span class="nf">port</span>
    <span class="vi">@query_string</span> <span class="o">=</span> <span class="vi">@request_uri</span><span class="p">.</span><span class="nf">query</span>
    <span class="vi">@script_name</span> <span class="o">=</span> <span class="s2">""</span>
    <span class="vi">@path_info</span> <span class="o">=</span> <span class="vi">@path</span><span class="p">.</span><span class="nf">dup</span>
  <span class="k">rescue</span>
    <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">BadRequest</span><span class="p">,</span> <span class="s2">"bad URI `</span><span class="si">#{</span><span class="vi">@unparsed_uri</span><span class="si">}</span><span class="s2">'."</span>
  <span class="k">end</span>

  <span class="k">if</span> <span class="sr">/close/io</span> <span class="o">=~</span> <span class="nb">self</span><span class="p">[</span><span class="s2">"connection"</span><span class="p">]</span>
    <span class="c1"># deal with keep alive</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>由于 HTTP 协议本身就比较复杂，请求中包含的信息也非常多，所以在这里用于<strong>解析</strong> HTTP 请求的代码也很多，想要了解 WEBrick 是如何解析 HTTP 请求的可以看 httprequest.rb 文件中的代码，在处理了 HTTP 请求之后，就开始执行 <code class="highlighter-rouge">#service</code> 响应该 HTTP 请求了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">125</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
  <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">script_name</span><span class="p">,</span> <span class="n">path_info</span> <span class="o">=</span> <span class="n">search_servlet</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">NotFound</span><span class="p">,</span> <span class="s2">"`</span><span class="si">#{</span><span class="n">req</span><span class="p">.</span><span class="nf">path</span><span class="si">}</span><span class="s2">' not found."</span> <span class="k">unless</span> <span class="n">servlet</span>
  <span class="n">req</span><span class="p">.</span><span class="nf">script_name</span> <span class="o">=</span> <span class="n">script_name</span>
  <span class="n">req</span><span class="p">.</span><span class="nf">path_info</span> <span class="o">=</span> <span class="n">path_info</span>
  <span class="n">si</span> <span class="o">=</span> <span class="n">servlet</span><span class="p">.</span><span class="nf">get_instance</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">)</span>
  <span class="n">si</span><span class="p">.</span><span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里我们会从上面提到的 <code class="highlighter-rouge">MountTable</code> 中找出在之前注册的处理器 handler 和 Rack 应用：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">182</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">search_servlet</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
  <span class="n">script_name</span><span class="p">,</span> <span class="n">path_info</span> <span class="o">=</span> <span class="vi">@mount_tab</span><span class="p">.</span><span class="nf">scan</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
  <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="vi">@mount_tab</span><span class="p">[</span><span class="n">script_name</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">servlet</span>
    <span class="p">[</span> <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">script_name</span><span class="p">,</span> <span class="n">path_info</span> <span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>得到了处理器 handler 之后，通过 <code class="highlighter-rouge">.get_instance</code> 方法创建一个新的实例，这个方法在大多数情况下等同于初始化方法 <code class="highlighter-rouge">.new</code>，随后调用了该处理器 <code class="highlighter-rouge">Rack::WEBrick::Handler</code> 的 <code class="highlighter-rouge">#service</code> 方法，该方法是在 rack 工程中定义的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">rack</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">handler</span><span class="o">/</span><span class="n">webrick</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">57</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span>

<span class="k">def</span> <span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">rack</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="n">env</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">meta_vars</span>
  <span class="n">env</span><span class="p">.</span><span class="nf">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">.</span><span class="nf">nil?</span> <span class="p">}</span>

  <span class="n">env</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span>
    <span class="c1"># ...</span>
    <span class="no">RACK_URL_SCHEME</span>   <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"yes"</span><span class="p">,</span> <span class="s2">"on"</span><span class="p">,</span> <span class="s2">"1"</span><span class="p">].</span><span class="nf">include?</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="no">HTTPS</span><span class="p">])</span> <span class="p">?</span> <span class="s2">"https"</span> <span class="p">:</span> <span class="s2">"http"</span><span class="p">,</span>
    <span class="c1"># ...</span>
  <span class="p">)</span>
  
  <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">begin</span>
    <span class="n">res</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="n">status</span><span class="p">.</span><span class="nf">to_i</span>
    <span class="n">headers</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">vs</span><span class="o">|</span>
      <span class="c1"># ...</span>
    <span class="p">}</span>

    <span class="n">body</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">body</span> <span class="o">&lt;&lt;</span> <span class="n">part</span>
    <span class="p">}</span>
  <span class="k">ensure</span>
    <span class="n">body</span><span class="p">.</span><span class="nf">close</span>  <span class="k">if</span> <span class="n">body</span><span class="p">.</span><span class="nf">respond_to?</span> <span class="ss">:close</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>由于上述方法也涉及了非常多 HTTP 协议的实现细节所以很多过程都被省略了，在上述方法中，我们先构建了应用的输入 <code class="highlighter-rouge">env</code> 哈希变量，然后通过执行 <code class="highlighter-rouge">#call</code> 方法将控制权交给 Rack 应用，最后获得一个由 <code class="highlighter-rouge">status</code>、<code class="highlighter-rouge">headers</code> 和 <code class="highlighter-rouge">body</code> 组成的三元组；在接下来的代码中，分别对这三者进行处理，为这次请求『填充』一个完成的 HTTP 请求。</p>

<p>到这里，最后由 <code class="highlighter-rouge">WEBrick::HTTPServer#run</code> 方法中的 <code class="highlighter-rouge">ensure</code> block 来结束整个 HTTP 请求的处理：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">69</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
  <span class="k">while</span> <span class="kp">true</span>
    <span class="n">res</span> <span class="o">=</span> <span class="no">HTTPResponse</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">req</span> <span class="o">=</span> <span class="no">HTTPRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">server</span> <span class="o">=</span> <span class="nb">self</span>
    <span class="k">begin</span>
      <span class="c1"># ...</span>
    <span class="k">ensure</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span> <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_line</span>
    <span class="k">end</span>
    <span class="k">break</span> <span class="k">if</span> <span class="vi">@http_version</span> <span class="o">&lt;</span> <span class="s2">"1.1"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">#send_reponse</code> 方法中，分别执行了 <code class="highlighter-rouge">#send_header</code> 和 <code class="highlighter-rouge">#send_body</code> 方法向当前的 Socket 中发送 HTTP 响应中的数据：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpresponse</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">205</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPResponse</span>

<span class="k">def</span> <span class="nf">send_response</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
  <span class="k">begin</span>
    <span class="n">setup_header</span><span class="p">()</span>
    <span class="n">send_header</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
    <span class="n">send_body</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EPIPE</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNRESET</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTCONN</span> <span class="o">=&gt;</span> <span class="n">ex</span>
    <span class="vi">@logger</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
    <span class="vi">@keep_alive</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
    <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
    <span class="vi">@keep_alive</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>所有向 Socket 中写入数据的工作最终都会由 <code class="highlighter-rouge">#_write_data</code> 这个方法来处理，将数据全部写入 Socket 中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpresponse</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">464</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPResponse</span>

<span class="k">def</span> <span class="nf">_write_data</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="n">socket</span> <span class="o">&lt;&lt;</span> <span class="n">data</span>
<span class="k">end</span>
</code></pre></div></div>

<p>从解析 HTTP 请求、调用 Rack 应用、创建 Response 到最后向 Socket 中写回数据，WEBrick 处理 HTTP 请求的部分就结束了。</p>

<h2 id="io-模型">I/O 模型</h2>

<p>通过对 WEBrick 源代码的阅读，我们其实已经能够了解整个 webserver 的工作原理，当我们启动一个 WEBrick 服务时只会启动一个进程，该进程会在指定的 ip 和端口上使用 <code class="highlighter-rouge">.select</code> 监听来自用户的所有 HTTP 请求：</p>

<p><img src="https://img.draveness.me/2017-11-01-webrick-io-model.png" alt="webrick-io-mode" /></p>

<p>当 <code class="highlighter-rouge">.select</code> 接收到来自用户的请求时，会为每一个请求创建一个新的 <code class="highlighter-rouge">Thread</code> 并在新的线程中对 HTTP 请求进行处理。</p>

<p>由于 WEBrick 在运行时只会启动一个进程，并没有其他的守护进程，所以它不够健壮，不能在发生问题时重启持续对外界提供服务，再加上 WEBrick 确实历史比较久远，代码的风格也不是特别的优雅，还有普遍知道的内存泄漏以及 HTTP 解析的问题，所以在生产环境中很少被使用。</p>

<p>虽然 WEBrick 有一些性能问题，但是作为 Ruby 自带的默认 webserver，在开发阶段使用 WEBrick 提供服务还是没有什么问题的。</p>

<h2 id="总结">总结</h2>

<p>WEBrick 是 Ruby 社区中老牌的 webserver，虽然至今也仍然被广泛了解和使用，但是在生产环境中开发者往往会使用更加稳定的 Unicorn 和 Puma 代替它，我们选择在这个系列的文章中介绍它很大原因就是 WEBrick 的源代码与实现足够简单，我们很快就能了解一个 webserver 到底具备那些功能，在接下来的文章中我们就可以分析更加复杂的 webserver、了解更复杂的 IO 模型与实现了。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">Ruby on Rails Server options</a></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
