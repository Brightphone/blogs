<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>brightphone.github.io/blogs/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Ruby Web 服务器的并发模型与性能</title>
	  <link>/blogs//ruby-webserver</link>
	  <author></author>
	  <pubDate>2017-11-17T00:00:00+00:00</pubDate>
	  <guid>/blogs//ruby-webserver</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>这是整个 Rack 系列文章的最后一篇了，在之前其实也尝试写过很多系列文章，但是到最后都因为各种原因放弃了，最近由于自己对 Ruby 的 webserver 非常感兴趣，所以看了下社区中常见 webserver 的实现原理，包括 WEBrick、Thin、Unicorn 和 Puma，虽然在 Ruby 社区中也有一些其他的 webserver 有着比较优异的性能，但是在这有限的文章中也没有办法全都介绍一遍。</p>

<p><img src="https://img.draveness.me/2017-11-17-webservers.png" alt="webservers" /></p>

<p>在这篇文章中，作者想对 Ruby 社区中不同 webserver 的实现原理和并发模型进行简单的介绍，总结一下前面几篇文章中的内容。</p>

<blockquote>
  <p>文中所有的压力测试都是在内存 16GB、8 CPU、2.6 GHz Intel Core i7 的 macOS 上运行的，如果你想要复现这里的测试可能不会得到完全相同的结果。</p>
</blockquote>

<h2 id="webrick">WEBrick</h2>

<p>WEBrick 是 Ruby 社区中非常古老的 Web 服务器，从 2000 年到现在已经有了将近 20 年的历史了，虽然 WEBrick 有着非常多的问题，但是迄今为止 WEBrick 也是开发环境中最常用的 Ruby 服务器；它使用了最为简单、直接的并发模型，运行一个 WEBrick 服务器只会在后台启动一个进程，默认监听来自 9292 端口的请求。</p>

<p><img src="https://img.draveness.me/2017-11-17-webrick-concurrency-model.png" alt="webrick-concurrency-model" /></p>

<p>当 WEBrick 通过 <code class="highlighter-rouge">.select</code> 方法监听到来自客户端的请求之后，会为每一个请求创建一个单独 <code class="highlighter-rouge">Thread</code> 并在新的线程中处理 HTTP 请求。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">run</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="p">[</span><span class="s1">'200'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'text/plain'</span><span class="p">},</span> <span class="p">[</span><span class="s1">'get rack\'d'</span><span class="p">]]</span> <span class="p">}</span>
</code></pre></div></div>
<p>如果我们如果创建一个最简单的 Rack 应用，直接返回所有的 HTTP 响应，那么使用下面的命令对 WEBrick 的服务器进行测试会得到如下的结果：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Concurrency Level:      100
Time taken <span class="k">for </span>tests:   22.519 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2160000 bytes
HTML transferred:       200000 bytes
Requests per second:    444.07 <span class="o">[</span><span class="c">#/sec] (mean)</span>
Time per request:       225.189 <span class="o">[</span>ms] <span class="o">(</span>mean<span class="o">)</span>
Time per request:       2.252 <span class="o">[</span>ms] <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
Transfer rate:          93.67 <span class="o">[</span>Kbytes/sec] received
</code></pre></div></div>

<p>在处理 ApacheBench 发出的 10000 个 HTTP 请求时，WEBrick 对于每个请求平均消耗了 225.189ms，每秒处理了 444.07 个请求；除此之外，在处理请求的过程中 WEBrick 进程的 CPU 占用率很快达到了 100%，通过这个测试我们就可以看出为什么不应该在生产环境中使用 WEBrick 作为 Ruby 的应用服务器，在业务逻辑和代码更加复杂的情况下，WEBrick 的性能想必也不会达到期望。</p>

<h2 id="thin">Thin</h2>

<p>在 2006 和 2007 两年，Ruby 社区中发布了两个至今都非常重要的开源项目，其中一个是 Mongrel，它提供了标准的 HTTP 接口，同时多语言的支持也使得 Mongrel 在当时非常流行，另一个项目就是 Rack 了，它在 Web 应用和 Web 服务器之间建立了一套统一的 <a href="https://www.google.com/search?client=safari&amp;rls=en&amp;q=rack+spec&amp;ie=UTF-8&amp;oe=UTF-8">标准</a>，规定了两者的协作方式，所有的应用只要遵循 Rack 协议就能够随时替换底层的应用服务器。</p>

<p><img src="https://img.draveness.me/2017-11-17-rack-protocol.png" alt="rack-protoco" /></p>

<p>随后，在 2009 年出现的 Thin 就站在了巨人的肩膀上，同时遵循了 Rack 协议并使用了 Mongrel 中的解析器，而它也是 Ruby 社区中第一个使用 Reactor 模型的 Web 服务器。</p>

<p><img src="https://img.draveness.me/2017-11-17-thin-concurrency-model.png" alt="thin-concurrency-model" /></p>

<p>Thin 使用 Reactor 模型处理客户端的 HTTP 请求，每一个请求都会交由 EventMachine，通过内部对事件的分发，最终执行相应的回调，这种事件驱动的 IO 模型与 node.js 非常相似，使用单进程单线程的并发模型却能够快速处理 HTTP 请求；在这里，我们仍然使用 ApacheBench 以及同样的负载对 Thin 的性能进行简单的测试。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Concurrency Level:      100
Time taken <span class="k">for </span>tests:   4.221 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      880000 bytes
HTML transferred:       100000 bytes
Requests per second:    2368.90 <span class="o">[</span><span class="c">#/sec] (mean)</span>
Time per request:       42.214 <span class="o">[</span>ms] <span class="o">(</span>mean<span class="o">)</span>
Time per request:       0.422 <span class="o">[</span>ms] <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
Transfer rate:          203.58 <span class="o">[</span>Kbytes/sec] received
</code></pre></div></div>

<p>对于一个相同的 HTTP 请求，Thin 的吞吐量大约是 WEBrick 的四倍，每秒能够处理 2368.90 个请求，同时处理的速度也大幅降低到了 42.214ms；在压力测试的过程中虽然 CPU 占用率有所上升但是在处理的过程中完全没有超过 90%，可以说 Thin 的性能碾压了 WEBrick，这可能也是开发者都不会在生产环境中使用 WEBrick 的最重要原因。</p>

<p>但是同样作为单进程运行的 Thin，由于没有 master 进程的存在，哪怕当前进程由于各种各样奇怪的原因被操作系统杀掉，我们也不会收到任何的通知，只能手动重启应用服务器。</p>

<h2 id="unicorn">Unicorn</h2>

<p>与 Thin 同年发布的 Unicorn 虽然也是 Mongrel 项目的一个 fork，但是使用了完全不同的并发模型，每Unicorn 内部通过多次 <code class="highlighter-rouge">fork</code> 创建多个 worker 进程，所有的 worker 进程也都由一个 master 进程管理和控制：</p>

<p><img src="https://img.draveness.me/2017-11-17-unicorn-master-workers.png" alt="unicorn-master-workers" /></p>

<p>由于 master 进程的存在，当 worker 进程被意外杀掉后会被 master 进程重启，能够保证持续对外界提供服务，多个进程的 worker 也能够很好地压榨多核 CPU 的性能，尽可能地提高请求的处理速度。</p>

<p><img src="https://img.draveness.me/2017-11-17-unicorn-concurrency-model.png" alt="unicorn-concurrency-model" /></p>

<p>一组由 master 管理的 Unicorn worker 会监听绑定的两个 Socket，所有来自客户端的请求都会通过操作系统内部的负载均衡进行调度，将请求分配到不同的 worker 进程上进行处理。</p>

<p>不过由于 Unicorn 虽然使用了多进程的并发模型，但是每个 worker 进程在处理请求时都是用了阻塞 I/O 的方式，所以如果客户端非常慢就会大大影响 Unicorn 的性能，不过这个问题就可以通过反向代理来 nginx 解决。</p>

<p><img src="https://img.draveness.me/2017-11-17-unicorn-multi-processes.png" alt="unicorn-multi-processes" /></p>

<p>在配置 Unicorn 的 worker 数时，为了最大化的利用 CPU 资源，往往会将进程数设置为 CPU 的数量，同样我们使用 ApacheBench 以及相同的负载测试一个使用 8 核 CPU 的 Unicorn 服务的处理效率：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Concurrency Level:      100
Time taken <span class="k">for </span>tests:   2.401 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      1110000 bytes
HTML transferred:       100000 bytes
Requests per second:    4164.31 <span class="o">[</span><span class="c">#/sec] (mean)</span>
Time per request:       24.014 <span class="o">[</span>ms] <span class="o">(</span>mean<span class="o">)</span>
Time per request:       0.240 <span class="o">[</span>ms] <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
Transfer rate:          451.41 <span class="o">[</span>Kbytes/sec] received
</code></pre></div></div>

<p>经过简单的压力测试，当前的一组 Unicorn 服务每秒能够处理 4000 多个请求，每个请求也只消耗了 24ms 的时间，比起使用单进程的 Thin 确实有着比较多的提升，但是并没有数量级的差距。</p>

<p>除此之外，Unicorn 由于其多进程的实现方式会占用大量的内存，在并行的处理大量请求时你可以看到内存的使用量有比较明显的上升。</p>

<h2 id="puma">Puma</h2>

<p>距离 Ruby 社区的第一个 webserver WEBrick 发布的 11 年之后的 2011 年，Puma 正式发布了，它与 Thin 和 Unicorn 一样都从 Mongrel 中继承了 HTTP 协议的解析器，不仅如此它还基于 Rack 协议重新对底层进行了实现。</p>

<p><img src="https://img.draveness.me/2017-11-17-puma-cluster-mode.png" alt="puma-cluster-mode" /></p>

<p>与 Unicorn 不同的是，Puma 是用了多进程加多线程模型，它可以同时在 fork 出来的多个 worker 中创建多个线程来处理请求；不仅如此 Puma 还实现了用于提高并发速度的 Reactor 模块和线程池能够在提升吞吐量的同时，降低内存的消耗。</p>

<p><img src="https://img.draveness.me/2017-11-17-puma-concurrency-model.png" alt="puma-concurrency-mode" /></p>

<p>但是由于 MRI 的存在，往往都需要使用 JRuby 才能最大化 Puma 服务器的性能，但是即便如此，使用 MRI 的 Puma 的吞吐量也能够轻松达到 Unicorn 的两倍。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Concurrency Level:      100
Time taken <span class="k">for </span>tests:   1.057 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      750000 bytes
HTML transferred:       100000 bytes
Requests per second:    9458.08 <span class="o">[</span><span class="c">#/sec] (mean)</span>
Time per request:       10.573 <span class="o">[</span>ms] <span class="o">(</span>mean<span class="o">)</span>
Time per request:       0.106 <span class="o">[</span>ms] <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
Transfer rate:          692.73 <span class="o">[</span>Kbytes/sec] received
</code></pre></div></div>

<p>在这里我们创建了 8 个 Puma 的 worker，每个 worker 中都包含 16~32 个用于处理用户请求的线程，每秒中处理的请求数接近 10000，处理时间也仅为 10.573ms，多进程、多线程以及 Reactor 模式的协作确实能够非常明显的增加 Web 服务器的工作性能和吞吐量。</p>

<p>在 Puma 的 <a href="http://puma.io">官方网站</a> 中，有一张不同 Web 服务器内存消耗的对比图：</p>

<p><img src="https://img.draveness.me/2017-11-17-memory-usage-comparision.png" alt="memory-usage-comparision" /></p>

<p>我们可以看到，与 Unicorn 相比 Puma 的内存使用量几乎可以忽略不计，它明显解决了多个 worker 占用大量内存的问题；不过使用了多线程模型的 Puma 需要开发者在应用中保证不同的线程不会出现竞争条件的问题，Unicorn 的多进程模型就不需要开发者思考这样的事情。</p>

<h2 id="对比">对比</h2>

<p>上述四种不同的 Web 服务器其实有着比较明显的性能差异，在使用同一个最简单的 Web 应用时，不同的服务器表现出了差异巨大的吞吐量：</p>

<p><img src="https://img.draveness.me/2017-11-17-ruby-webservers.jpeg" alt="ruby-webservers" /></p>

<p>Puma 和 Unicorn 两者之间可能还没有明显的数量级差距，1 倍的吞吐量差距也可能很容易被环境因素抹平了，但是 WEBrick 可以说是绝对无法与其他三者匹敌的。</p>

<p>上述的不同服务器其实有着截然不同的 I/O 并发模型，因为 MRI 中 GIL 的存在我们很难利用多核 CPU 的计算资源，所以大多数多线程模型在 MRI 上的性能可能只比单线程略好，达不到完全碾压的效果，但是 JRuby 或者 Rubinius 的使用确实能够利用多核 CPU 的计算资源，从而增加多线程模型的并发效率。</p>

<p><img src="https://img.draveness.me/2017-11-17-jruby.png" alt="jruby" /></p>

<p>传统的 I/O 模型就是在每次接收到客户端的请求时 fork 出一个新的进程来处理当前的请求或者在服务器启动时就启动多个进程，每一个进程在同一时间只能处理一个请求，所以这种并发模型的吞吐量有限，在今天已经几乎看不到使用 <strong>accept &amp; fork</strong> 这种方式处理请求的服务器了。</p>

<p>目前最为流行的方式还是混合多种 I/O 模型，同时使用多进程和多线程压榨 CPU 计算资源，例如 Phusion Passenger 或者 Puma 都支持在单进程和多进程、单线程和多线程之前来回切换，配置的不同会创建不同的并发模型，可以说是 Web 服务器中最好的选择了。</p>

<p>最后要说的 Thin 其实使用了非常不同的 I/O 模型，也就是事件驱动模型，这种模型在 Ruby 社区其实并没有那么热门，主要是因为 Rails 框架以及 Ruby 社区中的大部分项目并没有按照 Reactor 模型的方式进行设计，默认的文件 I/O 也都是阻塞的，而 Ruby 本身也可以利用多进程和多线程的计算资源，没有必要使用事件驱动的方式最大化并发量。</p>

<p><img src="https://img.draveness.me/2017-11-17-nodejs-logo.jpg" alt="nodejs-logo" /></p>

<p>Node.js 就完全不同了。Javascript 作为一个所有操作都会阻塞主线程的语言，更加需要事件驱动模型让主线程只负责接受 HTTP 请求，其余的脏活累活都交给线程池来做了，结果的返回都通过回调的形式通知主线程，这样才能提高吞吐量。</p>

<h2 id="总结">总结</h2>

<p>在这个系列的文章中，我们先后介绍了 Rack 的实现原理以及 Rack 协议，还有四种 webserver 包括 WEBrick、Thin、Unicorn 和 Puma 的实现，除了这四种应用服务器之外，Ruby 社区中还有其他的应用服务器，例如：Rainbows 和 Phusion Passenger，它们都有各自的实现以及优缺点。</p>

<p>从当前的情况来看，还是更推荐开发者使用 Puma 或者 Phusion Passenger 作为应用的服务器，这样能获得最佳的效果。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://read01.com/zh-hk/zm5B.html#.Wf0oLduB0sk">Ruby Web 服务器：这十五年</a></li>
  <li><a href="https://ruby-china.org/topics/25276">Ruby 服务器对比</a></li>
  <li><a href="https://ruby-china.org/topics/10832">Ruby 的多线程应用服务器介绍</a></li>
  <li><a href="https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">Ruby on Rails Server options</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>浅谈 Puma 的并发模型与实现</title>
	  <link>/blogs//rack-puma</link>
	  <author></author>
	  <pubDate>2017-11-10T00:00:00+00:00</pubDate>
	  <guid>/blogs//rack-puma</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>这篇文章已经是整个 Rack 系列文章的第五篇了，在前面的文章中我们见到了多线程模型、多进程模型以及事件驱动的 I/O 模型，对于几种常见的 webserver 已经很了解了，其实无论是 Ruby 还是其他社区对于 webserver 的实现也就是这么几种方式：多线程、多线程和 Reactor。</p>

<p><img src="https://img.draveness.me/2017-11-10-puma-logo.png" alt="puma-logo" /></p>

<p>在这篇文章中要介绍的 Puma 只是混合了两种 I/O 模型，同时使用多进程和多线程来提高应用的并行能力。</p>

<blockquote>
  <p>文中使用的 Puma 版本是 v3.10.0，如果你使用了不同版本的 Puma，原理上的区别不会太大，只是在一些方法的实现上会有一些细微的不同。</p>
</blockquote>

<h2 id="rack-默认处理器">Rack 默认处理器</h2>

<p>Puma 是目前 Rack 中优先级最高的默认 webserver，如果直接使用 <code class="highlighter-rouge">rackup</code> 命令并且当前机器上安装了 <code class="highlighter-rouge">puma</code>，那么 Rack 会自动选择 Puma 作为当前处理 HTTP 请求的服务器：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">default</span>
  <span class="n">pick</span> <span class="p">[</span><span class="s1">'puma'</span><span class="p">,</span> <span class="s1">'thin'</span><span class="p">,</span> <span class="s1">'webrick'</span><span class="p">]</span>
<span class="k">end</span>

<span class="err">$</span> <span class="n">rackup</span>
<span class="no">Puma</span> <span class="n">starting</span> <span class="k">in</span> <span class="n">single</span> <span class="n">mode</span><span class="o">...</span>
<span class="o">*</span> <span class="no">Version</span> <span class="mf">3.10</span><span class="o">.</span><span class="mi">0</span> <span class="p">(</span><span class="n">ruby</span> <span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p222</span><span class="p">),</span> <span class="ss">codename: </span><span class="no">Russell</span><span class="err">'</span><span class="n">s</span> <span class="no">Teapot</span>
<span class="o">*</span> <span class="no">Min</span> <span class="ss">threads: </span><span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="ss">threads: </span><span class="mi">16</span>
<span class="o">*</span> <span class="no">Environment</span><span class="p">:</span> <span class="n">development</span>
<span class="o">*</span> <span class="no">Listening</span> <span class="n">on</span> <span class="n">tcp</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9292</span>
<span class="no">Use</span> <span class="no">Ctrl</span><span class="o">-</span><span class="no">C</span> <span class="n">to</span> <span class="n">stop</span>
</code></pre></div></div>

<p>通过在 <code class="highlighter-rouge">Rack::Handler</code> 下创建一个新的 <code class="highlighter-rouge">module Puma</code> 再实现类方法 <code class="highlighter-rouge">.run</code>，我们就可以直接将启动的过程转交给 <code class="highlighter-rouge">Puma::Launcher</code> 处理：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Rack</span>
  <span class="k">module</span> <span class="nn">Handler</span>
    <span class="k">module</span> <span class="nn">Puma</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
        <span class="n">conf</span>   <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
        <span class="n">events</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:Silent</span><span class="p">)</span> <span class="p">?</span> <span class="o">::</span><span class="no">Puma</span><span class="o">::</span><span class="no">Events</span><span class="p">.</span><span class="nf">strings</span> <span class="p">:</span> <span class="o">::</span><span class="no">Puma</span><span class="o">::</span><span class="no">Events</span><span class="p">.</span><span class="nf">stdio</span>
        <span class="n">launcher</span> <span class="o">=</span> <span class="o">::</span><span class="no">Puma</span><span class="o">::</span><span class="no">Launcher</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">conf</span><span class="p">,</span> <span class="ss">:events</span> <span class="o">=&gt;</span> <span class="n">events</span><span class="p">)</span>

        <span class="k">yield</span> <span class="n">launcher</span> <span class="k">if</span> <span class="nb">block_given?</span>
        <span class="k">begin</span>
          <span class="n">launcher</span><span class="p">.</span><span class="nf">run</span>
        <span class="k">rescue</span> <span class="no">Interrupt</span>
          <span class="nb">puts</span> <span class="s2">"* Gracefully stopping, waiting for requests to finish"</span>
          <span class="n">launcher</span><span class="p">.</span><span class="nf">stop</span>
          <span class="nb">puts</span> <span class="s2">"* Goodbye!"</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="启动器-launcher">启动器 Launcher</h2>

<p>Puma 中的启动器确实没有做太多的工作，大部分的代码其实都是在做配置，从 <code class="highlighter-rouge">ENV</code> 和上下文的环境中读取参数，而整个初始化方法中需要注意的地方也只有不同 <code class="highlighter-rouge">@runner</code> 的初始化了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">launcher</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">44</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Launcher</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">conf</span><span class="p">,</span> <span class="n">launcher_args</span><span class="o">=</span><span class="p">{})</span>
  <span class="vi">@runner</span>        <span class="o">=</span> <span class="kp">nil</span>
  <span class="vi">@events</span>        <span class="o">=</span> <span class="n">launcher_args</span><span class="p">[</span><span class="ss">:events</span><span class="p">]</span> <span class="o">||</span> <span class="no">Events</span><span class="o">::</span><span class="no">DEFAULT</span>
  <span class="vi">@argv</span>          <span class="o">=</span> <span class="n">launcher_args</span><span class="p">[</span><span class="ss">:argv</span><span class="p">]</span> <span class="o">||</span> <span class="p">[]</span>
  <span class="vi">@config</span>        <span class="o">=</span> <span class="n">conf</span>
  <span class="vi">@config</span><span class="p">.</span><span class="nf">load</span>

  <span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="vi">@restart_dir</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">clustered?</span>
    <span class="vi">@events</span><span class="p">.</span><span class="nf">formatter</span> <span class="o">=</span> <span class="no">Events</span><span class="o">::</span><span class="no">PidFormatter</span><span class="p">.</span><span class="nf">new</span>
    <span class="vi">@options</span><span class="p">[</span><span class="ss">:logger</span><span class="p">]</span> <span class="o">=</span> <span class="vi">@events</span>

    <span class="vi">@runner</span> <span class="o">=</span> <span class="no">Cluster</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="vi">@events</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="vi">@runner</span> <span class="o">=</span> <span class="no">Single</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="vi">@events</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:run</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">#initialize</code> 方法中，<code class="highlighter-rouge">@runner</code> 的初始化是根据当前配置中的 worker 数决定的，如果当前的 <code class="highlighter-rouge">worker &gt; 0</code>，那么就会选择 <code class="highlighter-rouge">Cluster</code> 作为 <code class="highlighter-rouge">@runner</code>，否则就会选择 <code class="highlighter-rouge">Single</code>，在初始化结束之后会执行 <code class="highlighter-rouge">Launcher#run</code> 方法启动当前的 Puma 进程：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">launcher</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">165</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Launcher</span>

<span class="k">def</span> <span class="nf">run</span>
  <span class="n">previous_env</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">.</span><span class="nf">to_h</span>

  <span class="n">setup_signals</span>
  <span class="vi">@runner</span><span class="p">.</span><span class="nf">run</span>

  <span class="k">case</span> <span class="vi">@status</span>
  <span class="k">when</span> <span class="ss">:halt</span>
    <span class="n">log</span> <span class="s2">"* Stopping immediately!"</span>
  <span class="k">when</span> <span class="ss">:run</span><span class="p">,</span> <span class="ss">:stop</span>
    <span class="n">graceful_stop</span>
  <span class="k">when</span> <span class="ss">:restart</span>
    <span class="n">log</span> <span class="s2">"* Restarting..."</span>
    <span class="no">ENV</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">previous_env</span><span class="p">)</span>
    <span class="vi">@runner</span><span class="p">.</span><span class="nf">before_restart</span>
    <span class="n">restart!</span>
  <span class="k">when</span> <span class="ss">:exit</span>
    <span class="c1"># nothing</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这个简单的 <code class="highlighter-rouge">#run</code> 方法中，Puma 通过 <code class="highlighter-rouge">#setup_singals</code> 设置了一些信号的响应过程，在这之后执行 <code class="highlighter-rouge">Runner#run</code> 启动 Puma 的服务。</p>

<h2 id="启动服务">启动服务</h2>

<p>根据配置文件中不同的配置项，Puma 在启动时有两种不同的选择，一种是当前的 worker 数为 0，这时会通过 <code class="highlighter-rouge">Single</code> 启动单机模式的 Puma 进程，另一种情况是 worker 数大于 0，它使用 <code class="highlighter-rouge">Cluster</code> 的 runner 启动一组 Puma 进程。</p>

<p><img src="https://img.draveness.me/2017-11-10-single-cluster.png" alt="single-cluster" /></p>

<p>在这一节中文章将会简单介绍不同的 runner 是如何启动 Puma 进程的。</p>

<h3 id="单机模式">单机模式</h3>

<p>Puma 单机模式的启动通过 <code class="highlighter-rouge">Single</code> 类来处理，而定义这个类的文件 single.rb 中其实并没有多少代码，我们从中就可以看到单机模式下 Puma 的启动其实并不复杂：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">single</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">40</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Single</span>

<span class="k">def</span> <span class="nf">run</span>
  <span class="n">output_header</span> <span class="s2">"single"</span>

  <span class="k">if</span> <span class="n">daemon?</span>
    <span class="n">log</span> <span class="s2">"* Daemonizing..."</span>
    <span class="no">Process</span><span class="p">.</span><span class="nf">daemon</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
    <span class="n">redirect_io</span>
  <span class="k">end</span>

  <span class="n">load_and_bind</span>
  <span class="vi">@launcher</span><span class="p">.</span><span class="nf">write_state</span>
  <span class="vi">@server</span> <span class="o">=</span> <span class="n">server</span> <span class="o">=</span> <span class="n">start_server</span>

  <span class="k">begin</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">run</span><span class="p">.</span><span class="nf">join</span>
  <span class="k">rescue</span> <span class="no">Interrupt</span>
    <span class="c1"># Swallow it</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>如果我们启动了后台模式，就会通过 Puma 为 Process 模块扩展的方法 <code class="highlighter-rouge">.daemon</code> 在后台启动新的 Puma 进程，启动的过程其实和 Unicorn 中的差不多：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">daemon_ext</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">12</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Process&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">daemon</span><span class="p">(</span><span class="n">nochdir</span><span class="o">=</span><span class="kp">false</span><span class="p">,</span> <span class="n">noclose</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
  <span class="nb">exit</span> <span class="k">if</span> <span class="nb">fork</span>
  <span class="no">Process</span><span class="p">.</span><span class="nf">setsid</span>
  <span class="nb">exit</span> <span class="k">if</span> <span class="nb">fork</span>

  <span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span> <span class="s2">"/"</span> <span class="k">unless</span> <span class="n">nochdir</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">noclose</span>
    <span class="no">STDIN</span><span class="p">.</span><span class="nf">reopen</span> <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">"/dev/null"</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)</span>
    <span class="n">null_out</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">open</span> <span class="s2">"/dev/null"</span><span class="p">,</span> <span class="s2">"w"</span>
    <span class="no">STDOUT</span><span class="p">.</span><span class="nf">reopen</span> <span class="n">null_out</span>
    <span class="no">STDERR</span><span class="p">.</span><span class="nf">reopen</span> <span class="n">null_out</span>
  <span class="k">end</span>

  <span class="mi">0</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 Puma 中通过两次 <code class="highlighter-rouge">fork</code> 同时将当前进程从终端中分离出来，最终就可以得到一个独立的 Puma 进程，你可以通过下面的图片简单理解这个过程：</p>

<p><img src="https://img.draveness.me/2017-11-10-puma-daemonize.png" alt="puma-daemonize" /></p>

<p>当我们在后台启动了一个 Puma 的 master 进程之后就可以开始启动 Puma 的服务器了，也就是 <code class="highlighter-rouge">Puma::Server</code> 的实例：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">runner</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">151</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Runner</span>

<span class="k">def</span> <span class="nf">start_server</span>
  <span class="n">min_t</span> <span class="o">=</span> <span class="vi">@options</span><span class="p">[</span><span class="ss">:min_threads</span><span class="p">]</span>
  <span class="n">max_t</span> <span class="o">=</span> <span class="vi">@options</span><span class="p">[</span><span class="ss">:max_threads</span><span class="p">]</span>

  <span class="n">server</span> <span class="o">=</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">new</span> <span class="n">app</span><span class="p">,</span> <span class="vi">@launcher</span><span class="p">.</span><span class="nf">events</span><span class="p">,</span> <span class="vi">@options</span>
  <span class="n">server</span><span class="p">.</span><span class="nf">min_threads</span> <span class="o">=</span> <span class="n">min_t</span>
  <span class="n">server</span><span class="p">.</span><span class="nf">max_threads</span> <span class="o">=</span> <span class="n">max_t</span>
  <span class="n">server</span><span class="p">.</span><span class="nf">inherit_binder</span> <span class="vi">@launcher</span><span class="p">.</span><span class="nf">binder</span>

  <span class="k">if</span> <span class="vi">@options</span><span class="p">[</span><span class="ss">:mode</span><span class="p">]</span> <span class="o">==</span> <span class="ss">:tcp</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">tcp_mode!</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="n">development?</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">leak_stack_on_error</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="n">server</span>
<span class="k">end</span>
</code></pre></div></div>

<p>这里有很多不是特别重要的代码，需要注意的是 <code class="highlighter-rouge">Server</code> 初始化的过程以及最大、最小线程数的设置，这些信息都是通过命令行或者配置文件传入的，例如 <code class="highlighter-rouge">puma -t 8:32</code> 表示当前的最小线程数为 8、最大线程数为 32 个，Puma 会根据当前的流量自动调节同一个进程中的线程个数。</p>

<p>服务在启动时会创建一个线程池 <code class="highlighter-rouge">ThreadPool</code> 并传入一个用于处理请求的 block，这个方法的实现其实非常长，这里省略了很多代码；</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">255</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">background</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
  <span class="n">queue_requests</span> <span class="o">=</span> <span class="vi">@queue_requests</span>

  <span class="vi">@thread_pool</span> <span class="o">=</span> <span class="no">ThreadPool</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@min_threads</span><span class="p">,</span>
                                <span class="vi">@max_threads</span><span class="p">,</span>
                                <span class="no">IOBuffer</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">client</span><span class="p">,</span> <span class="n">buffer</span><span class="o">|</span>
    <span class="n">process_now</span> <span class="o">=</span> <span class="kp">false</span>

    <span class="k">begin</span>
      <span class="k">if</span> <span class="n">queue_requests</span>
        <span class="n">process_now</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">eagerly_finish</span>
      <span class="k">else</span>
        <span class="n">client</span><span class="p">.</span><span class="nf">finish</span>
        <span class="n">process_now</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">MiniSSL</span><span class="o">::</span><span class="no">SSLError</span><span class="p">,</span> <span class="no">HttpParserError</span> <span class="o">=&gt;</span> <span class="n">e</span>
      <span class="c1"># ...</span>
    <span class="k">rescue</span> <span class="no">ConnectionError</span>
      <span class="n">client</span><span class="p">.</span><span class="nf">close</span>
    <span class="k">else</span>
      <span class="k">if</span> <span class="n">process_now</span>
        <span class="n">process_client</span> <span class="n">client</span><span class="p">,</span> <span class="n">buffer</span>
      <span class="k">else</span>
        <span class="n">client</span><span class="p">.</span><span class="nf">set_timeout</span> <span class="vi">@first_data_timeout</span>
        <span class="vi">@reactor</span><span class="p">.</span><span class="nf">add</span> <span class="n">client</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">if</span> <span class="n">queue_requests</span>
    <span class="vi">@reactor</span> <span class="o">=</span> <span class="no">Reactor</span><span class="p">.</span><span class="nf">new</span> <span class="nb">self</span><span class="p">,</span> <span class="vi">@thread_pool</span>
    <span class="vi">@reactor</span><span class="p">.</span><span class="nf">run_in_thread</span>
  <span class="k">end</span>

  <span class="vi">@thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="n">handle_servers</span> <span class="p">}</span>
  <span class="vi">@thread</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述代码创建了一个新的 <code class="highlighter-rouge">Reactor</code> 对象并在一个新的线程中执行 <code class="highlighter-rouge">#handle_servers</code> 接受客户端的请求，文章会在后面介绍请求的处理。</p>

<h3 id="集群模式">集群模式</h3>

<p>如果在启动 puma 进程时使用 <code class="highlighter-rouge">-w</code> 参数，例如下面的命令：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>puma <span class="nt">-w</span> 3
<span class="o">[</span>20904] Puma starting <span class="k">in </span>cluster mode...
<span class="o">[</span>20904] <span class="k">*</span> Version 3.10.0 <span class="o">(</span>ruby 2.3.3-p222<span class="o">)</span>, codename: Russell<span class="s1">'s Teapot
[20904] * Min threads: 0, max threads: 16
[20904] * Environment: development
[20904] * Process workers: 3
[20904] * Phased restart available
[20904] * Listening on tcp://0.0.0.0:9292
[20904] Use Ctrl-C to stop
[20904] - Worker 2 (pid: 20907) booted, phase: 0
[20904] - Worker 1 (pid: 20906) booted, phase: 0
[20904] - Worker 0 (pid: 20905) booted, phase: 0

$ ps aux | grep puma
draveness        20909   0.0  0.0  4296440    952 s001  S+   10:23AM   0:00.01 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn puma
draveness        20907   0.0  0.1  4358888  12128 s003  S+   10:23AM   0:00.07 puma: cluster worker 2: 20904 [Desktop]
draveness        20906   0.0  0.1  4358888  12148 s003  S+   10:23AM   0:00.07 puma: cluster worker 1: 20904 [Desktop]
draveness        20905   0.0  0.1  4358888  12196 s003  S+   10:23AM   0:00.07 puma: cluster worker 0: 20904 [Desktop]
draveness        20904   0.0  0.2  4346784  25632 s003  S+   10:23AM   0:00.67 puma 3.10.0 (tcp://0.0.0.0:9292) [Desktop]
</span></code></pre></div></div>

<p>上述命令就会启动一个 Puma 的 master 进程和三个 worker 进程，Puma 集群模式就是通过 <code class="highlighter-rouge">Puma::Cluster</code> 类来启动的，而启动集群的方法 <code class="highlighter-rouge">#run</code> 仍然是一个非常长的方法，在这里仍然省去了很多的代码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">cluster</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">386</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Cluster</span>

<span class="k">def</span> <span class="nf">run</span>
  <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:run</span>

  <span class="n">output_header</span> <span class="s2">"cluster"</span>
  <span class="n">log</span> <span class="s2">"* Process workers: </span><span class="si">#{</span><span class="vi">@options</span><span class="p">[</span><span class="ss">:workers</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>

  <span class="n">read</span><span class="p">,</span> <span class="vi">@wakeup</span> <span class="o">=</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Util</span><span class="p">.</span><span class="nf">pipe</span>

  <span class="no">Process</span><span class="p">.</span><span class="nf">daemon</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
  <span class="n">spawn_workers</span>

  <span class="k">begin</span>
    <span class="k">while</span> <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:run</span>
      <span class="k">begin</span>
        <span class="n">res</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">select</span><span class="p">([</span><span class="n">read</span><span class="p">],</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="no">WORKER_CHECK_INTERVAL</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">res</span>
          <span class="n">req</span> <span class="o">=</span> <span class="n">read</span><span class="p">.</span><span class="nf">read_nonblock</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
          <span class="n">result</span> <span class="o">=</span> <span class="n">read</span><span class="p">.</span><span class="nf">gets</span>
          <span class="n">pid</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="nf">to_i</span>

          <span class="k">if</span> <span class="n">w</span> <span class="o">=</span> <span class="vi">@workers</span><span class="p">.</span><span class="nf">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="p">.</span><span class="nf">pid</span> <span class="o">==</span> <span class="n">pid</span> <span class="p">}</span>
            <span class="k">case</span> <span class="n">req</span>
            <span class="k">when</span> <span class="s2">"b"</span>
              <span class="n">w</span><span class="p">.</span><span class="nf">boot!</span>
            <span class="k">when</span> <span class="s2">"t"</span>
              <span class="n">w</span><span class="p">.</span><span class="nf">dead!</span>
            <span class="k">when</span> <span class="s2">"p"</span>
              <span class="n">w</span><span class="p">.</span><span class="nf">ping!</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sr">/^\d+/</span><span class="p">,</span><span class="s1">''</span><span class="p">).</span><span class="nf">chomp</span><span class="p">)</span>
            <span class="k">end</span>
          <span class="k">else</span>
            <span class="n">log</span> <span class="s2">"! Out-of-sync worker list, no </span><span class="si">#{</span><span class="n">pid</span><span class="si">}</span><span class="s2"> worker"</span>
          <span class="k">end</span>
        <span class="k">end</span>

      <span class="k">rescue</span> <span class="no">Interrupt</span>
        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:stop</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">stop_workers</span> <span class="k">unless</span> <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:halt</span>
  <span class="k">ensure</span>
    <span class="n">read</span><span class="p">.</span><span class="nf">close</span>
    <span class="vi">@wakeup</span><span class="p">.</span><span class="nf">close</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在使用 <code class="highlighter-rouge">#spawn_workers</code> 之后，当前 master 进程就开始通过 Socket 监听所有来自worker 的消息，例如当前的状态以及心跳检查等等。</p>

<p><code class="highlighter-rouge">#spawn_workers</code> 方法会通过 fork 创建当前集群中缺少的 worker 数，在新的进程中执行 <code class="highlighter-rouge">#worker</code> 方法并将 worker 保存在 master 的 <code class="highlighter-rouge">@workers</code> 数组中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">cluster</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">116</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Cluster</span>

<span class="k">def</span> <span class="nf">spawn_workers</span>
  <span class="n">diff</span> <span class="o">=</span> <span class="vi">@options</span><span class="p">[</span><span class="ss">:workers</span><span class="p">]</span> <span class="o">-</span> <span class="vi">@workers</span><span class="p">.</span><span class="nf">size</span>
  <span class="k">return</span> <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="mi">1</span>

  <span class="n">master</span> <span class="o">=</span> <span class="no">Process</span><span class="p">.</span><span class="nf">pid</span>

  <span class="n">diff</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">next_worker_index</span>
    <span class="n">pid</span> <span class="o">=</span> <span class="nb">fork</span> <span class="p">{</span> <span class="n">worker</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">master</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">debug</span> <span class="s2">"Spawned worker: </span><span class="si">#{</span><span class="n">pid</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@workers</span> <span class="o">&lt;&lt;</span> <span class="no">Worker</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="vi">@phase</span><span class="p">,</span> <span class="vi">@options</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 fork 出的新进程中，<code class="highlighter-rouge">#worker</code> 方法与单机模式中一样都创建了新的 <code class="highlighter-rouge">Server</code> 实例，调用 <code class="highlighter-rouge">#run</code> 和 <code class="highlighter-rouge">#join</code> 方法启动服务：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">cluster</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">231</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Cluster</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">master</span><span class="p">)</span>
  <span class="n">title</span>  <span class="o">=</span> <span class="s2">"puma: cluster worker </span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">master</span><span class="si">}</span><span class="s2">"</span>
  <span class="vg">$0</span> <span class="o">=</span> <span class="n">title</span>

  <span class="n">server</span> <span class="o">=</span> <span class="n">start_server</span>
  <span class="n">server</span><span class="p">.</span><span class="nf">run</span><span class="p">.</span><span class="nf">join</span>
<span class="k">end</span>
</code></pre></div></div>

<p>与 Unicorn 完全相同，Puma 使用了一个 master 进程来管理所有的 worker 进程：</p>

<p><img src="https://img.draveness.me/2017-11-10-puma-cluster-mode.png" alt="puma-cluster-mode" /></p>

<p>虽然 Puma 集群中的所有节点也都是由 master 管理的，但是所有的事件和信号会由各个接受信号的进程处理的，只有在特定事件发生时会通知主进程。</p>

<h2 id="处理请求">处理请求</h2>

<p>在 Puma 中所有的请求都是通过 <code class="highlighter-rouge">Server</code> 和 <code class="highlighter-rouge">ThreadPool</code> 协作来响应的，我们在 <code class="highlighter-rouge">#handler_servers</code> 方法中通过 <code class="highlighter-rouge">IO.select</code> 监听一组套接字上的读写事件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">334</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">handle_servers</span>
  <span class="k">begin</span>
    <span class="n">sockets</span> <span class="o">=</span> <span class="vi">@binder</span><span class="p">.</span><span class="nf">ios</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="vi">@thread_pool</span>

    <span class="k">while</span> <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:run</span>
      <span class="k">begin</span>
        <span class="n">ios</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">select</span> <span class="n">sockets</span>
        <span class="n">ios</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sock</span><span class="o">|</span>
          <span class="k">begin</span>
            <span class="k">if</span> <span class="n">io</span> <span class="o">=</span> <span class="n">sock</span><span class="p">.</span><span class="nf">accept_nonblock</span>
              <span class="n">client</span> <span class="o">=</span> <span class="no">Client</span><span class="p">.</span><span class="nf">new</span> <span class="n">io</span><span class="p">,</span> <span class="vi">@binder</span><span class="p">.</span><span class="nf">env</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
              <span class="n">pool</span> <span class="o">&lt;&lt;</span> <span class="n">client</span>
              <span class="n">pool</span><span class="p">.</span><span class="nf">wait_until_not_full</span>
            <span class="k">end</span>
          <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNABORTED</span>
            <span class="n">io</span><span class="p">.</span><span class="nf">close</span> <span class="k">rescue</span> <span class="kp">nil</span>
          <span class="k">end</span>
        <span class="k">rescue</span> <span class="no">Object</span> <span class="o">=&gt;</span> <span class="n">e</span>
          <span class="vi">@events</span><span class="p">.</span><span class="nf">unknown_error</span> <span class="nb">self</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="s2">"Listen loop"</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
      <span class="c1"># ...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>当有读写事件发生时会非阻塞的接受 Socket，创建新的 <code class="highlighter-rouge">Client</code> 对象最后加入到线程池中交给线程池来处理接下来的请求。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">thread_pool</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">140</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">ThreadPool</span>

<span class="k">def</span> <span class="nf">&lt;&lt;</span><span class="p">(</span><span class="n">work</span><span class="p">)</span>
  <span class="vi">@mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
    <span class="k">if</span> <span class="vi">@shutdown</span>
      <span class="k">raise</span> <span class="s2">"Unable to add work while shutting down"</span>
    <span class="k">end</span>

    <span class="vi">@todo</span> <span class="o">&lt;&lt;</span> <span class="n">work</span>

    <span class="k">if</span> <span class="vi">@waiting</span> <span class="o">&lt;</span> <span class="vi">@todo</span><span class="p">.</span><span class="nf">size</span> <span class="n">and</span> <span class="vi">@spawned</span> <span class="o">&lt;</span> <span class="vi">@max</span>
      <span class="n">spawn_thread</span>
    <span class="k">end</span>

    <span class="vi">@not_empty</span><span class="p">.</span><span class="nf">signal</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">ThreadPool</code> 覆写了 <code class="highlighter-rouge">#&lt;&lt;</code> 方法，在这个方法中它将 <code class="highlighter-rouge">Client</code> 对象加入到 <code class="highlighter-rouge">@todo</code> 数组中，通过对比几个参数选择是否创建一个新的线程来处理当前队列中的任务。</p>

<p>重新回到 <code class="highlighter-rouge">ThreadPool</code> 的初始化方法 <code class="highlighter-rouge">#initialize</code> 中，线程池在初始化时就会创建最低数量的线程保证当前的 worker 进程中有足够的工作线程能够处理客户端的请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">thread_pool</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">21</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">ThreadPool</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="o">*</span><span class="n">extra</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="vi">@mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="p">.</span><span class="nf">new</span>

  <span class="vi">@todo</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="vi">@spawned</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="vi">@waiting</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="vi">@min</span> <span class="o">=</span> <span class="no">Integer</span><span class="p">(</span><span class="n">min</span><span class="p">)</span>
  <span class="vi">@max</span> <span class="o">=</span> <span class="no">Integer</span><span class="p">(</span><span class="n">max</span><span class="p">)</span>
  <span class="vi">@block</span> <span class="o">=</span> <span class="n">block</span>
  <span class="vi">@extra</span> <span class="o">=</span> <span class="n">extra</span>

  <span class="vi">@workers</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="vi">@mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
    <span class="vi">@min</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span> <span class="n">spawn_thread</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>每一个线程都是通过 <code class="highlighter-rouge">Thread.new</code> 创建的，我们会在这个线程执行的过程中执行传入的 block：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">thread_pool</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">21</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">ThreadPool</span>

<span class="k">def</span> <span class="nf">spawn_thread</span>
  <span class="vi">@spawned</span> <span class="o">+=</span> <span class="mi">1</span>

  <span class="n">th</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@spawned</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">spawned</span><span class="o">|</span>
    <span class="n">todo</span>  <span class="o">=</span> <span class="vi">@todo</span>
    <span class="n">block</span> <span class="o">=</span> <span class="vi">@block</span>
    <span class="n">mutex</span> <span class="o">=</span> <span class="vi">@mutex</span>

    <span class="n">extra</span> <span class="o">=</span> <span class="vi">@extra</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span>

    <span class="k">while</span> <span class="kp">true</span>
      <span class="n">work</span> <span class="o">=</span> <span class="kp">nil</span>

      <span class="n">continue</span> <span class="o">=</span> <span class="kp">true</span>

      <span class="n">mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
        <span class="n">work</span> <span class="o">=</span> <span class="n">todo</span><span class="p">.</span><span class="nf">shift</span>
      <span class="k">end</span>

      <span class="k">begin</span>
        <span class="n">block</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="o">*</span><span class="n">extra</span><span class="p">)</span>
      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
        <span class="no">STDERR</span><span class="p">.</span><span class="nf">puts</span> <span class="s2">"Error reached top of thread-pool: </span><span class="si">#{</span><span class="n">e</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">e</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2">)"</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">mutex</span><span class="p">.</span><span class="nf">synchronize</span> <span class="k">do</span>
      <span class="vi">@spawned</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="vi">@workers</span><span class="p">.</span><span class="nf">delete</span> <span class="n">th</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="vi">@workers</span> <span class="o">&lt;&lt;</span> <span class="n">th</span>
  <span class="n">th</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在每一个工作完成之后，也会在一个互斥锁内部使用 <code class="highlighter-rouge">#delete</code> 方法将当前线程从数组中删除，在这里执行的 block 中将客户端对象 <code class="highlighter-rouge">Client</code> 加入了 <code class="highlighter-rouge">Reactor</code> 中等待之后的处理。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vi">@thread_pool</span> <span class="o">=</span> <span class="no">ThreadPool</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@min_threads</span><span class="p">,</span>
                              <span class="vi">@max_threads</span><span class="p">,</span>
                              <span class="no">IOBuffer</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">client</span><span class="p">,</span> <span class="n">buffer</span><span class="o">|</span>
  <span class="k">begin</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">finish</span>
  <span class="k">rescue</span> <span class="no">MiniSSL</span><span class="o">::</span><span class="no">SSLError</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="c1"># ...</span>
  <span class="k">else</span>
    <span class="n">process_client</span> <span class="n">client</span><span class="p">,</span> <span class="n">buffer</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>如过当前任务不需要立即处理，就会向 <code class="highlighter-rouge">Reactor</code> 加入任务等待一段时间，否则就会立即由 <code class="highlighter-rouge">#process_client</code> 方法进行处理，其中调用了 <code class="highlighter-rouge">#handle_request</code> 方法尝试处理当前的网络请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">439</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">process_client</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buffer</span><span class="p">)</span>
  <span class="k">begin</span>
    <span class="k">while</span> <span class="kp">true</span>
      <span class="k">case</span> <span class="n">handle_request</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buffer</span><span class="p">)</span>
      <span class="k">when</span> <span class="kp">false</span>
        <span class="k">return</span>
      <span class="k">when</span> <span class="kp">true</span>
        <span class="k">return</span> <span class="k">unless</span> <span class="vi">@queue_requests</span>
        <span class="n">buffer</span><span class="p">.</span><span class="nf">reset</span>
        <span class="k">unless</span> <span class="n">client</span><span class="p">.</span><span class="nf">reset</span><span class="p">(</span><span class="vi">@status</span> <span class="o">==</span> <span class="ss">:run</span><span class="p">)</span>
          <span class="n">client</span><span class="p">.</span><span class="nf">set_timeout</span> <span class="vi">@persistent_timeout</span>
          <span class="vi">@reactor</span><span class="p">.</span><span class="nf">add</span> <span class="n">client</span>
          <span class="k">return</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="c1"># ...</span>
  <span class="k">ensure</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>用于处理网络请求的方法 <code class="highlighter-rouge">#handle_request</code> 足足有 200 多行，代码中处理非常多的实现细节，在这里实在是不想一行一行代码看过去，也就简单梳理一下这段代码的脉络了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">puma</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">574</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Puma</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">lines</span><span class="p">)</span>
  <span class="n">env</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">env</span>
  <span class="n">client</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">io</span>

  <span class="c1"># ...</span>

  <span class="k">begin</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">res_body</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>

    <span class="n">headers</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">vs</span><span class="o">|</span>
      <span class="c1"># ...</span>
    <span class="k">end</span>

    <span class="n">fast_write</span> <span class="n">client</span><span class="p">,</span> <span class="n">lines</span><span class="p">.</span><span class="nf">to_s</span>
    <span class="n">res_body</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
      <span class="n">fast_write</span> <span class="n">client</span><span class="p">,</span> <span class="n">part</span>
      <span class="n">client</span><span class="p">.</span><span class="nf">flush</span>
    <span class="k">end</span>
  <span class="k">ensure</span>
    <span class="n">body</span><span class="p">.</span><span class="nf">close</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>我们在这里直接将这段代码压缩至 20 行左右，你可以看到与其他的 webserver 完全相同，这里也调用了 Rack 应用的 <code class="highlighter-rouge">#call</code> 方法获得了一个三元组，然后通过 <code class="highlighter-rouge">#fast_write</code> 将请求写回客户端的 Socket 结束这个 HTTP 请求。</p>

<h2 id="并发模型">并发模型</h2>

<p>到目前为止，我们已经对 Puma 是如何处理 HTTP 请求的有一个比较清晰的认识了，对于每一个 HTTP 请求都会由操作系统选择不同的进程来处理，这部分的负载均衡完全是由 OS 层来做的，当请求被分配给某一个进程时，当前进程会根据持有的线程数选择是否对请求进行处理，在这时可能会创建新的 <code class="highlighter-rouge">Thread</code> 对象来处理这个请求，也可能会把当前请求暂时扔到 <code class="highlighter-rouge">Reactor</code> 中进行等待。</p>

<p><img src="https://img.draveness.me/2017-11-10-puma-concurrency-model.png" alt="puma-concurrency-model" /></p>

<p><code class="highlighter-rouge">Reactor</code> 主要是为了提高 Puma 服务的性能存在的产物，它能够让当前的 worker 接受所有请求并将它们以队列的形式传入处理器中；如果当前的系统中存在慢客户端，那么也会占用处理请求的资源，不过由于 Puma 是多进程多线程模型的，所以影响没有那么严重，但是我们也经常会通过反向代理来解决慢客户端的问题。</p>

<h2 id="总结">总结</h2>

<p>相比于多进程单线程的 Unicorn，Puma 提供了更灵活的配置功能，每一个进程的线程数都能在一定范围内进行收缩，目前也是绝大多数的 Ruby 项目使用的 webserver，从不同 webserver 的发展我们其实可以看出混合方式的并发模型虽然实现更加复杂，但是确实能够提供更高的性能和容错。</p>

<p>Puma 项目使用了 Rubocop 来规范项目中的代码风格，相比其他的 webserver 来说确实有更好的阅读体验，只是偶尔出现的长方法会让代码在理解时出现一些问题。</p>


	  ]]></description>
	</item>

	<item>
	  <title>浅谈 Unicorn 的多进程模型</title>
	  <link>/blogs//rack-unicorn</link>
	  <author></author>
	  <pubDate>2017-11-08T00:00:00+00:00</pubDate>
	  <guid>/blogs//rack-unicorn</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>作为 Ruby 社区中老牌的 webserver，在今天也有很多开发者在生产环境使用 Unicorn 处理客户端的发出去的 HTTP 请求，与 WEBrick 和 Thin 不同，Unicorn 使用了完全不同的模型，提供了多进程模型批量处理来自客户端的请求。</p>

<p><img src="https://img.draveness.me/2017-11-08-unicorn.jpeg" alt="unicorn" /></p>

<p>Unicorn 为 Rails 应用提供并发的方式是使用 <code class="highlighter-rouge">fork</code> 创建多个 worker 线程，监听同一个 Socket 上的输入。</p>

<blockquote>
  <p>本文中使用的是 5.3.1 的 Unicorn，如果你使用了不同版本的 Unicorn，原理上的区别不会太大，只是在一些方法的实现上会有一些细微的不同。</p>
</blockquote>

<h2 id="实现原理">实现原理</h2>

<p>Unicorn 虽然也是一个遵循 Rack 协议的 Ruby webserver，但是因为它本身并没有提供 Rack 处理器，所以没有办法直接通过 <code class="highlighter-rouge">rackup -s Unicorn</code> 来启动 Unicorn 的进程。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">unicorn</span> <span class="o">-</span><span class="n">c</span> <span class="n">unicorn</span><span class="p">.</span><span class="nf">rb</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">082116</span> <span class="c1">#33222]  INFO -- : listening on addr=0.0.0.0:8080 fd=10</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">082290</span> <span class="c1">#33222]  INFO -- : worker=0 spawning...</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">083505</span> <span class="c1">#33222]  INFO -- : worker=1 spawning...</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">083989</span> <span class="c1">#33222]  INFO -- : master process ready</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">084610</span> <span class="c1">#33223]  INFO -- : worker=0 spawned pid=33223</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">085100</span> <span class="c1">#33223]  INFO -- : Refreshing Gem list</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">084902</span> <span class="c1">#33224]  INFO -- : worker=1 spawned pid=33224</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">085457</span> <span class="c1">#33224]  INFO -- : Refreshing Gem list</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">123611</span> <span class="c1">#33224]  INFO -- : worker=1 ready</span>
<span class="no">I</span><span class="p">,</span> <span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">06</span><span class="no">T08</span><span class="p">:</span><span class="mo">05</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">123670</span> <span class="c1">#33223]  INFO -- : worker=0 ready</span>
</code></pre></div></div>

<p>在使用 Unicorn 时，我们需要直接使用 <code class="highlighter-rouge">unicorn</code> 命令来启动一个 Unicorn 服务，在使用时可以通过 <code class="highlighter-rouge">-c</code> 传入一个配置文件，文件中的内容其实都是 Ruby 代码，每一个方法调用都是 Unicorn 的一条配置项：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">cat</span> <span class="n">unicorn</span><span class="p">.</span><span class="nf">rb</span>
<span class="n">worker_processes</span> <span class="mi">2</span>
</code></pre></div></div>

<h3 id="可执行文件">可执行文件</h3>

<p><code class="highlighter-rouge">unicorn</code> 这个命令位于 <code class="highlighter-rouge">bin/unicorn</code> 中，在这个可执行文件中，大部分的代码都是对命令行参数的配置和说明，整个文件可以简化为以下的几行代码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rackup_opts</span> <span class="o">=</span> <span class="c1"># ...</span>
<span class="n">app</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="p">.</span><span class="nf">builder</span><span class="p">(</span><span class="no">ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'config.ru'</span><span class="p">,</span> <span class="n">op</span><span class="p">)</span>
<span class="no">Unicorn</span><span class="o">::</span><span class="no">Launcher</span><span class="p">.</span><span class="nf">daemonize!</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="k">if</span> <span class="n">rackup_opts</span><span class="p">[</span><span class="ss">:daemonize</span><span class="p">]</span>
<span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="p">).</span><span class="nf">start</span><span class="p">.</span><span class="nf">join</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">unicorn</code> 命令会从 Rack 应用的标配 config.ru 文件或者传入的文件中加载代码构建一个新的 Rack 应用；初始化 Rack 应用后会使用 <code class="highlighter-rouge">.daemonize!</code> 方法将 unicorn 进程启动在后台运行；最后会创建并启动一个新的 <code class="highlighter-rouge">HttpServer</code> 的实例。</p>

<h3 id="构建应用">构建应用</h3>

<p>读取 config.ru 文件并解析的过程其实就是直接使用了 Rack 的 <code class="highlighter-rouge">Builder</code> 模块，通过 <code class="highlighter-rouge">eval</code> 运行一段代码得到一个 Rack 应用：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">39</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Unicorn&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">builder</span><span class="p">(</span><span class="n">ru</span><span class="p">,</span> <span class="n">op</span><span class="p">)</span>
  <span class="n">raw</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">ru</span><span class="p">)</span>
  <span class="n">inner_app</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">"Rack::Builder.new {(</span><span class="se">\n</span><span class="si">#{</span><span class="n">raw</span><span class="si">}</span><span class="se">\n</span><span class="s2">)}.to_app"</span><span class="p">,</span> <span class="no">TOPLEVEL_BINDING</span><span class="p">,</span> <span class="n">ru</span><span class="p">)</span>

  <span class="n">middleware</span> <span class="o">=</span> <span class="p">{</span>
    <span class="no">ContentLength</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
    <span class="no">Chunked</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
    <span class="no">CommonLogger</span><span class="p">:</span> <span class="p">[</span> <span class="vg">$stderr</span> <span class="p">],</span>
    <span class="no">ShowExceptions</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
    <span class="no">Lint</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
    <span class="no">TempfileReaper</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
    <span class="n">middleware</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
      <span class="n">use</span><span class="p">(</span><span class="no">Rack</span><span class="p">.</span><span class="nf">const_get</span><span class="p">(</span><span class="n">m</span><span class="p">),</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="k">if</span> <span class="no">Rack</span><span class="p">.</span><span class="nf">const_defined?</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">run</span> <span class="n">inner_app</span>
  <span class="k">end</span><span class="p">.</span><span class="nf">to_app</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在该方法中会执行两次 <code class="highlighter-rouge">Rack::Builder.new</code> 方法，第一次会运行 config.ru 中的代码，第二次会添加一些默认的中间件，最终会返回一个接受 <code class="highlighter-rouge">#call</code> 方法返回三元组的 Rack 应用。</p>

<h3 id="守护进程">守护进程</h3>

<p>在默认情况下，Unicorn 的进程都是以前台进程的形式运行的，但是在生产环境我们往往需要在后台运行 Unicorn 进程，这也就是 <code class="highlighter-rouge">Unicorn::Launcher</code> 所做的工作。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">23</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Unicorn::Launcher&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">daemonize!</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
  <span class="n">cfg</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">Configurator</span>
  <span class="vg">$stdin</span><span class="p">.</span><span class="nf">reopen</span><span class="p">(</span><span class="s2">"/dev/null"</span><span class="p">)</span>

  <span class="k">unless</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'UNICORN_FD'</span><span class="p">]</span>
    <span class="n">rd</span><span class="p">,</span> <span class="n">wr</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">pipe</span>
    <span class="n">grandparent</span> <span class="o">=</span> <span class="vg">$$</span>
    <span class="k">if</span> <span class="nb">fork</span>
      <span class="n">wr</span><span class="p">.</span><span class="nf">close</span>
    <span class="k">else</span>
      <span class="n">rd</span><span class="p">.</span><span class="nf">close</span>
      <span class="no">Process</span><span class="p">.</span><span class="nf">setsid</span>
      <span class="nb">exit</span> <span class="k">if</span> <span class="nb">fork</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="n">grandparent</span> <span class="o">==</span> <span class="vg">$$</span>
      <span class="n">master_pid</span> <span class="o">=</span> <span class="p">(</span><span class="n">rd</span><span class="p">.</span><span class="nf">readpartial</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span><span class="p">).</span><span class="nf">to_i</span>
      <span class="k">unless</span> <span class="n">master_pid</span> <span class="o">&gt;</span> <span class="mi">1</span>
        <span class="nb">warn</span> <span class="s2">"master failed to start, check stderr log for details"</span>
        <span class="nb">exit!</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="k">end</span>
      <span class="nb">exit</span> <span class="mi">0</span>
    <span class="k">else</span>
      <span class="n">options</span><span class="p">[</span><span class="ss">:ready_pipe</span><span class="p">]</span> <span class="o">=</span> <span class="n">wr</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="n">cfg</span><span class="o">::</span><span class="no">DEFAULTS</span><span class="p">[</span><span class="ss">:stderr_path</span><span class="p">]</span> <span class="o">||=</span> <span class="s2">"/dev/null"</span>
  <span class="n">cfg</span><span class="o">::</span><span class="no">DEFAULTS</span><span class="p">[</span><span class="ss">:stdout_path</span><span class="p">]</span> <span class="o">||=</span> <span class="s2">"/dev/null"</span>
  <span class="n">cfg</span><span class="o">::</span><span class="no">RACKUP</span><span class="p">[</span><span class="ss">:daemonized</span><span class="p">]</span> <span class="o">=</span> <span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>想要真正理解上述代码的工作，我们需要理解广义上的 daemonize 过程，在 Unix-like 的系统中，一个 <a href="https://en.wikipedia.org/wiki/Daemon_(computing)">daemon</a>（守护进程）是运行在后台不直接被用户操作的进程；一个进程想要变成守护进程通常需要做以下的事情：</p>

<ol>
  <li>执行 <code class="highlighter-rouge">fork</code> 和 <code class="highlighter-rouge">exit</code> 来创建一个后台任务；</li>
  <li>从 tty 的控制中分离、创建一个新的 session 并成为新的 session 和进程组的管理者；</li>
  <li>将根目录 <code class="highlighter-rouge">/</code> 设置为当前进程的工作目录；</li>
  <li>将 umask 更新成 <code class="highlighter-rouge">0</code> 以提供自己的权限管理掩码；</li>
  <li>使用日志文件、控制台或者 <code class="highlighter-rouge">/dev/null</code> 设备作为标准输入、输出和错误；</li>
</ol>

<p>在 <code class="highlighter-rouge">.daemonize!</code> 方法中我们总共使用 fork 创建了两个进程，整个过程涉及三个进程的协作，其中 grandparent 是启动 Unicorn 的进程一般指终端，parent 是用来启动 Unicorn 服务的进程，master 就是 Unicorn 服务中的主进程，三个进程有以下的关系：</p>

<p><img src="https://img.draveness.me/2017-11-08-unicorn-daemonize.png" alt="unicorn-daemonize" /></p>

<p>上述的三个进程中，grandparent 表示用于启动 Unicorn 进程的终端，parent 只是一个用于设置进程状态和掩码的中间进程，它在启动 Unicorn 的 master 进程后就会立刻退出。</p>

<p>在这里，我们会分三个部分分别介绍 grandparent、parent 和 master 究竟做了哪些事情；首先，对于 grandparent 进程来说，我们实际上运行了以下的代码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">daemonize!</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
  <span class="vg">$stdin</span><span class="p">.</span><span class="nf">reopen</span><span class="p">(</span><span class="s2">"/dev/null"</span><span class="p">)</span>
  <span class="n">rd</span><span class="p">,</span> <span class="n">wr</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">pipe</span>
  <span class="n">wr</span><span class="p">.</span><span class="nf">close</span>

  <span class="c1"># fork</span>

  <span class="n">master_pid</span> <span class="o">=</span> <span class="p">(</span><span class="n">rd</span><span class="p">.</span><span class="nf">readpartial</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span><span class="p">).</span><span class="nf">to_i</span>
  <span class="k">unless</span> <span class="n">master_pid</span> <span class="o">&gt;</span> <span class="mi">1</span>
    <span class="nb">warn</span> <span class="s2">"master failed to start, check stderr log for details"</span>
    <span class="nb">exit!</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>通过 <code class="highlighter-rouge">IO.pipe</code> 方法创建了一对 Socket 节点，其中一个用于读，另一个用于写，在这里由于当前进程 grantparent 不需要写，所以直接将写的一端 <code class="highlighter-rouge">#close</code>，保留读的一端等待 Unicorn master 进程发送它的 <code class="highlighter-rouge">pid</code>，如果 master 没有成功启动就会报错，这也是 grandparent 进程的主要作用。</p>

<p>对于 parent 进程来说做的事情其实就更简单了，在 <code class="highlighter-rouge">fork</code> 之后会直接将读的一端执行 <code class="highlighter-rouge">#close</code>，这样无论是当前进程 parent 还是 parent fork 出来的进程都无法通过 <code class="highlighter-rouge">rd</code> 读取数据：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">daemonize!</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
  <span class="vg">$stdin</span><span class="p">.</span><span class="nf">reopen</span><span class="p">(</span><span class="s2">"/dev/null"</span><span class="p">)</span>
  <span class="n">rd</span><span class="p">,</span> <span class="n">wr</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">pipe</span>

  <span class="c1"># fork</span>

  <span class="n">rd</span><span class="p">.</span><span class="nf">close</span>
  <span class="no">Process</span><span class="p">.</span><span class="nf">setsid</span>
  <span class="nb">exit</span> <span class="k">if</span> <span class="nb">fork</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 parent 进程中，我们通过 <code class="highlighter-rouge">Process.setsid</code> 将当前的进程设置为新的 session 和进程组的管理者，从 tty 中分离；最后直接执行 <code class="highlighter-rouge">fork</code> 创建一个新的进程 master 并退出 parent 进程，parent 进程的作用其实就是为了启动新 Unicorn master 进程。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">daemonize!</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
  <span class="n">cfg</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">Configurator</span>
  <span class="vg">$stdin</span><span class="p">.</span><span class="nf">reopen</span><span class="p">(</span><span class="s2">"/dev/null"</span><span class="p">)</span>

  <span class="n">rd</span><span class="p">,</span> <span class="n">wr</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">pipe</span>
  <span class="n">rd</span><span class="p">.</span><span class="nf">close</span>

  <span class="no">Process</span><span class="p">.</span><span class="nf">setsid</span>

  <span class="c1"># fork</span>

  <span class="n">options</span><span class="p">[</span><span class="ss">:ready_pipe</span><span class="p">]</span> <span class="o">=</span> <span class="n">wr</span>
  <span class="n">cfg</span><span class="o">::</span><span class="no">DEFAULTS</span><span class="p">[</span><span class="ss">:stderr_path</span><span class="p">]</span> <span class="o">||=</span> <span class="s2">"/dev/null"</span>
  <span class="n">cfg</span><span class="o">::</span><span class="no">DEFAULTS</span><span class="p">[</span><span class="ss">:stdout_path</span><span class="p">]</span> <span class="o">||=</span> <span class="s2">"/dev/null"</span>
  <span class="n">cfg</span><span class="o">::</span><span class="no">RACKUP</span><span class="p">[</span><span class="ss">:daemonized</span><span class="p">]</span> <span class="o">=</span> <span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>新的进程 Unicorn master 就是一个不关联在任何 tty 的一个后台进程，不过到这里为止也仅仅创建另一个进程，Unicorn 还无法对外提供服务，我们将可读的 Socket <code class="highlighter-rouge">wr</code> 写入 <code class="highlighter-rouge">options</code> 中，在 webserver 成功启动后将通过 <code class="highlighter-rouge">IO.pipe</code> 创建的一对 Socket 将信息回传给 grandparent 进程通知服务启动的结果。</p>

<h3 id="初始化服务">初始化服务</h3>

<p>HTTP 服务在初始化时其实也没有做太多的事情，只是对 Rack 应用进行存储并初始化了一些实例变量：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">69</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
  <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="vi">@request</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpRequest</span><span class="p">.</span><span class="nf">new</span>
  <span class="vi">@reexec_pid</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="vi">@ready_pipe</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:ready_pipe</span><span class="p">)</span>
  <span class="vi">@init_listeners</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="ss">:listeners</span><span class="p">]</span> <span class="p">?</span> <span class="n">options</span><span class="p">[:</span><span class="n">listeners</span><span class="p">].</span><span class="nf">dup</span> <span class="p">:</span> <span class="p">[]</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">config</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">Configurator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">listener_opts</span> <span class="o">=</span> <span class="p">{}</span>

  <span class="vi">@self_pipe</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="vi">@workers</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="vi">@sig_queue</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="vi">@pid</span> <span class="o">=</span> <span class="kp">nil</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">commit!</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="ss">:skip</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:listeners</span><span class="p">,</span> <span class="ss">:pid</span><span class="p">])</span>
  <span class="vi">@orig_app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="vi">@queue_sigs</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:WINCH</span><span class="p">,</span> <span class="ss">:QUIT</span><span class="p">,</span> <span class="ss">:INT</span><span class="p">,</span> <span class="ss">:TERM</span><span class="p">,</span> <span class="ss">:USR1</span><span class="p">,</span> <span class="ss">:USR2</span><span class="p">,</span> <span class="ss">:HUP</span><span class="p">,</span> <span class="ss">:TTIN</span><span class="p">,</span> <span class="ss">:TTOU</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">.daemonize!</code> 方法中存储的 <code class="highlighter-rouge">ready_pipe</code> 在这时被当前的 <code class="highlighter-rouge">HttpServer</code> 对象持有，之后会通过这个管道上传数据。</p>

<h3 id="启动服务">启动服务</h3>

<p><code class="highlighter-rouge">HttpServer</code> 服务的启动一看就是这个 <code class="highlighter-rouge">#start</code> 实例方法控制的，在这个方法中总过做了两件比较重要的事情：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">120</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">start</span>
  <span class="vi">@queue_sigs</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">sig</span><span class="o">|</span> <span class="nb">trap</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@sig_queue</span> <span class="o">&lt;&lt;</span> <span class="n">sig</span><span class="p">;</span> <span class="n">awaken_master</span> <span class="p">}</span> <span class="p">}</span>
  <span class="nb">trap</span><span class="p">(</span><span class="ss">:CHLD</span><span class="p">)</span> <span class="p">{</span> <span class="n">awaken_master</span> <span class="p">}</span>

  <span class="nb">self</span><span class="p">.</span><span class="nf">pid</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="ss">:pid</span><span class="p">]</span>

  <span class="n">spawn_missing_workers</span>
  <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>第一件事情是将构造器中初始化的 <code class="highlighter-rouge">queue_sigs</code> 实例变量中的全部信号，通过 <code class="highlighter-rouge">trap</code> 为信号提供用于响应事件的代码。</p>

<p>第二件事情就是通过 <code class="highlighter-rouge">#spawn_missing_workers</code> 方法 <code class="highlighter-rouge">fork</code> 当前 master 进程创建一系列的 worker 进程：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">531</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">spawn_missing_workers</span>
  <span class="n">worker_nr</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">until</span> <span class="p">(</span><span class="n">worker_nr</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="vi">@worker_processes</span>
    <span class="n">worker</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">Worker</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">worker_nr</span><span class="p">)</span>
    <span class="n">before_fork</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">worker</span><span class="p">)</span>

    <span class="n">pid</span> <span class="o">=</span> <span class="nb">fork</span>

    <span class="k">unless</span> <span class="n">pid</span>
      <span class="n">after_fork_internal</span>
      <span class="n">worker_loop</span><span class="p">(</span><span class="n">worker</span><span class="p">)</span>
      <span class="nb">exit</span>
    <span class="k">end</span>

    <span class="vi">@workers</span><span class="p">[</span><span class="n">pid</span><span class="p">]</span> <span class="o">=</span> <span class="n">worker</span>
    <span class="n">worker</span><span class="p">.</span><span class="nf">atfork_parent</span>
  <span class="k">end</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
  <span class="nb">exit!</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这种调用了 <code class="highlighter-rouge">fork</code> 的方法中，我们还是将其一分为二来看，在这里就是 master 和 worker 进程，对于 master 进程来说：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">531</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">spawn_missing_workers</span>
  <span class="n">worker_nr</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">until</span> <span class="p">(</span><span class="n">worker_nr</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="vi">@worker_processes</span>
    <span class="n">worker</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">Worker</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">worker_nr</span><span class="p">)</span>
    <span class="n">before_fork</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">worker</span><span class="p">)</span>

    <span class="n">pid</span> <span class="o">=</span> <span class="nb">fork</span>
    
    <span class="c1"># ...</span>

    <span class="vi">@workers</span><span class="p">[</span><span class="n">pid</span><span class="p">]</span> <span class="o">=</span> <span class="n">worker</span>
  <span class="k">end</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
  <span class="nb">exit!</span>
<span class="k">end</span>
</code></pre></div></div>

<p>通过一个 until 循环，master 进程能够创建 <code class="highlighter-rouge">worker_processes</code> 个 worker 进程，在每个循环中，上述方法都会创建一个 <code class="highlighter-rouge">Unicorn::Worker</code> 对象并在 <code class="highlighter-rouge">fork</code> 之后，将子进程的 <code class="highlighter-rouge">pid</code> 和 <code class="highlighter-rouge">worker</code> 以键值对的形式存到 <code class="highlighter-rouge">workers</code> 这个实例变量中。</p>

<p><code class="highlighter-rouge">before_fork</code> 中存储的 block 是我们非常熟悉的，其实就是向服务器的日志中追加内容：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">DEFAULTS</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1"># ...</span>
  <span class="ss">:after_fork</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"worker=</span><span class="si">#{</span><span class="n">worker</span><span class="p">.</span><span class="nf">nr</span><span class="si">}</span><span class="s2"> spawned pid=</span><span class="si">#{</span><span class="vg">$$</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="ss">:before_fork</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"worker=</span><span class="si">#{</span><span class="n">worker</span><span class="p">.</span><span class="nf">nr</span><span class="si">}</span><span class="s2"> spawning..."</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="ss">:before_exec</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"forked child re-executing..."</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="ss">:after_worker_exit</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="p">,</span> <span class="n">status</span><span class="o">|</span>
    <span class="n">m</span> <span class="o">=</span> <span class="s2">"reaped </span><span class="si">#{</span><span class="n">status</span><span class="p">.</span><span class="nf">inspect</span><span class="si">}</span><span class="s2"> worker=</span><span class="si">#{</span><span class="n">worker</span><span class="p">.</span><span class="nf">nr</span> <span class="k">rescue</span> <span class="s1">'unknown'</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">if</span> <span class="n">status</span><span class="p">.</span><span class="nf">success?</span>
      <span class="n">server</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="n">server</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="p">},</span>
  <span class="ss">:after_worker_ready</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s2">"worker=</span><span class="si">#{</span><span class="n">worker</span><span class="p">.</span><span class="nf">nr</span><span class="si">}</span><span class="s2"> ready"</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="c1"># ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>所有日志相关的输出大都在 <code class="highlighter-rouge">Unicorn::Configurator</code> 类中作为常量定义起来，并在初始化时作为缺省值赋值到 <code class="highlighter-rouge">HttpServer</code> 相应的实例变量上。而对于真正处理 HTTP 请求的 worker 进程来说，就会进入更加复杂的逻辑了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">spawn_missing_workers</span>
  <span class="n">worker_nr</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">until</span> <span class="p">(</span><span class="n">worker_nr</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="vi">@worker_processes</span>
    <span class="n">worker</span> <span class="o">=</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">Worker</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">worker_nr</span><span class="p">)</span>
    <span class="n">before_fork</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">worker</span><span class="p">)</span>

    <span class="c1"># fork</span>

    <span class="n">after_fork_internal</span>
    <span class="n">worker_loop</span><span class="p">(</span><span class="n">worker</span><span class="p">)</span>
    <span class="nb">exit</span>
  <span class="k">end</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
  <span class="nb">exit!</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里调用了两个实例方法，其中一个是 <code class="highlighter-rouge">#after_fork_internal</code>，另一个是 <code class="highlighter-rouge">#worker_loop</code> 方法，前者用于处理一些 <code class="highlighter-rouge">fork</code> 之后收尾的逻辑，比如关闭仅在 master 进程中使用的 <code class="highlighter-rouge">self_pipe</code>：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">after_fork_internal</span>
  <span class="vi">@self_pipe</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:close</span><span class="p">).</span><span class="nf">clear</span>
  <span class="vi">@ready_pipe</span><span class="p">.</span><span class="nf">close</span> <span class="k">if</span> <span class="vi">@ready_pipe</span>
  <span class="no">Unicorn</span><span class="o">::</span><span class="no">Configurator</span><span class="o">::</span><span class="no">RACKUP</span><span class="p">.</span><span class="nf">clear</span>
  <span class="vi">@ready_pipe</span> <span class="o">=</span> <span class="vi">@init_listeners</span> <span class="o">=</span> <span class="vi">@before_exec</span> <span class="o">=</span> <span class="vi">@before_fork</span> <span class="o">=</span> <span class="kp">nil</span>
<span class="k">end</span>
</code></pre></div></div>

<p>而后者就是 worker 持续监听 Socket 输入并处理请求的循环了。</p>

<h3 id="循环">循环</h3>

<p>当我们开始运行 worker 中的循环时，就开始监听 Socket 上的事件，整个过程还是比较直观的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">681</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">worker_loop</span><span class="p">(</span><span class="n">worker</span><span class="p">)</span>
  <span class="n">ppid</span> <span class="o">=</span> <span class="vi">@master_pid</span>
  <span class="n">readers</span> <span class="o">=</span> <span class="n">init_worker_process</span><span class="p">(</span><span class="n">worker</span><span class="p">)</span>
  <span class="n">ready</span> <span class="o">=</span> <span class="n">readers</span><span class="p">.</span><span class="nf">dup</span>
  <span class="vi">@after_worker_ready</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">worker</span><span class="p">)</span>

  <span class="k">begin</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">ready</span><span class="p">.</span><span class="nf">dup</span>
    <span class="k">while</span> <span class="n">sock</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">.</span><span class="nf">shift</span>
      <span class="k">if</span> <span class="n">client</span> <span class="o">=</span> <span class="n">sock</span><span class="p">.</span><span class="nf">kgio_tryaccept</span>
        <span class="n">process_client</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">unless</span> <span class="n">nr</span> <span class="o">==</span> <span class="mi">0</span>
      <span class="n">tmp</span> <span class="o">=</span> <span class="n">ready</span><span class="p">.</span><span class="nf">dup</span>
      <span class="k">redo</span>
    <span class="k">end</span>

    <span class="n">ppid</span> <span class="o">==</span> <span class="no">Process</span><span class="p">.</span><span class="nf">ppid</span> <span class="n">or</span> <span class="k">return</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="n">readers</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="vi">@timeout</span><span class="p">)</span> <span class="n">and</span> <span class="n">ready</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="c1"># ...</span>
  <span class="k">end</span> <span class="k">while</span> <span class="n">readers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>如果当前 Socket 上有等待处理的 HTTP 请求，就会执行 <code class="highlighter-rouge">#process_client</code> 方法队请求进行处理，在这里调用了 Rack 应用的 <code class="highlighter-rouge">#call</code> 方法得到了三元组：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">605</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">process_client</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>
  <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span> <span class="o">=</span> <span class="vi">@request</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">client</span><span class="p">))</span>

  <span class="k">begin</span>
    <span class="k">return</span> <span class="k">if</span> <span class="vi">@request</span><span class="p">.</span><span class="nf">hijacked?</span>

    <span class="vi">@request</span><span class="p">.</span><span class="nf">headers?</span> <span class="n">or</span> <span class="n">headers</span> <span class="o">=</span> <span class="kp">nil</span>
    <span class="n">http_response_write</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span>
                        <span class="vi">@request</span><span class="p">.</span><span class="nf">response_start_sent</span><span class="p">)</span>
  <span class="k">ensure</span>
    <span class="n">body</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:close</span><span class="p">)</span> <span class="n">and</span> <span class="n">body</span><span class="p">.</span><span class="nf">close</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="n">client</span><span class="p">.</span><span class="nf">closed?</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">shutdown</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">close</span>
  <span class="k">end</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="n">handle_error</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>请求的解析是通过 <code class="highlighter-rouge">Request#read</code> 处理的，而向 Socket 写 HTTP 响应是通过 <code class="highlighter-rouge">#http_response_write</code> 方法来完成的，在这里有关 HTTP 请求的解析和响应的处理都属于一些不重要的实现细节，在这里也就不展开介绍了；当我们已经响应了用户的请求就可以将当前 Socket 直接关掉，断掉这个 TCP 连接了。</p>

<h2 id="调度">调度</h2>

<p>我们在上面已经通过多次 <code class="highlighter-rouge">fork</code> 启动了用于管理 Unicorn worker 进程的 master 以及多个 worker 进程，由于 Unicorn webserver 涉及了多个进程，所以需要进程之间进行调度。</p>

<p>在 Unix 中，进程的调度往往都是通过信号来进行的，<code class="highlighter-rouge">HttpServer#join</code> 就在 Unicorn 的 master 进程上监听外界发送的各种信号，不过在监听信号之前，要通过 <code class="highlighter-rouge">ready_pipe</code> 通知 grandparent 进程当前 master 进程已经启动完毕：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">267</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">join</span>
  <span class="n">respawn</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="n">last_check</span> <span class="o">=</span> <span class="n">time_now</span>

  <span class="n">proc_name</span> <span class="s1">'master'</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">info</span> <span class="s2">"master process ready"</span> <span class="c1"># test_exec.rb relies on this message</span>
  <span class="k">if</span> <span class="vi">@ready_pipe</span>
    <span class="k">begin</span>
      <span class="vi">@ready_pipe</span><span class="p">.</span><span class="nf">syswrite</span><span class="p">(</span><span class="vg">$$</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">warn</span><span class="p">(</span><span class="s2">"grandparent died too soon?: </span><span class="si">#{</span><span class="n">e</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">e</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2">)"</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="vi">@ready_pipe</span> <span class="o">=</span> <span class="vi">@ready_pipe</span><span class="p">.</span><span class="nf">close</span> <span class="k">rescue</span> <span class="kp">nil</span>
  <span class="k">end</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>当 grandparent 进程，也就是执行 Unicorn 命令的进程接收到命令退出之后，就可以继续做其他的操作了，而 master 进程会进入一个 while 循环持续监听外界发送的信号：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">join</span>
  <span class="c1"># ...</span>

  <span class="k">begin</span>
    <span class="n">reap_all_workers</span>
    <span class="k">case</span> <span class="vi">@sig_queue</span><span class="p">.</span><span class="nf">shift</span>
    <span class="c1"># ...</span>
    <span class="k">when</span> <span class="ss">:WINCH</span>
      <span class="n">respawn</span> <span class="o">=</span> <span class="kp">false</span>
      <span class="n">soft_kill_each_worker</span><span class="p">(</span><span class="ss">:QUIT</span><span class="p">)</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">worker_processes</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">when</span> <span class="ss">:TTIN</span>
      <span class="n">respawn</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">worker_processes</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">when</span> <span class="ss">:TTOU</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">worker_processes</span> <span class="o">-=</span> <span class="mi">1</span> <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="nf">worker_processes</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">when</span> <span class="c1"># ...</span>
    <span class="k">end</span>
  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="no">Unicorn</span><span class="p">.</span><span class="nf">log_error</span><span class="p">(</span><span class="vi">@logger</span><span class="p">,</span> <span class="s2">"master loop error"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
  <span class="k">end</span> <span class="k">while</span> <span class="kp">true</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>这一部分的几个信号都会改变当前 Unicorn worker 的进程数，无论是 <code class="highlighter-rouge">TTIN</code>、<code class="highlighter-rouge">TTOU</code> 还是 <code class="highlighter-rouge">WINCH</code> 信号最终都修改了 <code class="highlighter-rouge">worker_processes</code> 变量，其中 <code class="highlighter-rouge">#soft_kill_each_worker</code> 方法向所有的 Unicorn worker 进程发送了 <code class="highlighter-rouge">QUIT</code> 信号。</p>

<p>除了一些用于改变当前 worker 数量的信号，Unicorn 的 master 进程还监听了一些用于终止 master 进程或者更新配置文件的信号。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">join</span>
  <span class="c1"># ...</span>

  <span class="k">begin</span>
    <span class="n">reap_all_workers</span>
    <span class="k">case</span> <span class="vi">@sig_queue</span><span class="p">.</span><span class="nf">shift</span>
    <span class="c1"># ...</span>
    <span class="k">when</span> <span class="ss">:QUIT</span>
      <span class="k">break</span>
    <span class="k">when</span> <span class="ss">:TERM</span><span class="p">,</span> <span class="ss">:INT</span>
      <span class="n">stop</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
      <span class="k">break</span>
    <span class="k">when</span> <span class="ss">:HUP</span>
      <span class="n">respawn</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="k">if</span> <span class="n">config</span><span class="p">.</span><span class="nf">config_file</span>
        <span class="n">load_config!</span>
      <span class="k">else</span> <span class="c1"># exec binary and exit if there's no config file</span>
        <span class="n">reexec</span>
      <span class="k">end</span>
    <span class="k">when</span> <span class="c1"># ...</span>
    <span class="k">end</span>
  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="no">Unicorn</span><span class="p">.</span><span class="nf">log_error</span><span class="p">(</span><span class="vi">@logger</span><span class="p">,</span> <span class="s2">"master loop error"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
  <span class="k">end</span> <span class="k">while</span> <span class="kp">true</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>无论是 <code class="highlighter-rouge">QUIT</code> 信号还是 <code class="highlighter-rouge">TERM</code>、<code class="highlighter-rouge">INT</code> 最终都执行了 <code class="highlighter-rouge">#stop</code> 方法，选择使用不同的信号干掉当前 master 管理的 worker 进程：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">339</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="n">graceful</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">listeners</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">limit</span> <span class="o">=</span> <span class="n">time_now</span> <span class="o">+</span> <span class="n">timeout</span>
  <span class="k">until</span> <span class="vi">@workers</span><span class="p">.</span><span class="nf">empty?</span> <span class="o">||</span> <span class="n">time_now</span> <span class="o">&gt;</span> <span class="n">limit</span>
    <span class="k">if</span> <span class="n">graceful</span>
      <span class="n">soft_kill_each_worker</span><span class="p">(</span><span class="ss">:QUIT</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="n">kill_each_worker</span><span class="p">(</span><span class="ss">:TERM</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
    <span class="n">reap_all_workers</span>
  <span class="k">end</span>
  <span class="n">kill_each_worker</span><span class="p">(</span><span class="ss">:KILL</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法其实非常容易理解，它会根据传入的参数选择强制终止或者正常停止所有的 worker 进程，这样整个 Unicorn 服务才真正停止并不再为外界提供服务了。</p>

<p>当我们向 master 发送 <code class="highlighter-rouge">TTIN</code> 或者 <code class="highlighter-rouge">TTOU</code> 信号时只是改变了实例变量 <code class="highlighter-rouge">worker_process</code> 的值，还并没有 <code class="highlighter-rouge">fork</code> 出新的进程，这些操作都是在 <code class="highlighter-rouge">nil</code> 条件中完成的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">join</span>
  <span class="c1"># ...</span>

  <span class="k">begin</span>
    <span class="n">reap_all_workers</span>
    <span class="k">case</span> <span class="vi">@sig_queue</span><span class="p">.</span><span class="nf">shift</span>
    <span class="k">when</span> <span class="kp">nil</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">last_check</span> <span class="o">+</span> <span class="vi">@timeout</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">last_check</span> <span class="o">=</span> <span class="n">time_now</span><span class="p">)</span>
        <span class="n">sleep_time</span> <span class="o">=</span> <span class="n">murder_lazy_workers</span>
      <span class="k">else</span>
        <span class="n">sleep_time</span> <span class="o">=</span> <span class="vi">@timeout</span><span class="o">/</span><span class="mf">2.0</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="k">end</span>
      <span class="n">maintain_worker_count</span> <span class="k">if</span> <span class="n">respawn</span>
      <span class="n">master_sleep</span><span class="p">(</span><span class="n">sleep_time</span><span class="p">)</span>
    <span class="k">when</span> <span class="c1"># ...</span>
    <span class="k">end</span>
  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="no">Unicorn</span><span class="p">.</span><span class="nf">log_error</span><span class="p">(</span><span class="vi">@logger</span><span class="p">,</span> <span class="s2">"master loop error"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
  <span class="k">end</span> <span class="k">while</span> <span class="kp">true</span>

  <span class="c1"># ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>当 <code class="highlighter-rouge">@sig_queue.shift</code> 返回 <code class="highlighter-rouge">nil</code> 时也就代表当前没有需要处理的信号，如果需要创建新的进程或者停掉进程就会通过 <code class="highlighter-rouge">#maintain_worker_count</code> 方法，之后 master 进程会陷入睡眠直到被再次唤醒。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">561</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">maintain_worker_count</span>
  <span class="p">(</span><span class="n">off</span> <span class="o">=</span> <span class="vi">@workers</span><span class="p">.</span><span class="nf">size</span> <span class="o">-</span> <span class="n">worker_processes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="n">and</span> <span class="k">return</span>
  <span class="n">off</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="n">and</span> <span class="k">return</span> <span class="n">spawn_missing_workers</span>
  <span class="vi">@workers</span><span class="p">.</span><span class="nf">each_value</span> <span class="p">{</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span> <span class="n">w</span><span class="p">.</span><span class="nf">nr</span> <span class="o">&gt;=</span> <span class="n">worker_processes</span> <span class="n">and</span> <span class="n">w</span><span class="p">.</span><span class="nf">soft_kill</span><span class="p">(</span><span class="ss">:QUIT</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>通过创建缺失的进程并关闭多余的进程，我们能够实时的保证整个 Unicorn 服务中的进程数与期望的配置完全相同。</p>

<p>在 Unicorn 的服务中，不仅 master 进程能够接收到来自用户或者其他进程的各种信号，worker 进程也能通过以下的方式将接受到的信号交给 master 处理： </p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">120</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">start</span>
  <span class="c1"># ...</span>
  <span class="vi">@queue_sigs</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">sig</span><span class="o">|</span> <span class="nb">trap</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@sig_queue</span> <span class="o">&lt;&lt;</span> <span class="n">sig</span><span class="p">;</span> <span class="n">awaken_master</span> <span class="p">}</span> <span class="p">}</span>
  <span class="nb">trap</span><span class="p">(</span><span class="ss">:CHLD</span><span class="p">)</span> <span class="p">{</span> <span class="n">awaken_master</span> <span class="p">}</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">unicorn</span><span class="o">/</span><span class="n">http_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">391</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span>

<span class="k">def</span> <span class="nf">awaken_master</span>
  <span class="k">return</span> <span class="k">if</span> <span class="vg">$$</span> <span class="o">!=</span> <span class="vi">@master_pid</span>
  <span class="vi">@self_pipe</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">kgio_trywrite</span><span class="p">(</span><span class="s1">'.'</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>所以即使向 worker 进程发送 <code class="highlighter-rouge">TTIN</code> 或者 <code class="highlighter-rouge">TTOU</code> 等信号也能够改变整个 Unicorn 服务中 worker 进程的个数。</p>

<h2 id="多进程模型">多进程模型</h2>

<p>总的来说，Unicorn 作为 Web 服务使用了多进程的模型，通过一个 master 进程来管理多个 worker 进程，其中 master 进程不负责处理客户端的 HTTP 请求，多个 worker 进程监听同一组 Socket：</p>

<p><img src="https://img.draveness.me/2017-11-08-unicorn-io-model.png" alt="unicorn-io-mode" /></p>

<p>一组 worker 进程在监听 Socket 时，如果发现当前的 Socket 有等待处理的请求时就会在当前的进程中直接通过 <code class="highlighter-rouge">#process_client</code> 方法处理，整个过程会阻塞当前的进程，而多进程阻塞 I/O 的方式没有办法接受慢客户端造成的性能损失，只能通过反向代理 nginx 才可以解决这个问题。</p>

<p><img src="https://img.draveness.me/2017-11-08-unicorn-multi-processes.png" alt="unicorn-multi-processes" /></p>

<p>在 Unicorn 中，worker 之间的负载均衡是由操作系统解决的，所有的 worker 是通过 <code class="highlighter-rouge">.select</code> 方法等待共享 Socket 上的请求，一旦出现可用的 worker，就可以立即进行处理，避开了其他负载均衡算法没有考虑到请求处理时间的问题。</p>

<h2 id="总结">总结</h2>

<p>Unicorn 的源代码其实是作者读过的可读性最差的 Ruby 代码了，很多 Ruby 代码的风格写得跟 C 差不多，看起来也比较头疼，可能是需要处理很多边界条件以及信号，涉及较多底层的进程问题；虽然代码风格上看起来确实让人头疼，不过实现还是值得一看的，重要的代码大都包含在 unicorn.rb 和 http_server.rb 两个文件中，阅读时也不需要改变太多的上下文。</p>

<p>相比于 WEBrick 的单进程多线程的 I/O 模型，Unicorn 的多进程模型有很多优势，一是能够充分利用多核 CPU 的性能，其次能够通过 master 来管理并监控 Unicorn 中包含的一组 worker 并提供了零宕机部署的功能，除此之外，多进程的 I/O 模型还不在乎当前的应用是否是线程安全的，所以不会出现线程竞争等问题，不过 Unicorn 由于 <code class="highlighter-rouge">fork</code> 了大量的 worker 进程，如果长时间的在 Unicorn 上运行内存泄露的应用会非常耗费内存资源，可以考虑使用 <a href="https://github.com/kzk/unicorn-worker-killer">unicorn-worker-killer</a> 来自动重启。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-unicorn-workers-in-a-ruby-on-rails-app">How To Optimize Unicorn Workers in a Ruby on Rails App</a></li>
  <li><a href="https://read01.com/zh-hk/zm5B.html#.Wf0oLduB0sk">Ruby Web 服务器：这十五年</a></li>
  <li><a href="https://github.com/kzk/unicorn-worker-killer">unicorn-worker-killer</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Daemon_(computing)">Daemon (computing)</a></li>
  <li><a href="http://jiangpeng.info/blogs/2014/03/10/nginx-unicorn.html">Nginx 与 Unicorn</a></li>
  <li><a href="https://github.com/blog/517-unicorn">Unicorn!</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>浅谈 Thin 的事件驱动模型</title>
	  <link>/blogs//rack-thin</link>
	  <author></author>
	  <pubDate>2017-11-04T00:00:00+00:00</pubDate>
	  <guid>/blogs//rack-thin</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>在上一篇文章中我们已经介绍了 WEBrick 的实现，它的 handler 是写在 Rack 工程中的，而在这篇文章介绍的 webserver <a href="https://github.com/macournoyer/thin">thin</a> 的 Rack 处理器也是写在 Rack 中的；与 WEBrick 相同，Thin 的实现也非常简单，官方对它的介绍是：</p>

<blockquote>
  <p>A very fast &amp; simple Ruby web server.</p>
</blockquote>

<p>它将 <a href="https://zedshaw.com/archive/ragel-state-charts/">Mongrel</a>、<a href="https://github.com/eventmachine/eventmachine">EventMachine</a> 和 <a href="http://rack.github.io">Rack</a> 三者进行组合，在其中起到胶水的作用，所以在理解 Thin 的实现的过程中我们也需要分析 EventMachine 到底是如何工作的。</p>

<h2 id="thin-的实现">Thin 的实现</h2>

<p>在这一节中我们将从源代码来分析介绍 Thin 的实现原理，因为部分代码仍然是在 Rack 工程中实现的，所以我们要从 Rack 工程的代码开始理解 Thin 的实现。</p>

<h3 id="从-rack-开始">从 Rack 开始</h3>

<p>Thin 的处理器 <code class="highlighter-rouge">Rack::Handler::Thin</code> 与其他遵循 Rack 协议的 webserver 一样都实现了 <code class="highlighter-rouge">.run</code> 方法，接受 Rack 应用和 <code class="highlighter-rouge">options</code> 作为输入：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Rack</span>
  <span class="k">module</span> <span class="nn">Handler</span>
    <span class="k">class</span> <span class="nc">Thin</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
        <span class="n">environment</span>  <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'development'</span>
        <span class="n">default_host</span> <span class="o">=</span> <span class="n">environment</span> <span class="o">==</span> <span class="s1">'development'</span> <span class="p">?</span> <span class="s1">'localhost'</span> <span class="p">:</span> <span class="s1">'0.0.0.0'</span>

        <span class="n">host</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:Host</span><span class="p">)</span> <span class="o">||</span> <span class="n">default_host</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:Port</span><span class="p">)</span> <span class="o">||</span> <span class="mi">8080</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="p">]</span>
        <span class="n">args</span><span class="p">.</span><span class="nf">pop</span> <span class="k">if</span> <span class="o">::</span><span class="no">Thin</span><span class="o">::</span><span class="no">VERSION</span><span class="o">::</span><span class="no">MAJOR</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">::</span><span class="no">Thin</span><span class="o">::</span><span class="no">VERSION</span><span class="o">::</span><span class="no">MINOR</span> <span class="o">&lt;</span> <span class="mi">8</span>
        <span class="n">server</span> <span class="o">=</span> <span class="o">::</span><span class="no">Thin</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">server</span> <span class="k">if</span> <span class="nb">block_given?</span>
        <span class="n">server</span><span class="p">.</span><span class="nf">start</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法仍然会从 <code class="highlighter-rouge">options</code> 中取出 ip 地址和端口号，然后初始化一个 <code class="highlighter-rouge">Thin::Server</code> 的实例后，执行 <code class="highlighter-rouge">#start</code> 方法在 8080 端口上监听来自用户的请求。</p>

<h3 id="初始化服务">初始化服务</h3>

<p>Thin 服务的初始化由以下的代码来处理，首先会处理在 <code class="highlighter-rouge">Rack::Handler::Thin.run</code> 中传入的几个参数 <code class="highlighter-rouge">host</code>、<code class="highlighter-rouge">port</code>、<code class="highlighter-rouge">app</code> 和 <code class="highlighter-rouge">options</code>，将 Rack 应用存储在临时变量中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">100</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="no">DEFAULT_HOST</span><span class="p">,</span> <span class="no">DEFAULT_PORT</span><span class="p">,</span> <span class="p">{}</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
    <span class="k">case</span> <span class="n">arg</span>
    <span class="k">when</span> <span class="mi">0</span><span class="p">.</span><span class="nf">class</span><span class="p">,</span> <span class="sr">/^\d+$/</span> <span class="k">then</span> <span class="n">port</span>    <span class="o">=</span> <span class="n">arg</span><span class="p">.</span><span class="nf">to_i</span>
    <span class="k">when</span> <span class="no">String</span>           <span class="k">then</span> <span class="n">host</span>    <span class="o">=</span> <span class="n">arg</span>
    <span class="k">when</span> <span class="no">Hash</span>             <span class="k">then</span> <span class="n">options</span> <span class="o">=</span> <span class="n">arg</span>
    <span class="k">else</span>
      <span class="vi">@app</span> <span class="o">=</span> <span class="n">arg</span> <span class="k">if</span> <span class="n">arg</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="vi">@backend</span> <span class="o">=</span> <span class="n">select_backend</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
  <span class="vi">@backend</span><span class="p">.</span><span class="nf">server</span> <span class="o">=</span> <span class="nb">self</span>
  <span class="vi">@backend</span><span class="p">.</span><span class="nf">maximum_connections</span>            <span class="o">=</span> <span class="no">DEFAULT_MAXIMUM_CONNECTIONS</span>
  <span class="vi">@backend</span><span class="p">.</span><span class="nf">maximum_persistent_connections</span> <span class="o">=</span> <span class="no">DEFAULT_MAXIMUM_PERSISTENT_CONNECTIONS</span>
  <span class="vi">@backend</span><span class="p">.</span><span class="nf">timeout</span>                        <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="ss">:timeout</span><span class="p">]</span> <span class="o">||</span> <span class="no">DEFAULT_TIMEOUT</span>

  <span class="vi">@app</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">).</span><span class="nf">to_app</span> <span class="k">if</span> <span class="n">block</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在初始化服务的过程中，总共只做了三件事情，处理参数、选择并配置 <code class="highlighter-rouge">backend</code>，创建新的应用：</p>

<p><img src="https://img.draveness.me/2017-11-04-thin-initialize-server.png" alt="thin-initialize-serve" /></p>

<p>处理参数的过程自然不用多说，只是这里判断的方式并不是按照顺序处理的，而是按照参数的类型；在初始化器的最后，如果向初始化器传入了 block，那么就会使用 <code class="highlighter-rouge">Rack::Builder</code> 和 block 中的代码初始化一个新的 Rack 应用。</p>

<h3 id="选择后端">选择后端</h3>

<p>在选择后端时 Thin 使用了 <code class="highlighter-rouge">#select_backend</code> 方法，这里使用 <code class="highlighter-rouge">case</code> 语句替代多个 <code class="highlighter-rouge">if</code>、<code class="highlighter-rouge">else</code>，也是一个我们可以使用的小技巧：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">261</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">select_backend</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
  <span class="k">case</span>
  <span class="k">when</span> <span class="n">options</span><span class="p">.</span><span class="nf">has_key?</span><span class="p">(</span><span class="ss">:backend</span><span class="p">)</span>
    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">":backend must be a class"</span> <span class="k">unless</span> <span class="n">options</span><span class="p">[</span><span class="ss">:backend</span><span class="p">].</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span>
    <span class="n">options</span><span class="p">[</span><span class="ss">:backend</span><span class="p">].</span><span class="nf">new</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
  <span class="k">when</span> <span class="n">options</span><span class="p">.</span><span class="nf">has_key?</span><span class="p">(</span><span class="ss">:swiftiply</span><span class="p">)</span>
    <span class="no">Backends</span><span class="o">::</span><span class="no">SwiftiplyClient</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
  <span class="k">when</span> <span class="n">host</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
    <span class="no">Backends</span><span class="o">::</span><span class="no">UnixServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="no">Backends</span><span class="o">::</span><span class="no">TcpServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在大多数时候，我们只会选择 <code class="highlighter-rouge">UnixServer</code> 和 <code class="highlighter-rouge">TcpServer</code> 两种后端中的一个，而后者又是两者中使用更为频繁的后端：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">backends</span><span class="o">/</span><span class="n">tcp_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">8</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Backends</span><span class="o">::</span><span class="no">TcpServer</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="vi">@host</span> <span class="o">=</span> <span class="n">host</span>
  <span class="vi">@port</span> <span class="o">=</span> <span class="n">port</span>
  <span class="k">super</span><span class="p">()</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">backends</span><span class="o">/</span><span class="n">base</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">47</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Backends</span><span class="o">::</span><span class="no">Base</span>

<span class="k">def</span> <span class="nf">initialize</span>
  <span class="vi">@connections</span>                    <span class="o">=</span> <span class="p">{}</span>
  <span class="vi">@timeout</span>                        <span class="o">=</span> <span class="no">Server</span><span class="o">::</span><span class="no">DEFAULT_TIMEOUT</span>
  <span class="vi">@persistent_connection_count</span>    <span class="o">=</span> <span class="mi">0</span>
  <span class="vi">@maximum_connections</span>            <span class="o">=</span> <span class="no">Server</span><span class="o">::</span><span class="no">DEFAULT_MAXIMUM_CONNECTIONS</span>
  <span class="vi">@maximum_persistent_connections</span> <span class="o">=</span> <span class="no">Server</span><span class="o">::</span><span class="no">DEFAULT_MAXIMUM_PERSISTENT_CONNECTIONS</span>
  <span class="vi">@no_epoll</span>                       <span class="o">=</span> <span class="kp">false</span>
  <span class="vi">@ssl</span>                            <span class="o">=</span> <span class="kp">nil</span>
  <span class="vi">@threaded</span>                       <span class="o">=</span> <span class="kp">nil</span>
  <span class="vi">@started_reactor</span>                <span class="o">=</span> <span class="kp">false</span>
<span class="k">end</span>
</code></pre></div></div>

<p>初始化的过程中只是对属性设置默认值，比如 <code class="highlighter-rouge">host</code>、<code class="highlighter-rouge">port</code> 以及超时时间等等，并没有太多值得注意的代码。</p>

<h3 id="启动服务">启动服务</h3>

<p>在启动服务时会直接调用 <code class="highlighter-rouge">TcpServer#start</code> 方法并在其中传入一个用于处理信号的 block：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">152</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">start</span>
  <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s1">'app required'</span> <span class="k">unless</span> <span class="vi">@app</span>
  
  <span class="n">log_info</span>  <span class="s2">"Thin web server (v</span><span class="si">#{</span><span class="no">VERSION</span><span class="o">::</span><span class="no">STRING</span><span class="si">}</span><span class="s2"> codename </span><span class="si">#{</span><span class="no">VERSION</span><span class="o">::</span><span class="no">CODENAME</span><span class="si">}</span><span class="s2">)"</span>
  <span class="n">log_debug</span> <span class="s2">"Debugging ON"</span>
  <span class="n">trace</span>     <span class="s2">"Tracing ON"</span>
  
  <span class="n">log_info</span> <span class="s2">"Maximum connections set to </span><span class="si">#{</span><span class="vi">@backend</span><span class="p">.</span><span class="nf">maximum_connections</span><span class="si">}</span><span class="s2">"</span>
  <span class="n">log_info</span> <span class="s2">"Listening on </span><span class="si">#{</span><span class="vi">@backend</span><span class="si">}</span><span class="s2">, CTRL+C to stop"</span>

  <span class="vi">@backend</span><span class="p">.</span><span class="nf">start</span> <span class="p">{</span> <span class="n">setup_signals</span> <span class="k">if</span> <span class="vi">@setup_signals</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>虽然这里的 <code class="highlighter-rouge">backend</code> 其实已经被选择成了 <code class="highlighter-rouge">TcpServer</code>，但是该子类并没有覆写 <code class="highlighter-rouge">#start</code> 方法，这里执行的方法其实是从父类继承的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">backends</span><span class="o">/</span><span class="n">base</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">60</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Backends</span><span class="o">::</span><span class="no">Base</span>

<span class="k">def</span> <span class="nf">start</span>
  <span class="vi">@stopping</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="n">starter</span>   <span class="o">=</span> <span class="nb">proc</span> <span class="k">do</span>
    <span class="n">connect</span>
    <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
    <span class="vi">@running</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>
  
  <span class="c1"># Allow for early run up of eventmachine.</span>
  <span class="k">if</span> <span class="no">EventMachine</span><span class="p">.</span><span class="nf">reactor_running?</span>
    <span class="n">starter</span><span class="p">.</span><span class="nf">call</span>
  <span class="k">else</span>
    <span class="vi">@started_reactor</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="no">EventMachine</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="n">starter</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法在构建一个 <code class="highlighter-rouge">starter</code> block 之后，将该 block 传入 <code class="highlighter-rouge">EventMachine.run</code> 方法，随后执行的 <code class="highlighter-rouge">#connect</code> 会启动一个 <code class="highlighter-rouge">EventMachine</code> 的服务器用于处理用户的网络请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">backends</span><span class="o">/</span><span class="n">tcp_server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">15</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Backends</span><span class="o">::</span><span class="no">TcpServer</span>

<span class="k">def</span> <span class="nf">connect</span>
  <span class="vi">@signature</span> <span class="o">=</span> <span class="no">EventMachine</span><span class="p">.</span><span class="nf">start_server</span><span class="p">(</span><span class="vi">@host</span><span class="p">,</span> <span class="vi">@port</span><span class="p">,</span> <span class="no">Connection</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:initialize_connection</span><span class="p">))</span>
  <span class="n">binary_name</span> <span class="o">=</span> <span class="no">EventMachine</span><span class="p">.</span><span class="nf">get_sockname</span><span class="p">(</span> <span class="vi">@signature</span> <span class="p">)</span>
  <span class="n">port_name</span> <span class="o">=</span> <span class="no">Socket</span><span class="p">.</span><span class="nf">unpack_sockaddr_in</span><span class="p">(</span> <span class="n">binary_name</span> <span class="p">)</span>
  <span class="vi">@port</span> <span class="o">=</span> <span class="n">port_name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="vi">@host</span> <span class="o">=</span> <span class="n">port_name</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="vi">@signature</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 EventMachine 的文档中，<code class="highlighter-rouge">.start_server</code> 方法被描述成一个在指定的地址和端口上初始化 TCP 服务的方法，正如这里所展示的，它经常在 <code class="highlighter-rouge">.run</code> 方法的 block 中执行；该方法的参数 <code class="highlighter-rouge">Connection</code> 作为处理 TCP 请求的类，会实现不同的方法接受各种各样的回调，传入的 <code class="highlighter-rouge">initialize_connection</code> block 会在有请求需要处理时对 <code class="highlighter-rouge">Connection</code> 对象进行初始化：</p>

<blockquote>
  <p><code class="highlighter-rouge">Connection</code> 对象继承自 <code class="highlighter-rouge">EventMachine::Connection</code>，是 EventMachine 与外界的接口，在 EventMachine 中的大部分事件都会调用 <code class="highlighter-rouge">Connection</code> 的一个实例方法来传递数据和参数。</p>
</blockquote>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">backends</span><span class="o">/</span><span class="n">base</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">145</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Backends</span><span class="o">::</span><span class="no">Base</span>

<span class="k">def</span> <span class="nf">initialize_connection</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span>
  <span class="n">connection</span><span class="p">.</span><span class="nf">backend</span>                 <span class="o">=</span> <span class="nb">self</span>
  <span class="n">connection</span><span class="p">.</span><span class="nf">app</span>                     <span class="o">=</span> <span class="vi">@server</span><span class="p">.</span><span class="nf">app</span>
  <span class="n">connection</span><span class="p">.</span><span class="nf">comm_inactivity_timeout</span> <span class="o">=</span> <span class="vi">@timeout</span>
  <span class="n">connection</span><span class="p">.</span><span class="nf">threaded</span>                <span class="o">=</span> <span class="vi">@threaded</span>
  <span class="n">connection</span><span class="p">.</span><span class="nf">start_tls</span><span class="p">(</span><span class="vi">@ssl_options</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@ssl</span>

  <span class="k">if</span> <span class="vi">@persistent_connection_count</span> <span class="o">&lt;</span> <span class="vi">@maximum_persistent_connections</span>
    <span class="n">connection</span><span class="p">.</span><span class="nf">can_persist!</span>
    <span class="vi">@persistent_connection_count</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">end</span>
  <span class="vi">@connections</span><span class="p">[</span><span class="n">connection</span><span class="p">.</span><span class="nf">__id__</span><span class="p">]</span> <span class="o">=</span> <span class="n">connection</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="处理请求的连接">处理请求的连接</h3>

<p><code class="highlighter-rouge">Connection</code> 类中有很多的方法 <code class="highlighter-rouge">#post_init</code>、<code class="highlighter-rouge">#receive_data</code> 方法等等都是由 EventMachine 在接收到请求时调用的，当 Thin 的服务接收到来自客户端的数据时就会调用 <code class="highlighter-rouge">#receive_data</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">connection</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">36</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Connection</span>

<span class="k">def</span> <span class="nf">receive_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="vi">@idle</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="n">trace</span> <span class="n">data</span>
  <span class="n">process</span> <span class="k">if</span> <span class="vi">@request</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="k">rescue</span> <span class="no">InvalidRequest</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="n">log_error</span><span class="p">(</span><span class="s2">"Invalid request"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
  <span class="n">post_process</span> <span class="no">Response</span><span class="o">::</span><span class="no">BAD_REQUEST</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里我们看到了与 WEBrick 在处理来自客户端的原始数据时使用的方法 <code class="highlighter-rouge">#parse</code>，它会解析客户端请求的原始数据并执行 <code class="highlighter-rouge">#process</code> 来处理 HTTP 请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">connection</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">47</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Connection</span>

<span class="k">def</span> <span class="nf">process</span>
  <span class="k">if</span> <span class="n">threaded?</span>
    <span class="vi">@request</span><span class="p">.</span><span class="nf">threaded</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="no">EventMachine</span><span class="p">.</span><span class="nf">defer</span> <span class="p">{</span> <span class="n">post_process</span><span class="p">(</span><span class="n">pre_process</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">else</span>
    <span class="vi">@request</span><span class="p">.</span><span class="nf">threaded</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="n">post_process</span><span class="p">(</span><span class="n">pre_process</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>如果当前的连接允许并行处理多个用户的请求，那么就会在 <code class="highlighter-rouge">EventMachine.defer</code> 的 block 中执行两个方法 <code class="highlighter-rouge">#pre_process</code> 和 <code class="highlighter-rouge">#post_process</code>：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">connection</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">63</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Connection</span>

<span class="k">def</span> <span class="nf">pre_process</span>
  <span class="vi">@request</span><span class="p">.</span><span class="nf">remote_address</span> <span class="o">=</span> <span class="n">remote_address</span>
  <span class="vi">@request</span><span class="p">.</span><span class="nf">async_callback</span> <span class="o">=</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:post_process</span><span class="p">)</span>

  <span class="n">response</span> <span class="o">=</span> <span class="no">AsyncResponse</span>
  <span class="kp">catch</span><span class="p">(</span><span class="ss">:async</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">response</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="vi">@request</span><span class="p">.</span><span class="nf">env</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">response</span>
<span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="n">unexpected_error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
  <span class="n">can_persist?</span> <span class="o">&amp;&amp;</span> <span class="vi">@request</span><span class="p">.</span><span class="nf">persistent?</span> <span class="p">?</span> <span class="no">Response</span><span class="o">::</span><span class="no">PERSISTENT_ERROR</span> <span class="p">:</span> <span class="no">Response</span><span class="o">::</span><span class="no">ERROR</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">#pre_process</code> 中没有做太多的事情，只是调用了 Rack 应用的 <code class="highlighter-rouge">#call</code> 方法，得到一个三元组 <code class="highlighter-rouge">response</code>，在这之后将这个数组传入 <code class="highlighter-rouge">#post_process</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">thin</span><span class="o">/</span><span class="n">connection</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">95</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Thin</span><span class="o">::</span><span class="no">Connection</span>

<span class="k">def</span> <span class="nf">post_process</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="k">return</span> <span class="k">unless</span> <span class="n">result</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="nf">to_a</span>
  <span class="k">return</span> <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">first</span> <span class="o">==</span> <span class="no">AsyncResponse</span><span class="p">.</span><span class="nf">first</span>

  <span class="vi">@response</span><span class="p">.</span><span class="nf">status</span><span class="p">,</span> <span class="vi">@response</span><span class="p">.</span><span class="nf">headers</span><span class="p">,</span> <span class="vi">@response</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="o">*</span><span class="n">result</span>
  <span class="vi">@response</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
    <span class="n">send_data</span> <span class="n">chunk</span>
  <span class="k">end</span>
<span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="n">unexpected_error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
  <span class="n">close_connection</span>
<span class="k">ensure</span>
  <span class="k">if</span> <span class="vi">@response</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:callback</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vi">@response</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:errback</span><span class="p">)</span>
    <span class="vi">@response</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">callback</span> <span class="p">{</span> <span class="n">terminate_request</span> <span class="p">}</span>
    <span class="vi">@response</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">errback</span>  <span class="p">{</span> <span class="n">terminate_request</span> <span class="p">}</span>
  <span class="k">else</span>
    <span class="n">terminate_request</span> <span class="k">unless</span> <span class="n">result</span> <span class="o">&amp;&amp;</span> <span class="n">result</span><span class="p">.</span><span class="nf">first</span> <span class="o">==</span> <span class="no">AsyncResponse</span><span class="p">.</span><span class="nf">first</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">#post_response</code> 方法将传入的数组赋值给 <code class="highlighter-rouge">response</code> 的 <code class="highlighter-rouge">status</code>、<code class="highlighter-rouge">headers</code> 和 <code class="highlighter-rouge">body</code> 这三部分，在这之后通过 <code class="highlighter-rouge">#send_data</code> 方法将 HTTP 响应以块的形式写回 Socket；写回结束后可能会调用对应的 <code class="highlighter-rouge">callback</code> 并关闭持有的 <code class="highlighter-rouge">request</code> 和 <code class="highlighter-rouge">response</code> 两个实例变量。</p>

<blockquote>
  <p>上述方法中调用的 <code class="highlighter-rouge">#send_data</code> 继承自 <code class="highlighter-rouge">EventMachine::Connection</code> 类。</p>
</blockquote>

<h3 id="小结">小结</h3>

<p>到此为止，我们对于 Thin 是如何处理来自用户的 HTTP 请求的就比较清楚了，我们可以看到 Thin 本身并没有做一些类似解析 HTTP 数据包以及发送数据的问题，它使用了来自 Rack 和 EventMachine 两个开源框架中很多已有的代码逻辑，确实只做了一些胶水的事情。</p>

<p>对于 Rack 是如何工作的我们在前面的文章 <a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a> 中已经介绍过了；虽然我们看到了很多与 EventMachine 相关的代码，但是到这里我们仍然对 EventMachine 不是太了解。</p>

<h2 id="eventmachine-和-reactor-模式">EventMachine 和 Reactor 模式</h2>

<p>为了更好地理解 Thin 的工作原理，在这里我们会介绍一个 EventMachine 和 Reactor 模式。</p>

<p>EventMachine 其实是一个使用 Ruby 实现的事件驱动的并行框架，它使用 Reactor 模式提供了事件驱动的 IO 模型，如果你对 Node.js 有所了解的话，那么你一定对事件驱动这个词并不陌生，EventMachine 的出现主要是为了解决两个核心问题：</p>

<ul>
  <li>为生产环境提供更高的可伸缩性、更好的性能和稳定性；</li>
  <li>为上层提供了一些能够减少高性能的网络编程复杂性的 API；</li>
</ul>

<p>其实 EventMachine 的主要作用就是将所有同步的 IO 都变成异步的，调度都通过事件来进行，这样用于监听用户请求的进程不会被其他代码阻塞，能够同时为更多的客户端提供服务；在这一节中，我们需要了解一下在 Thin 中使用的 EventMachine 中几个常用方法的实现。</p>

<h3 id="启动事件循环">启动事件循环</h3>

<p>EventMachine 其实就是一个事件循环（Event Loop），当我们想使用 EventMachine 来处理某些任务时就一定需要调用 <code class="highlighter-rouge">.run</code> 方法启动这个事件循环来接受外界触发的各种事件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">eventmachine</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">149</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span> <span class="n">blk</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">tail</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="c1"># ...</span>
  <span class="k">begin</span>
    <span class="vi">@reactor_pid</span> <span class="o">=</span> <span class="no">Process</span><span class="p">.</span><span class="nf">pid</span>
    <span class="vi">@reactor_running</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="n">initialize_event_machine</span>
    <span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="n">blk</span> <span class="o">||</span> <span class="n">block</span><span class="p">)</span> <span class="n">and</span> <span class="n">add_timer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@next_tick_queue</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vi">@next_tick_queue</span><span class="p">.</span><span class="nf">empty?</span>
      <span class="n">add_timer</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">signal_loopbreak</span> <span class="p">}</span>
    <span class="k">end</span>
    <span class="vi">@reactor_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="p">.</span><span class="nf">current</span>

    <span class="n">run_machine</span>
  <span class="k">ensure</span>
    <span class="k">until</span> <span class="vi">@tails</span><span class="p">.</span><span class="nf">empty?</span>
      <span class="vi">@tails</span><span class="p">.</span><span class="nf">pop</span><span class="p">.</span><span class="nf">call</span>
    <span class="k">end</span>

    <span class="n">release_machine</span>
    <span class="n">cleanup_machine</span>
    <span class="vi">@reactor_running</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="vi">@reactor_thread</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里我们会使用 <code class="highlighter-rouge">.initialize_event_machine</code> 初始化当前的事件循环，其实也就是一个全局的 <code class="highlighter-rouge">Reactor</code> 的单例，最终会执行 <code class="highlighter-rouge">Reactor#initialize_for_run</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">522</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Reactor</span>

<span class="k">def</span> <span class="nf">initialize_for_run</span>
  <span class="vi">@running</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="vi">@stop_scheduled</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="vi">@selectables</span> <span class="o">||=</span> <span class="p">{};</span> <span class="vi">@selectables</span><span class="p">.</span><span class="nf">clear</span>
  <span class="vi">@timers</span> <span class="o">=</span> <span class="no">SortedSet</span><span class="p">.</span><span class="nf">new</span> <span class="c1"># []</span>
  <span class="n">set_timer_quantum</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
  <span class="vi">@current_loop_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>
  <span class="vi">@next_heartbeat</span> <span class="o">=</span> <span class="vi">@current_loop_time</span> <span class="o">+</span> <span class="no">HeartbeatInterval</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在启动事件循环的过程中，它还会将传入的 block 与一个 <code class="highlighter-rouge">interval</code> 为 0 的键组成键值对存到 <code class="highlighter-rouge">@timers</code> 字典中，所有加入的键值对都会在大约 <code class="highlighter-rouge">interval</code> 的时间过后执行一次 block。</p>

<p>随后执行的 <code class="highlighter-rouge">#run_machine</code> 在最后也会执行 <code class="highlighter-rouge">Reactor</code> 的 <code class="highlighter-rouge">#run</code> 方法，该方法中包含一个 loop 语句，也就是我们一直说的事件循环：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">540</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Reactor</span>

<span class="k">def</span> <span class="nf">run</span>
  <span class="k">raise</span> <span class="no">Error</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span> <span class="s2">"already running"</span> <span class="p">)</span> <span class="k">if</span> <span class="vi">@running</span>
  <span class="vi">@running</span> <span class="o">=</span> <span class="kp">true</span>

  <span class="k">begin</span>
    <span class="n">open_loopbreaker</span>

    <span class="kp">loop</span> <span class="p">{</span>
      <span class="vi">@current_loop_time</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span>

      <span class="k">break</span> <span class="k">if</span> <span class="vi">@stop_scheduled</span>
      <span class="n">run_timers</span>
      <span class="k">break</span> <span class="k">if</span> <span class="vi">@stop_scheduled</span>
      <span class="n">crank_selectables</span>
      <span class="k">break</span> <span class="k">if</span> <span class="vi">@stop_scheduled</span>
      <span class="n">run_heartbeats</span>
    <span class="p">}</span>
  <span class="k">ensure</span>
    <span class="n">close_loopbreaker</span>
    <span class="vi">@selectables</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">io</span><span class="o">|</span> <span class="n">io</span><span class="p">.</span><span class="nf">close</span><span class="p">}</span>
    <span class="vi">@selectables</span><span class="p">.</span><span class="nf">clear</span>

    <span class="vi">@running</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在启动事件循环之间会在 <code class="highlighter-rouge">#open_loopbreaker</code> 中创建一个 <code class="highlighter-rouge">LoopbreakReader</code> 的实例绑定在 <code class="highlighter-rouge">127.0.0.1</code> 和随机的端口号组成的地址上，然后开始运行事件循环。</p>

<p><img src="https://img.draveness.me/2017-11-04-reactor-eventloop.png" alt="reactor-eventloop" /></p>

<p>在事件循环中，Reactor 总共需要执行三部分的任务，分别是执行定时器、处理 Socket 上的事件以及运行心跳方法。</p>

<p>无论是运行定时器还是执行心跳方法其实都非常简单，只要与当前时间进行比较，如果到了触发的时间就调用正确的方法或者回调，最后的 <code class="highlighter-rouge">#crank_selectables</code> 方法就是用于处理 Socket 上读写事件的方法了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">540</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Reactor</span>

<span class="k">def</span> <span class="nf">crank_selectables</span>
  <span class="n">readers</span> <span class="o">=</span> <span class="vi">@selectables</span><span class="p">.</span><span class="nf">values</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span> <span class="n">io</span><span class="p">.</span><span class="nf">select_for_reading?</span> <span class="p">}</span>
  <span class="n">writers</span> <span class="o">=</span> <span class="vi">@selectables</span><span class="p">.</span><span class="nf">values</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span> <span class="n">io</span><span class="p">.</span><span class="nf">select_for_writing?</span> <span class="p">}</span>

  <span class="n">s</span> <span class="o">=</span> <span class="nb">select</span><span class="p">(</span><span class="n">readers</span><span class="p">,</span> <span class="n">writers</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="vi">@timer_quantum</span><span class="p">)</span>

  <span class="n">s</span> <span class="n">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span> <span class="n">w</span><span class="p">.</span><span class="nf">eventable_write</span> <span class="p">}</span>
  <span class="n">s</span> <span class="n">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="n">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="p">.</span><span class="nf">eventable_read</span> <span class="p">}</span>

  <span class="vi">@selectables</span><span class="p">.</span><span class="nf">delete_if</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">io</span><span class="o">|</span>
    <span class="k">if</span> <span class="n">io</span><span class="p">.</span><span class="nf">close_scheduled?</span>
      <span class="n">io</span><span class="p">.</span><span class="nf">close</span>
      <span class="k">begin</span>
        <span class="no">EventMachine</span><span class="o">::</span><span class="n">event_callback</span> <span class="n">io</span><span class="p">.</span><span class="nf">uuid</span><span class="p">,</span> <span class="no">ConnectionUnbound</span><span class="p">,</span> <span class="kp">nil</span>
      <span class="k">rescue</span> <span class="no">ConnectionNotBound</span><span class="p">;</span> <span class="k">end</span>
      <span class="kp">true</span>
    <span class="k">end</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法会在 Socket 变成可读或者可写时执行 <code class="highlighter-rouge">#eventable_write</code> 或 <code class="highlighter-rouge">#eventable_read</code> 执行事件的回调，我们暂时放下这两个方法，先来了解一下 EventMachine 是如何启动服务的。</p>

<h3 id="启动服务-1">启动服务</h3>

<p>在启动服务的过程中，最重要的目的就是创建一个 Socket 并绑定在指定的 ip 和端口上，在实现这个目的的过程中，我们使用了以下的几个方法，首先是 <code class="highlighter-rouge">EventMachine.start_server</code>：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">eventmachine</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">516</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">start_server</span> <span class="n">server</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">handler</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="n">port</span> <span class="o">=</span> <span class="no">Integer</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
  <span class="n">klass</span> <span class="o">=</span> <span class="n">klass_from_handler</span><span class="p">(</span><span class="no">Connection</span><span class="p">,</span> <span class="n">handler</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>

  <span class="n">s</span> <span class="o">=</span> <span class="k">if</span> <span class="n">port</span>
        <span class="n">start_tcp_server</span> <span class="n">server</span><span class="p">,</span> <span class="n">port</span>
      <span class="k">else</span>
        <span class="n">start_unix_server</span> <span class="n">server</span>
      <span class="k">end</span>
  <span class="vi">@acceptors</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">klass</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">block</span><span class="p">]</span>
  <span class="n">s</span>
<span class="k">end</span>
</code></pre></div></div>

<p>该方法其实使我们在使用 EventMachine 时常见的接口，只要我们想要启动一个新的 TCP 或者 UNIX 服务器，就可以上述方法，在这里会根据端口号是否存在，选择执行 <code class="highlighter-rouge">.start_tcp_server</code> 或者 <code class="highlighter-rouge">.start_unix_server</code> 创建一个新的 Socket 并存储在 <code class="highlighter-rouge">@acceptors</code> 中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">184</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">start_tcp_server</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span>
  <span class="p">(</span><span class="n">s</span> <span class="o">=</span> <span class="no">EvmaTCPServer</span><span class="p">.</span><span class="nf">start_server</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span> <span class="n">or</span> <span class="k">raise</span> <span class="s2">"no acceptor"</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">uuid</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">EventMachine.start_tcp_server</code> 在这里也只做了个『转发』方法的作用的，直接调用 <code class="highlighter-rouge">EvmaTCPServer.start_server</code> 创建一个新的 Socket 对象并绑定到传入的 <code class="highlighter-rouge">&lt;host, port&gt;</code> 上：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1108</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine::EvmaTCPServer&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">start_server</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span>
  <span class="n">sd</span> <span class="o">=</span> <span class="no">Socket</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span> <span class="no">Socket</span><span class="o">::</span><span class="no">AF_LOCAL</span><span class="p">,</span> <span class="no">Socket</span><span class="o">::</span><span class="no">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="n">sd</span><span class="p">.</span><span class="nf">setsockopt</span><span class="p">(</span> <span class="no">Socket</span><span class="o">::</span><span class="no">SOL_SOCKET</span><span class="p">,</span> <span class="no">Socket</span><span class="o">::</span><span class="no">SO_REUSEADDR</span><span class="p">,</span> <span class="kp">true</span> <span class="p">)</span>
  <span class="n">sd</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span> <span class="no">Socket</span><span class="p">.</span><span class="nf">pack_sockaddr_in</span><span class="p">(</span> <span class="n">port</span><span class="p">,</span> <span class="n">host</span> <span class="p">))</span>
  <span class="n">sd</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span> <span class="mi">50</span> <span class="p">)</span> <span class="c1"># 5 is what you see in all the books. Ain't enough.</span>
  <span class="no">EvmaTCPServer</span><span class="p">.</span><span class="nf">new</span> <span class="n">sd</span>
<span class="k">end</span>
</code></pre></div></div>

<p>方法的最后会创建一个新的 <code class="highlighter-rouge">EvmaTCPServer</code> 实例的过程中，我们需要通过 <code class="highlighter-rouge">#fcntl</code> 将 Socket 变成非阻塞式的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">687</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Selectable</span>

<span class="k">def</span> <span class="nf">initialize</span> <span class="n">io</span>
  <span class="vi">@io</span> <span class="o">=</span> <span class="n">io</span>
  <span class="vi">@uuid</span> <span class="o">=</span> <span class="no">UuidGenerator</span><span class="p">.</span><span class="nf">generate</span>
  <span class="vi">@is_server</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="vi">@last_activity</span> <span class="o">=</span> <span class="no">Reactor</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">current_loop_time</span>

  <span class="n">m</span> <span class="o">=</span> <span class="vi">@io</span><span class="p">.</span><span class="nf">fcntl</span><span class="p">(</span><span class="no">Fcntl</span><span class="o">::</span><span class="no">F_GETFL</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
  <span class="vi">@io</span><span class="p">.</span><span class="nf">fcntl</span><span class="p">(</span><span class="no">Fcntl</span><span class="o">::</span><span class="no">F_SETFL</span><span class="p">,</span> <span class="no">Fcntl</span><span class="o">::</span><span class="no">O_NONBLOCK</span> <span class="o">|</span> <span class="n">m</span><span class="p">)</span>

  <span class="vi">@close_scheduled</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="vi">@close_requested</span> <span class="o">=</span> <span class="kp">false</span>

  <span class="n">se</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span> <span class="vi">@io</span><span class="p">.</span><span class="nf">instance_eval</span> <span class="p">{</span> <span class="vi">@my_selectable</span> <span class="o">=</span> <span class="n">se</span> <span class="p">}</span>
  <span class="no">Reactor</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">add_selectable</span> <span class="vi">@io</span>
<span class="k">end</span>
</code></pre></div></div>

<p>不只是 <code class="highlighter-rouge">EvmaTCPServer</code>，所有的 <code class="highlighter-rouge">Selectable</code> 子类在初始化的最后都会将新的 Socket 以 <code class="highlighter-rouge">uuid</code> 为键存储到 <code class="highlighter-rouge">Reactor</code> 单例对象的 <code class="highlighter-rouge">@selectables</code> 字典中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">532</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Reactor</span>

<span class="k">def</span> <span class="nf">add_selectable</span> <span class="n">io</span>
  <span class="vi">@selectables</span><span class="p">[</span><span class="n">io</span><span class="p">.</span><span class="nf">uuid</span><span class="p">]</span> <span class="o">=</span> <span class="n">io</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在整个事件循环的大循环中，这里存入的所有 Socket 都会被 <code class="highlighter-rouge">#select</code> 方法监听，在响应的事件发生时交给合适的回调处理，作者在 <a href="https://draveness.me/redis-eventloop">Redis 中的事件循环</a> 一文中也介绍过非常相似的处理过程。</p>

<p><img src="https://img.draveness.me/2017-11-04-eventmachine-select.png" alt="eventmachine-select" /></p>

<p>所有的 Socket 都会存储在一个 <code class="highlighter-rouge">@selectables</code> 的哈希中并由 <code class="highlighter-rouge">#select</code> 方法监听所有的读写事件，一旦相应的事件触发就会通过 <code class="highlighter-rouge">eventable_read</code> 或者 <code class="highlighter-rouge">eventable_write</code> 方法来响应该事件。</p>

<h3 id="处理读写事件">处理读写事件</h3>

<p>所有的读写事件都是通过 <code class="highlighter-rouge">Selectable</code> 和它的子类来处理的，在 EventMachine 中，总共有以下的几种子类：</p>

<p><img src="https://img.draveness.me/2017-11-04-selectable-and-subclasses.png" alt="selectable-and-subclasses" /></p>

<p>所有处理服务端读写事件的都是 <code class="highlighter-rouge">Selectable</code> 的子类，也就是 <code class="highlighter-rouge">EvmaTCPServer</code> 和 <code class="highlighter-rouge">EvmaUNIXServer</code>，而所有处理客户端读写事件的都是 <code class="highlighter-rouge">StreamObject</code> 的子类 <code class="highlighter-rouge">EvmaTCPServer</code> 和 <code class="highlighter-rouge">EvmaUNIXClient</code>。</p>

<p>当我们初始化的绑定在 <code class="highlighter-rouge">&lt;host, port&gt;</code> 上的 Socket 对象监听到了来自用户的 TCP 请求时，当前的 Socket 就会变得可读，事件循环中的 <code class="highlighter-rouge">#select</code> 方法就会调用 <code class="highlighter-rouge">EvmaTCPClient#eventable_read</code> 通知由一个请求需要处理：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1130</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">EvmaTCPServer</span>

<span class="k">def</span> <span class="nf">eventable_read</span>
  <span class="k">begin</span>
    <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span>
      <span class="n">descriptor</span><span class="p">,</span> <span class="n">peername</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nf">accept_nonblock</span>
      <span class="n">sd</span> <span class="o">=</span> <span class="no">EvmaTCPClient</span><span class="p">.</span><span class="nf">new</span> <span class="n">descriptor</span>
      <span class="n">sd</span><span class="p">.</span><span class="nf">is_server</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="no">EventMachine</span><span class="o">::</span><span class="n">event_callback</span> <span class="n">uuid</span><span class="p">,</span> <span class="no">ConnectionAccepted</span><span class="p">,</span> <span class="n">sd</span><span class="p">.</span><span class="nf">uuid</span>
    <span class="p">}</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EWOULDBLOCK</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EAGAIN</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里会尝试多次 <code class="highlighter-rouge">#accept_non_block</code> 当前的 Socket 并会创建一个 TCP 的客户端对象 <code class="highlighter-rouge">EvmaTCPClient</code>，同时通过 <code class="highlighter-rouge">.event_callback</code> 方法发送 <code class="highlighter-rouge">ConnectionAccepted</code> 消息。</p>

<p><code class="highlighter-rouge">EventMachine::event_callback</code> 就像是一个用于处理所有事件的中心方法，所有的回调都要通过这个中继器进行调度，在实现上就是一个庞大的 <code class="highlighter-rouge">if</code>、<code class="highlighter-rouge">else</code> 语句，里面处理了 EventMachine 中可能出现的 10 种状态和操作：</p>

<p><img src="https://img.draveness.me/2017-11-04-event-callback.png" alt="event-callback" /></p>

<p>大多数事件在触发时，都会从 <code class="highlighter-rouge">@conns</code> 中取出相应的 <code class="highlighter-rouge">Connection</code> 对象，最后执行合适的方法来处理，而这里触发的 <code class="highlighter-rouge">ConnectionAccepted</code> 事件是通过以下的代码来处理的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">eventmachine</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1462</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">event_callback</span> <span class="n">conn_binding</span><span class="p">,</span> <span class="n">opcode</span><span class="p">,</span> <span class="n">data</span>
  <span class="k">if</span> <span class="n">opcode</span> <span class="o">==</span> <span class="c1"># ...</span>
    <span class="c1"># ...</span>
  <span class="k">elsif</span> <span class="n">opcode</span> <span class="o">==</span> <span class="no">ConnectionAccepted</span>
    <span class="n">accep</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">blk</span> <span class="o">=</span> <span class="vi">@acceptors</span><span class="p">[</span><span class="n">conn_binding</span><span class="p">]</span>
    <span class="k">raise</span> <span class="no">NoHandlerForAcceptedConnection</span> <span class="k">unless</span> <span class="n">accep</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">accep</span><span class="p">.</span><span class="nf">new</span> <span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span>
    <span class="vi">@conns</span><span class="p">[</span><span class="n">data</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span>
    <span class="n">blk</span> <span class="n">and</span> <span class="n">blk</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="n">c</span>
  <span class="k">else</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述的 <code class="highlighter-rouge">accep</code> 变量就是我们在 Thin 调用 <code class="highlighter-rouge">.start_server</code> 时传入的 <code class="highlighter-rouge">Connection</code> 类，在这里我们初始化了一个新的实例，同时以 Socket 的 <code class="highlighter-rouge">uuid</code> 作为键存到 <code class="highlighter-rouge">@conns</code> 中。</p>

<p>在这之后 <code class="highlighter-rouge">#select</code> 方法就会监听更多 Socket 上的事件了，当这个 “accept” 后创建的 Socket 接收到数据时，就会触发下面的 <code class="highlighter-rouge">#eventable_read</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1130</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">StreamObject</span>

<span class="k">def</span> <span class="nf">eventable_read</span>
  <span class="vi">@last_activity</span> <span class="o">=</span> <span class="no">Reactor</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">current_loop_time</span>
  <span class="k">begin</span>
    <span class="k">if</span> <span class="n">io</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:read_nonblock</span><span class="p">)</span>
      <span class="mi">10</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nf">read_nonblock</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
        <span class="no">EventMachine</span><span class="o">::</span><span class="n">event_callback</span> <span class="n">uuid</span><span class="p">,</span> <span class="no">ConnectionData</span><span class="p">,</span> <span class="n">data</span>
      <span class="p">}</span>
    <span class="k">else</span>
      <span class="n">data</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nf">sysread</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
      <span class="no">EventMachine</span><span class="o">::</span><span class="n">event_callback</span> <span class="n">uuid</span><span class="p">,</span> <span class="no">ConnectionData</span><span class="p">,</span> <span class="n">data</span>
    <span class="k">end</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EAGAIN</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EWOULDBLOCK</span><span class="p">,</span> <span class="no">SSLConnectionWaitReadable</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNRESET</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNREFUSED</span><span class="p">,</span> <span class="no">EOFError</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EPIPE</span><span class="p">,</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">SSLError</span>
    <span class="vi">@close_scheduled</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="no">EventMachine</span><span class="o">::</span><span class="n">event_callback</span> <span class="n">uuid</span><span class="p">,</span> <span class="no">ConnectionUnbound</span><span class="p">,</span> <span class="kp">nil</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>方法会从 Socket 中读取数据并通过 <code class="highlighter-rouge">.event_callback</code> 发送 <code class="highlighter-rouge">ConnectionData</code> 事件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">eventmachine</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1462</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">event_callback</span> <span class="n">conn_binding</span><span class="p">,</span> <span class="n">opcode</span><span class="p">,</span> <span class="n">data</span>
  <span class="k">if</span> <span class="n">opcode</span> <span class="o">==</span> <span class="c1"># ...</span>
    <span class="c1"># ...</span>
  <span class="k">elsif</span> <span class="n">opcode</span> <span class="o">==</span> <span class="no">ConnectionData</span>
    <span class="n">c</span> <span class="o">=</span> <span class="vi">@conns</span><span class="p">[</span><span class="n">conn_binding</span><span class="p">]</span> <span class="n">or</span> <span class="k">raise</span> <span class="no">ConnectionNotBound</span><span class="p">,</span> <span class="s2">"received data </span><span class="si">#{</span><span class="n">data</span><span class="si">}</span><span class="s2"> for unknown signature: </span><span class="si">#{</span><span class="n">conn_binding</span><span class="si">}</span><span class="s2">"</span>
    <span class="n">c</span><span class="p">.</span><span class="nf">receive_data</span> <span class="n">data</span>
  <span class="k">else</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>从上述方法对 <code class="highlighter-rouge">ConnectionData</code> 事件的处理就可以看到通过传入 Socket 的 <code class="highlighter-rouge">uuid</code> 和数据，就可以找到上面初始化的 <code class="highlighter-rouge">Connection</code> 对象，<code class="highlighter-rouge">#receive_data</code> 方法就能够将数据传递到上层，让用户在自定义的 <code class="highlighter-rouge">Connection</code> 中实现自己的处理逻辑，这也就是 Thin 需要覆写 <code class="highlighter-rouge">#receive_data</code> 方法来接受数据的原因了。</p>

<p>当 Thin 以及 Rack 应用已经接收到了来自用户的请求、完成处理并返回之后经过一系列复杂的调用栈就会执行 <code class="highlighter-rouge">Connection#send_data</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">connection</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">324</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Connection</span>

<span class="k">def</span> <span class="nf">send_data</span> <span class="n">data</span>
  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="n">size</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">bytesize</span> <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:bytesize</span><span class="p">)</span>
  <span class="n">size</span> <span class="o">||=</span> <span class="n">data</span><span class="p">.</span><span class="nf">size</span>
  <span class="no">EventMachine</span><span class="o">::</span><span class="n">send_data</span> <span class="vi">@signature</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">172</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:EventMachine&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">send_data</span> <span class="n">target</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">datalength</span>
  <span class="n">selectable</span> <span class="o">=</span> <span class="no">Reactor</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">get_selectable</span><span class="p">(</span> <span class="n">target</span> <span class="p">)</span> <span class="n">or</span> <span class="k">raise</span> <span class="s2">"unknown send_data target"</span>
  <span class="n">selectable</span><span class="p">.</span><span class="nf">send_data</span> <span class="n">data</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">851</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">StreamObject</span>

<span class="k">def</span> <span class="nf">send_data</span> <span class="n">data</span>
  <span class="k">unless</span> <span class="vi">@close_scheduled</span> <span class="n">or</span> <span class="vi">@close_requested</span> <span class="n">or</span> <span class="o">!</span><span class="n">data</span> <span class="n">or</span> <span class="n">data</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;=</span> <span class="mi">0</span>
    <span class="vi">@outbound_q</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>经过一系列同名方法的调用，在调用栈末尾的 <code class="highlighter-rouge">StreamObject#send_data</code> 中，将所有需要写入的数据全部加入 <code class="highlighter-rouge">@outbound_q</code> 中，这其实就是一个待写入数据的队列。</p>

<p>当 Socket 变得可写之后，就会由 <code class="highlighter-rouge">#select</code> 方法触发 <code class="highlighter-rouge">#eventable_write</code> 将 <code class="highlighter-rouge">@outbound_q</code> 队列中的数据通过 <code class="highlighter-rouge">#write_nonblock</code> 或者 <code class="highlighter-rouge">syswrite</code> 写入 Socket，也就是将请求返回给客户端。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">823</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">StreamObject</span>

<span class="k">def</span> <span class="nf">eventable_write</span>
  <span class="vi">@last_activity</span> <span class="o">=</span> <span class="no">Reactor</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">current_loop_time</span>
  <span class="k">while</span> <span class="n">data</span> <span class="o">=</span> <span class="vi">@outbound_q</span><span class="p">.</span><span class="nf">shift</span> <span class="k">do</span>
    <span class="k">begin</span>
      <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">to_s</span>
      <span class="n">w</span> <span class="o">=</span> <span class="k">if</span> <span class="n">io</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:write_nonblock</span><span class="p">)</span>
            <span class="n">io</span><span class="p">.</span><span class="nf">write_nonblock</span> <span class="n">data</span>
          <span class="k">else</span>
            <span class="n">io</span><span class="p">.</span><span class="nf">syswrite</span> <span class="n">data</span>
          <span class="k">end</span>

      <span class="k">if</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">.</span><span class="nf">length</span>
        <span class="vi">@outbound_q</span><span class="p">.</span><span class="nf">unshift</span> <span class="n">data</span><span class="p">[</span><span class="n">w</span><span class="o">..-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">break</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EAGAIN</span><span class="p">,</span> <span class="no">SSLConnectionWaitReadable</span><span class="p">,</span> <span class="no">SSLConnectionWaitWritable</span>
      <span class="vi">@outbound_q</span><span class="p">.</span><span class="nf">unshift</span> <span class="n">data</span>
      <span class="k">break</span>
    <span class="k">rescue</span> <span class="no">EOFError</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNRESET</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNREFUSED</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EPIPE</span><span class="p">,</span> <span class="no">OpenSSL</span><span class="o">::</span><span class="no">SSL</span><span class="o">::</span><span class="no">SSLError</span>
      <span class="vi">@close_scheduled</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="vi">@outbound_q</span><span class="p">.</span><span class="nf">clear</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="关闭-socket">关闭 Socket</h3>

<p>当数据写入时发生了 <code class="highlighter-rouge">EOFError</code> 或者其他错误时就会将 <code class="highlighter-rouge">close_scheduled</code> 标记为 <code class="highlighter-rouge">true</code>，在随后的事件循环中会关闭 Socket 并发送 <code class="highlighter-rouge">ConnectionUnbound</code> 事件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">em</span><span class="o">/</span><span class="n">pure_ruby</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">540</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">Reactor</span>

<span class="k">def</span> <span class="nf">crank_selectables</span>
  <span class="c1"># ...</span>

  <span class="vi">@selectables</span><span class="p">.</span><span class="nf">delete_if</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">io</span><span class="o">|</span>
    <span class="k">if</span> <span class="n">io</span><span class="p">.</span><span class="nf">close_scheduled?</span>
      <span class="n">io</span><span class="p">.</span><span class="nf">close</span>
      <span class="k">begin</span>
        <span class="no">EventMachine</span><span class="o">::</span><span class="n">event_callback</span> <span class="n">io</span><span class="p">.</span><span class="nf">uuid</span><span class="p">,</span> <span class="no">ConnectionUnbound</span><span class="p">,</span> <span class="kp">nil</span>
      <span class="k">rescue</span> <span class="no">ConnectionNotBound</span><span class="p">;</span> <span class="k">end</span>
      <span class="kp">true</span>
    <span class="k">end</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">.event_callback</code> 在处理 <code class="highlighter-rouge">ConnectionUnbound</code> 事件时会在 <code class="highlighter-rouge">@conns</code> 中将结束的 <code class="highlighter-rouge">Connection</code> 剔除：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">event_callback</span> <span class="n">conn_binding</span><span class="p">,</span> <span class="n">opcode</span><span class="p">,</span> <span class="n">data</span>
  <span class="k">if</span> <span class="n">opcode</span> <span class="o">==</span> <span class="no">ConnectionUnbound</span>
    <span class="k">if</span> <span class="n">c</span> <span class="o">=</span> <span class="vi">@conns</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span> <span class="n">conn_binding</span> <span class="p">)</span>
      <span class="n">c</span><span class="p">.</span><span class="nf">unbind</span>
      <span class="n">io</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">instance_variable_get</span><span class="p">(</span><span class="ss">:@io</span><span class="p">)</span>
      <span class="k">begin</span>
        <span class="n">io</span><span class="p">.</span><span class="nf">close</span>
      <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EBADF</span><span class="p">,</span> <span class="no">IOError</span>
      <span class="k">end</span>
    <span class="k">elsif</span> <span class="n">c</span> <span class="o">=</span> <span class="vi">@acceptors</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span> <span class="n">conn_binding</span> <span class="p">)</span>
    <span class="k">else</span>
      <span class="k">raise</span> <span class="no">ConnectionNotBound</span><span class="p">,</span> <span class="s2">"received ConnectionUnbound for an unknown signature: </span><span class="si">#{</span><span class="n">conn_binding</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">end</span>
  <span class="k">elsif</span> <span class="n">opcode</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="c1">#...</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这之后会调用 <code class="highlighter-rouge">Connection</code> 的 <code class="highlighter-rouge">#unbind</code> 方法，再次执行 <code class="highlighter-rouge">#close</code> 确保 Socket 连接已经断掉了。</p>

<h3 id="小结-1">小结</h3>

<p>EventMachine 在处理用户的请求时，会通过一个事件循环和一个中心化的事件处理中心 <code class="highlighter-rouge">.event_callback</code> 来响应所有的事件，你可以看到在使用 EventMachine 时所有的响应都是异步的，尤其是对 Socket 的读写，所有外部的输入在 EventMachine 看来都是一个事件，它们会被 EventMachine 选择合适的处理器进行转发。</p>

<h2 id="io-模型">I/O 模型</h2>

<p>Thin 本身其实没有实现任何的 I/O 模型，它通过对 EventMachine 进行封装，使用了其事件驱动的特点，为上层提供了处理并发 I/O 的 Reactor 模型，在不同的阶段有着不同的工作流程，在启动 Thin 的服务时，Thin 会直接通过 <code class="highlighter-rouge">.start_server</code> 创建一个 Socket 监听一个 <code class="highlighter-rouge">&lt;host, port&gt;</code> 组成的元组：</p>

<p><img src="https://img.draveness.me/2017-11-04-thin-start-server.png" alt="thin-start-server" /></p>

<p>当服务启动之后，就可以接受来自客户端的 HTTP 请求了，处理 HTTP 请求总共需要三个模块的合作，分别是 EventMachine、Thin 以及 Rack 应用：</p>

<p><img src="https://img.draveness.me/2017-11-04-thin-handle-request.png" alt="thin-handle-request" /></p>

<p>在上图中省略了 Rack 的处理部分，不过对于其他部分的展示还是比较详细的，EventMachine 负责对 TCP Socket 进行监听，在发生事件时通过 <code class="highlighter-rouge">.event_callback</code> 进行处理，将消息转发给位于 Thin 中的 <code class="highlighter-rouge">Connection</code>，该类以及模块负责处理 HTTP 协议相关的内容，将整个请求包装成一个 <code class="highlighter-rouge">env</code> 对象，调用 <code class="highlighter-rouge">#call</code> 方法。</p>

<p>在这时就开始了返回响应的逻辑了，<code class="highlighter-rouge">#call</code> 方法会返回一个三元组，经过 Thin 中的 <code class="highlighter-rouge">#send_data</code> 最终将数据写入 <code class="highlighter-rouge">outbound_q</code> 队列中等待处理：</p>

<p><img src="https://img.draveness.me/2017-11-04-thin-send-response.png" alt="thin-send-response" /></p>

<p>EventMachine 会通过一个事件循环，使用 <code class="highlighter-rouge">#select</code> 监听当前 Socket 的可读写状态，并在合适的时候触发 <code class="highlighter-rouge">#eventable_write</code> 从 <code class="highlighter-rouge">outbound_q</code> 队列中读取数据写入 Socket，在写入结束后 Socket 就会被关闭，整个请求的响应也就结束了。</p>

<p><img src="https://img.draveness.me/2017-11-04-thin-io-model.png" alt="thin-io-model" /></p>

<p>Thin 使用了 EventMachine 作为底层处理 TCP 协议的框架，提供了事件驱动的 I/O 模型，也就是我们理解的 Reactor 模型，对于每一个 HTTP 请求都会创建一个对应的 <code class="highlighter-rouge">Connection</code> 对象，所有的事件都由 EventMachine 来派发，最大程度做到了 I/O 的读写都是异步的，不会阻塞当前的线程，这也是 Thin 以及 Node.js 能够并发处理大量请求的原因。</p>

<h2 id="总结">总结</h2>

<p>Thin 作为一个 Ruby 社区中简单的 webserver，其实本身没有做太多的事情，只是使用了 EventMachine 提供的事件驱动的 I/O 模型，为上层提供了更加易用的 API，相比于其他同步处理请求的 webserver，Reactor 模式的优点就是 Thin 的优点，主程序只负责监听事件和分发事件，一旦涉及到 I/O 的工作都尽量使用回调的方式处理，当回调完成后再发送通知，这种方式能够减少进程的等待时间，时刻都在处理用户的请求和事件。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://zedshaw.com/archive/ragel-state-charts/">Ragel State Charts</a></li>
  <li><a href="http://www.colm.net/open-source/ragel/">Ragel State Machine Compiler</a></li>
  <li><a href="https://www.igvita.com/2008/05/27/ruby-eventmachine-the-speed-demon/">Ruby EventMachine - The Speed Demon</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>浅谈 WEBrick 的多线程模型</title>
	  <link>/blogs//rack-webrick</link>
	  <author></author>
	  <pubDate>2017-11-01T00:00:00+00:00</pubDate>
	  <guid>/blogs//rack-webrick</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>这篇文章会介绍在开发环境中最常用的应用容器 WEBrick 的实现原理，除了通过源代码分析之外，我们也会介绍它的 IO 模型以及一些特点。</p>

<p>在 GitHub 上，WEBrick 从 2003 年的六月份就开始开发了，有着十几年历史的 WEBrick 的实现非常简单，总共只有 4000 多行的代码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">loc_counter</span> <span class="o">.</span>
<span class="mi">40</span> <span class="n">files</span> <span class="n">processed</span>
<span class="no">Total</span>     <span class="mi">6918</span> <span class="n">lines</span>
<span class="no">Empty</span>     <span class="mi">990</span> <span class="n">lines</span>
<span class="no">Comments</span>  <span class="mi">1927</span> <span class="n">lines</span>
<span class="no">Code</span>      <span class="mi">4001</span> <span class="n">lines</span>
</code></pre></div></div>

<h2 id="webrick-的实现">WEBrick 的实现</h2>

<p>由于 WEBrick 是 Rack 中内置的处理器，所以与 Unicorn 和 Puma 这种第三方开发的 webserver 不同，WEBrick 的处理器是在 Rack 中实现的，而 WEBrick 的运行也都是从这个处理器的开始的。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Rack</span>
  <span class="k">module</span> <span class="nn">Handler</span>
    <span class="k">class</span> <span class="nc">WEBrick</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServlet</span><span class="o">::</span><span class="no">AbstractServlet</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
        <span class="n">environment</span>  <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'development'</span>
        <span class="n">default_host</span> <span class="o">=</span> <span class="n">environment</span> <span class="o">==</span> <span class="s1">'development'</span> <span class="p">?</span> <span class="s1">'localhost'</span> <span class="p">:</span> <span class="kp">nil</span>

        <span class="n">options</span><span class="p">[</span><span class="ss">:BindAddress</span><span class="p">]</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:Host</span><span class="p">)</span> <span class="o">||</span> <span class="n">default_host</span>
        <span class="n">options</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">||=</span> <span class="mi">8080</span>
        <span class="vi">@server</span> <span class="o">=</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="vi">@server</span><span class="p">.</span><span class="nf">mount</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="p">,</span> <span class="n">app</span>
        <span class="k">yield</span> <span class="vi">@server</span>  <span class="k">if</span> <span class="nb">block_given?</span>
        <span class="vi">@server</span><span class="p">.</span><span class="nf">start</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>我们在上一篇文章 <a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a> 中介绍 Rack 的实现原理时，最终调用了上述方法，从这里开始大部分的实现都与 WEBrick 有关了。</p>

<p>在这里，你可以看到方法会先处理传入的参数比如：地址、端口号等等，在这之后会使用 WEBrick 提供的 <code class="highlighter-rouge">HTTPServer</code> 来处理 HTTP 请求，调用 <code class="highlighter-rouge">mount</code> 在根路由上挂载应用和处理器 <code class="highlighter-rouge">Rack::Handler::WEBrick</code> 接受请求，最后执行 <code class="highlighter-rouge">#start</code> 方法启动服务器。</p>

<h3 id="初始化服务器">初始化服务器</h3>

<p><code class="highlighter-rouge">HTTPServer</code> 的初始化分为两个阶段，一部分是 <code class="highlighter-rouge">HTTPServer</code> 的初始化，另一部分调用父类的 <code class="highlighter-rouge">initialize</code> 方法，在自己构造器中，会配置当前服务器能够处理的 HTTP 版本并初始化新的 <code class="highlighter-rouge">MountTable</code> 实例：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">46</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::HTTPServer&gt;</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">config</span><span class="o">=</span><span class="p">{},</span> <span class="n">default</span><span class="o">=</span><span class="no">Config</span><span class="o">::</span><span class="no">HTTP</span><span class="p">)</span>
  <span class="k">super</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
  <span class="vi">@http_version</span> <span class="o">=</span> <span class="no">HTTPVersion</span><span class="o">::</span><span class="n">convert</span><span class="p">(</span><span class="vi">@config</span><span class="p">[</span><span class="ss">:HTTPVersion</span><span class="p">])</span>

  <span class="vi">@mount_tab</span> <span class="o">=</span> <span class="no">MountTable</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">if</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:DocumentRoot</span><span class="p">]</span>
    <span class="n">mount</span><span class="p">(</span><span class="s2">"/"</span><span class="p">,</span> <span class="no">HTTPServlet</span><span class="o">::</span><span class="no">FileHandler</span><span class="p">,</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:DocumentRoot</span><span class="p">],</span>
          <span class="vi">@config</span><span class="p">[</span><span class="ss">:DocumentRootOptions</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="k">unless</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:AccessLog</span><span class="p">]</span>
    <span class="vi">@config</span><span class="p">[</span><span class="ss">:AccessLog</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">[</span> <span class="vg">$stderr</span><span class="p">,</span> <span class="no">AccessLog</span><span class="o">::</span><span class="no">COMMON_LOG_FORMAT</span> <span class="p">],</span>
      <span class="p">[</span> <span class="vg">$stderr</span><span class="p">,</span> <span class="no">AccessLog</span><span class="o">::</span><span class="no">REFERER_LOG_FORMAT</span> <span class="p">]</span>
    <span class="p">]</span>
  <span class="k">end</span>

  <span class="vi">@virtual_hosts</span> <span class="o">=</span> <span class="no">Array</span><span class="p">.</span><span class="nf">new</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在父类 <code class="highlighter-rouge">GenericServer</code> 中初始化了用于监听端口号的 Socket 连接：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">185</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::GenericServer&gt;</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">config</span><span class="o">=</span><span class="p">{},</span> <span class="n">default</span><span class="o">=</span><span class="no">Config</span><span class="o">::</span><span class="no">General</span><span class="p">)</span>
  <span class="vi">@config</span> <span class="o">=</span> <span class="n">default</span><span class="p">.</span><span class="nf">dup</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
  <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:Stop</span>

  <span class="vi">@listeners</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">listen</span><span class="p">(</span><span class="vi">@config</span><span class="p">[</span><span class="ss">:BindAddress</span><span class="p">],</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:Port</span><span class="p">])</span>
  <span class="k">if</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="vi">@config</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">=</span> <span class="vi">@listeners</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">addr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>每一个服务器都会在初始化的时候创建一系列的 <code class="highlighter-rouge">listener</code> 用于监听地址和端口号组成的元组，其内部调用了 <code class="highlighter-rouge">Utils</code> 模块中定义的方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">127</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::GenericServer&gt;</span>

<span class="k">def</span> <span class="nf">listen</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="vi">@listeners</span> <span class="o">+=</span> <span class="no">Utils</span><span class="o">::</span><span class="n">create_listeners</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">utils</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">61</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:WEBrick::Utils&gt;</span>

<span class="k">def</span> <span class="nf">create_listeners</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="n">sockets</span> <span class="o">=</span> <span class="no">Socket</span><span class="p">.</span><span class="nf">tcp_server_sockets</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
  <span class="n">sockets</span> <span class="o">=</span> <span class="n">sockets</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">autoclose</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="n">ts</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="p">.</span><span class="nf">for_fd</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">fileno</span><span class="p">)</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">close</span>
    <span class="n">ts</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sockets</span>
<span class="k">end</span>
<span class="kp">module_function</span> <span class="ss">:create_listeners</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">.create_listeners</code> 方法中调用了 <code class="highlighter-rouge">.tcp_server_sockets</code> 方法由于初始化一组 <code class="highlighter-rouge">Socket</code> 对象，最后得到一个数组的 <code class="highlighter-rouge">TCPServer</code> 实例。</p>

<h3 id="挂载应用">挂载应用</h3>

<p>在使用 <code class="highlighter-rouge">WEBrick</code> 启动服务的时候，第二步就是将处理器和 Rack 应用挂载到根路由下：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vi">@server</span><span class="p">.</span><span class="nf">mount</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="p">,</span> <span class="n">app</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">#mount</code> 方法其实是一个比较简单的方法，因为我们在构造器中已经初始化了 <code class="highlighter-rouge">MountTable</code> 对象，所以这一步只是将传入的多个参数放到这个表中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">155</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">mount</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">servlet</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">)</span>
  <span class="vi">@mount_tab</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span> <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span> <span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">MountTable</code> 是一个包含从路由到 Rack 处理器一个 App 的映射表：</p>

<p><img src="https://img.draveness.me/2017-11-01-mounttable-and-applications.png" alt="mounttable-and-applications" /></p>

<p>当执行了 <code class="highlighter-rouge">MountTable</code> 的 <code class="highlighter-rouge">#compile</code> 方法时，上述的对象就会将表中的所有键按照加入的顺序逆序拼接成一个如下的正则表达式用来匹配传入的路由：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">^</span><span class="p">(</span><span class="sr">/|/</span><span class="n">admin</span><span class="o">|</span><span class="sr">/user)(?=/</span><span class="o">|</span><span class="err">$</span><span class="p">)</span>
</code></pre></div></div>

<p>上述正则表达式在使用时如果匹配到了指定的路由就会返回 <code class="highlighter-rouge">$&amp;</code> 和 <code class="highlighter-rouge">$'</code> 两个部分，前者表示整个匹配的文本，后者表示匹配文本后面的字符串。</p>

<h3 id="启动服务器">启动服务器</h3>

<p>在 <code class="highlighter-rouge">Rack::Handler::WEBrick</code> 中的 <code class="highlighter-rouge">.run</code> 方法先初始化了服务器，将处理器和应用挂载到了根路由上，在最后执行 <code class="highlighter-rouge">#start</code> 方法启动服务器：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">152</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">GenericServer</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">ServerError</span><span class="p">,</span> <span class="s2">"already started."</span> <span class="k">if</span> <span class="vi">@status</span> <span class="o">!=</span> <span class="ss">:Stop</span>

  <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:Running</span>
  <span class="k">begin</span>
    <span class="k">while</span> <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:Running</span>
      <span class="k">begin</span>
        <span class="k">if</span> <span class="n">svrs</span> <span class="o">=</span> <span class="no">IO</span><span class="p">.</span><span class="nf">select</span><span class="p">([</span><span class="o">*</span><span class="vi">@listeners</span><span class="p">],</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span>
          <span class="n">svrs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">each</span><span class="p">{</span> <span class="o">|</span><span class="n">svr</span><span class="o">|</span>
            <span class="n">sock</span> <span class="o">=</span> <span class="n">accept_client</span><span class="p">(</span><span class="n">svr</span><span class="p">)</span>
            <span class="n">start_thread</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="k">end</span>
      <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EBADF</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTSOCK</span><span class="p">,</span> <span class="no">IOError</span><span class="p">,</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
        <span class="k">raise</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">ensure</span>
    <span class="n">cleanup_listener</span>
    <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:Stop</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>由于原方法的实现比较复杂不容易阅读，在这里对方法进行了简化，省略了向 logger 中输出内容、处理服务的关闭以及执行回调等功能。</p>

<p>我们可以理解为上述方法通过 <code class="highlighter-rouge">.select</code> 方法对一组 Socket 进行监听，当有消息需要处理时就依次执行 <code class="highlighter-rouge">#accept_client</code> 和 <code class="highlighter-rouge">#start_thread</code> 两个方法处理来自客户端的请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">254</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">GenericServer</span>

<span class="k">def</span> <span class="nf">accept_client</span><span class="p">(</span><span class="n">svr</span><span class="p">)</span>
  <span class="n">sock</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="k">begin</span>
    <span class="n">sock</span> <span class="o">=</span> <span class="n">svr</span><span class="p">.</span><span class="nf">accept</span>
    <span class="n">sock</span><span class="p">.</span><span class="nf">sync</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="no">Utils</span><span class="o">::</span><span class="n">set_non_blocking</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNRESET</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNABORTED</span><span class="p">,</span>
         <span class="no">Errno</span><span class="o">::</span><span class="no">EPROTO</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EINVAL</span>
  <span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="se">\n\t</span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">backtrace</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span> <span class="n">msg</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="n">sock</span>
<span class="k">end</span>
</code></pre></div></div>

<p>WEBrick 在 <code class="highlighter-rouge">#accept_client</code> 方法中执行了 <code class="highlighter-rouge">#accept</code> 方法来得到一个 TCP 客户端 Socket，同时会通过 <code class="highlighter-rouge">set_non_blocking</code> 将该 Socket 变成非阻塞的，最后在方法末尾返回创建的 Socket。</p>

<p>在 <code class="highlighter-rouge">#start_thread</code> 方法中会<strong>开启一个新的线程</strong>，并在新的线程中执行 <code class="highlighter-rouge">#run</code> 方法来处理请求：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">278</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">GenericServer</span>

<span class="k">def</span> <span class="nf">start_thread</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="no">Thread</span><span class="p">.</span><span class="nf">start</span> <span class="p">{</span>
    <span class="k">begin</span>
      <span class="no">Thread</span><span class="p">.</span><span class="nf">current</span><span class="p">[</span><span class="ss">:WEBrickSocket</span><span class="p">]</span> <span class="o">=</span> <span class="n">sock</span>
      <span class="n">run</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTCONN</span><span class="p">,</span> <span class="no">ServerError</span><span class="p">,</span> <span class="no">Exception</span>
    <span class="k">ensure</span>
      <span class="no">Thread</span><span class="p">.</span><span class="nf">current</span><span class="p">[</span><span class="ss">:WEBrickSocket</span><span class="p">]</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="n">sock</span><span class="p">.</span><span class="nf">close</span>
    <span class="k">end</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="处理请求">处理请求</h3>

<p>所有的请求都不会由 <code class="highlighter-rouge">GenericServer</code> 这个通用的服务器来处理，它只处理通用的逻辑，对于 HTTP 请求的处理都是在 <code class="highlighter-rouge">HTTPServer#run</code> 中完成的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">69</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
  <span class="k">while</span> <span class="kp">true</span>
    <span class="n">res</span> <span class="o">=</span> <span class="no">HTTPResponse</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">req</span> <span class="o">=</span> <span class="no">HTTPRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">server</span> <span class="o">=</span> <span class="nb">self</span>
    <span class="k">begin</span>
      <span class="n">timeout</span> <span class="o">=</span> <span class="vi">@config</span><span class="p">[</span><span class="ss">:RequestTimeout</span><span class="p">]</span>
      <span class="k">while</span> <span class="n">timeout</span> <span class="o">&gt;</span> <span class="mi">0</span>
        <span class="k">break</span> <span class="k">if</span> <span class="n">sock</span><span class="p">.</span><span class="nf">to_io</span><span class="p">.</span><span class="nf">wait_readable</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
        <span class="k">break</span> <span class="k">if</span> <span class="vi">@status</span> <span class="o">!=</span> <span class="ss">:Running</span>
        <span class="n">timeout</span> <span class="o">-=</span> <span class="mf">0.5</span>
      <span class="k">end</span>
      <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span> <span class="k">if</span> <span class="n">timeout</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="vi">@status</span> <span class="o">!=</span> <span class="ss">:Running</span>
      <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span> <span class="k">if</span> <span class="n">sock</span><span class="p">.</span><span class="nf">eof?</span>
      <span class="n">req</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">request_method</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_method</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">request_uri</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_uri</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">request_http_version</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">http_version</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span><span class="p">,</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">RequestTimeout</span><span class="p">,</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">Error</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">set_error</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">Status</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="n">ex</span><span class="p">.</span><span class="nf">code</span>
    <span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">ex</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">set_error</span><span class="p">(</span><span class="n">ex</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
    <span class="k">ensure</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span> <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_line</span>
    <span class="k">end</span>
    <span class="k">break</span> <span class="k">if</span> <span class="vi">@http_version</span> <span class="o">&lt;</span> <span class="s2">"1.1"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>对 HTTP 协议了解的读者应该能从上面的代码中看到很多与 HTTP 协议相关的东西，比如 HTTP 的版本号、方法、URL 等等，上述方法总共做了三件事情，等待监听的 Socket 变得可读，执行 <code class="highlighter-rouge">#parse</code> 方法解析 Socket 上的数据，通过 <code class="highlighter-rouge">#service</code> 方法完成处理请求的响应，首先是对 Socket 上的数据进行解析：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httprequest</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">192</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPRequest</span>

<span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">socket</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
  <span class="vi">@socket</span> <span class="o">=</span> <span class="n">socket</span>
  <span class="k">begin</span>
    <span class="vi">@peeraddr</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:peeraddr</span><span class="p">)</span> <span class="p">?</span> <span class="n">socket</span><span class="p">.</span><span class="nf">peeraddr</span> <span class="p">:</span> <span class="p">[]</span>
    <span class="vi">@addr</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:addr</span><span class="p">)</span> <span class="p">?</span> <span class="n">socket</span><span class="p">.</span><span class="nf">addr</span> <span class="p">:</span> <span class="p">[]</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTCONN</span>
    <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">EOFError</span>
  <span class="k">end</span>

  <span class="n">read_request_line</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
  <span class="k">if</span> <span class="vi">@http_version</span><span class="p">.</span><span class="nf">major</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="k">if</span> <span class="vi">@request_method</span> <span class="o">==</span> <span class="s2">"CONNECT"</span>
  <span class="k">return</span> <span class="k">if</span> <span class="vi">@unparsed_uri</span> <span class="o">==</span> <span class="s2">"*"</span>

  <span class="k">begin</span>
    <span class="n">setup_forwarded_info</span>
    <span class="vi">@request_uri</span> <span class="o">=</span> <span class="n">parse_uri</span><span class="p">(</span><span class="vi">@unparsed_uri</span><span class="p">)</span>
    <span class="vi">@path</span> <span class="o">=</span> <span class="no">HTTPUtils</span><span class="o">::</span><span class="n">unescape</span><span class="p">(</span><span class="vi">@request_uri</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
    <span class="vi">@path</span> <span class="o">=</span> <span class="no">HTTPUtils</span><span class="o">::</span><span class="n">normalize_path</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
    <span class="vi">@host</span> <span class="o">=</span> <span class="vi">@request_uri</span><span class="p">.</span><span class="nf">host</span>
    <span class="vi">@port</span> <span class="o">=</span> <span class="vi">@request_uri</span><span class="p">.</span><span class="nf">port</span>
    <span class="vi">@query_string</span> <span class="o">=</span> <span class="vi">@request_uri</span><span class="p">.</span><span class="nf">query</span>
    <span class="vi">@script_name</span> <span class="o">=</span> <span class="s2">""</span>
    <span class="vi">@path_info</span> <span class="o">=</span> <span class="vi">@path</span><span class="p">.</span><span class="nf">dup</span>
  <span class="k">rescue</span>
    <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">BadRequest</span><span class="p">,</span> <span class="s2">"bad URI `</span><span class="si">#{</span><span class="vi">@unparsed_uri</span><span class="si">}</span><span class="s2">'."</span>
  <span class="k">end</span>

  <span class="k">if</span> <span class="sr">/close/io</span> <span class="o">=~</span> <span class="nb">self</span><span class="p">[</span><span class="s2">"connection"</span><span class="p">]</span>
    <span class="c1"># deal with keep alive</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>由于 HTTP 协议本身就比较复杂，请求中包含的信息也非常多，所以在这里用于<strong>解析</strong> HTTP 请求的代码也很多，想要了解 WEBrick 是如何解析 HTTP 请求的可以看 httprequest.rb 文件中的代码，在处理了 HTTP 请求之后，就开始执行 <code class="highlighter-rouge">#service</code> 响应该 HTTP 请求了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">125</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
  <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">script_name</span><span class="p">,</span> <span class="n">path_info</span> <span class="o">=</span> <span class="n">search_servlet</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="nf">path</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">HTTPStatus</span><span class="o">::</span><span class="no">NotFound</span><span class="p">,</span> <span class="s2">"`</span><span class="si">#{</span><span class="n">req</span><span class="p">.</span><span class="nf">path</span><span class="si">}</span><span class="s2">' not found."</span> <span class="k">unless</span> <span class="n">servlet</span>
  <span class="n">req</span><span class="p">.</span><span class="nf">script_name</span> <span class="o">=</span> <span class="n">script_name</span>
  <span class="n">req</span><span class="p">.</span><span class="nf">path_info</span> <span class="o">=</span> <span class="n">path_info</span>
  <span class="n">si</span> <span class="o">=</span> <span class="n">servlet</span><span class="p">.</span><span class="nf">get_instance</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">)</span>
  <span class="n">si</span><span class="p">.</span><span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里我们会从上面提到的 <code class="highlighter-rouge">MountTable</code> 中找出在之前注册的处理器 handler 和 Rack 应用：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">182</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">search_servlet</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
  <span class="n">script_name</span><span class="p">,</span> <span class="n">path_info</span> <span class="o">=</span> <span class="vi">@mount_tab</span><span class="p">.</span><span class="nf">scan</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
  <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="vi">@mount_tab</span><span class="p">[</span><span class="n">script_name</span><span class="p">]</span>
  <span class="k">if</span> <span class="n">servlet</span>
    <span class="p">[</span> <span class="n">servlet</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">script_name</span><span class="p">,</span> <span class="n">path_info</span> <span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>得到了处理器 handler 之后，通过 <code class="highlighter-rouge">.get_instance</code> 方法创建一个新的实例，这个方法在大多数情况下等同于初始化方法 <code class="highlighter-rouge">.new</code>，随后调用了该处理器 <code class="highlighter-rouge">Rack::WEBrick::Handler</code> 的 <code class="highlighter-rouge">#service</code> 方法，该方法是在 rack 工程中定义的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">rack</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">handler</span><span class="o">/</span><span class="n">webrick</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">57</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span>

<span class="k">def</span> <span class="nf">service</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
  <span class="n">res</span><span class="p">.</span><span class="nf">rack</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="n">env</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="nf">meta_vars</span>
  <span class="n">env</span><span class="p">.</span><span class="nf">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">.</span><span class="nf">nil?</span> <span class="p">}</span>

  <span class="n">env</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span>
    <span class="c1"># ...</span>
    <span class="no">RACK_URL_SCHEME</span>   <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"yes"</span><span class="p">,</span> <span class="s2">"on"</span><span class="p">,</span> <span class="s2">"1"</span><span class="p">].</span><span class="nf">include?</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="no">HTTPS</span><span class="p">])</span> <span class="p">?</span> <span class="s2">"https"</span> <span class="p">:</span> <span class="s2">"http"</span><span class="p">,</span>
    <span class="c1"># ...</span>
  <span class="p">)</span>
  
  <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">begin</span>
    <span class="n">res</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="n">status</span><span class="p">.</span><span class="nf">to_i</span>
    <span class="n">headers</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">vs</span><span class="o">|</span>
      <span class="c1"># ...</span>
    <span class="p">}</span>

    <span class="n">body</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">body</span> <span class="o">&lt;&lt;</span> <span class="n">part</span>
    <span class="p">}</span>
  <span class="k">ensure</span>
    <span class="n">body</span><span class="p">.</span><span class="nf">close</span>  <span class="k">if</span> <span class="n">body</span><span class="p">.</span><span class="nf">respond_to?</span> <span class="ss">:close</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>由于上述方法也涉及了非常多 HTTP 协议的实现细节所以很多过程都被省略了，在上述方法中，我们先构建了应用的输入 <code class="highlighter-rouge">env</code> 哈希变量，然后通过执行 <code class="highlighter-rouge">#call</code> 方法将控制权交给 Rack 应用，最后获得一个由 <code class="highlighter-rouge">status</code>、<code class="highlighter-rouge">headers</code> 和 <code class="highlighter-rouge">body</code> 组成的三元组；在接下来的代码中，分别对这三者进行处理，为这次请求『填充』一个完成的 HTTP 请求。</p>

<p>到这里，最后由 <code class="highlighter-rouge">WEBrick::HTTPServer#run</code> 方法中的 <code class="highlighter-rouge">ensure</code> block 来结束整个 HTTP 请求的处理：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpserver</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">69</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
  <span class="k">while</span> <span class="kp">true</span>
    <span class="n">res</span> <span class="o">=</span> <span class="no">HTTPResponse</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">req</span> <span class="o">=</span> <span class="no">HTTPRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
    <span class="n">server</span> <span class="o">=</span> <span class="nb">self</span>
    <span class="k">begin</span>
      <span class="c1"># ...</span>
    <span class="k">ensure</span>
      <span class="n">res</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span> <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="nf">request_line</span>
    <span class="k">end</span>
    <span class="k">break</span> <span class="k">if</span> <span class="vi">@http_version</span> <span class="o">&lt;</span> <span class="s2">"1.1"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">#send_reponse</code> 方法中，分别执行了 <code class="highlighter-rouge">#send_header</code> 和 <code class="highlighter-rouge">#send_body</code> 方法向当前的 Socket 中发送 HTTP 响应中的数据：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpresponse</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">205</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPResponse</span>

<span class="k">def</span> <span class="nf">send_response</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
  <span class="k">begin</span>
    <span class="n">setup_header</span><span class="p">()</span>
    <span class="n">send_header</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
    <span class="n">send_body</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EPIPE</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ECONNRESET</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOTCONN</span> <span class="o">=&gt;</span> <span class="n">ex</span>
    <span class="vi">@logger</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
    <span class="vi">@keep_alive</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">ex</span>
    <span class="vi">@logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">ex</span><span class="p">)</span>
    <span class="vi">@keep_alive</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>所有向 Socket 中写入数据的工作最终都会由 <code class="highlighter-rouge">#_write_data</code> 这个方法来处理，将数据全部写入 Socket 中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">webrick</span><span class="o">/</span><span class="n">httpresponse</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">464</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPResponse</span>

<span class="k">def</span> <span class="nf">_write_data</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="n">socket</span> <span class="o">&lt;&lt;</span> <span class="n">data</span>
<span class="k">end</span>
</code></pre></div></div>

<p>从解析 HTTP 请求、调用 Rack 应用、创建 Response 到最后向 Socket 中写回数据，WEBrick 处理 HTTP 请求的部分就结束了。</p>

<h2 id="io-模型">I/O 模型</h2>

<p>通过对 WEBrick 源代码的阅读，我们其实已经能够了解整个 webserver 的工作原理，当我们启动一个 WEBrick 服务时只会启动一个进程，该进程会在指定的 ip 和端口上使用 <code class="highlighter-rouge">.select</code> 监听来自用户的所有 HTTP 请求：</p>

<p><img src="https://img.draveness.me/2017-11-01-webrick-io-model.png" alt="webrick-io-mode" /></p>

<p>当 <code class="highlighter-rouge">.select</code> 接收到来自用户的请求时，会为每一个请求创建一个新的 <code class="highlighter-rouge">Thread</code> 并在新的线程中对 HTTP 请求进行处理。</p>

<p>由于 WEBrick 在运行时只会启动一个进程，并没有其他的守护进程，所以它不够健壮，不能在发生问题时重启持续对外界提供服务，再加上 WEBrick 确实历史比较久远，代码的风格也不是特别的优雅，还有普遍知道的内存泄漏以及 HTTP 解析的问题，所以在生产环境中很少被使用。</p>

<p>虽然 WEBrick 有一些性能问题，但是作为 Ruby 自带的默认 webserver，在开发阶段使用 WEBrick 提供服务还是没有什么问题的。</p>

<h2 id="总结">总结</h2>

<p>WEBrick 是 Ruby 社区中老牌的 webserver，虽然至今也仍然被广泛了解和使用，但是在生产环境中开发者往往会使用更加稳定的 Unicorn 和 Puma 代替它，我们选择在这个系列的文章中介绍它很大原因就是 WEBrick 的源代码与实现足够简单，我们很快就能了解一个 webserver 到底具备那些功能，在接下来的文章中我们就可以分析更加复杂的 webserver、了解更复杂的 IO 模型与实现了。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">Ruby on Rails Server options</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>谈谈 Rack 的协议与实现</title>
	  <link>/blogs//rack</link>
	  <author></author>
	  <pubDate>2017-10-29T00:00:00+00:00</pubDate>
	  <guid>/blogs//rack</guid>
	  <description><![CDATA[
	     <ul>
  <li><a href="https://draveness.me/rack">谈谈 Rack 协议与实现</a></li>
  <li><a href="https://draveness.me/rack-webrick">浅谈 WEBrick 的多线程模型</a></li>
  <li><a href="https://draveness.me/rack-thin">浅谈 Thin 的事件驱动模型</a></li>
  <li><a href="https://draveness.me/rack-unicorn">浅谈 Unicorn 的多进程模型</a></li>
  <li><a href="https://draveness.me/rack-puma">浅谈 Puma 的并发模型与实现</a></li>
  <li><a href="https://draveness.me/ruby-webserver">Ruby Web 服务器的并发模型与性能</a></li>
</ul>

<p>作为 Rails 开发者，基本上每天都与 Rails 的各种 API 以及数据库打交道，Rails 的世界虽然非常简洁，不过其内部的实现还是很复杂的，很多刚刚接触 Rails 的开发者可能都不知道 Rails 其实就是一个 <a href="https://github.com/rack/rack">Rack</a> 应用，在这一系列的文章中，我们会分别介绍 Rack 以及一些常见的遵循 Rack 协议的 webserver 的实现原理。</p>

<p><img src="https://img.draveness.me/2017-10-29-rack-logo.png" alt="rack-logo" /></p>

<p>不只是 Rails，几乎所有的 Ruby 的 Web 框架都是一个 Rack 的应用，除了 Web 框架之外，Rack 也支持相当多的 Web 服务器，可以说 Ruby 世界几乎一切与 Web 相关的服务都与 Rack 有关。</p>

<p><img src="https://img.draveness.me/2017-10-29-rack-and-web-servers-frameworks.png" alt="rack-and-web-servers-frameworks" /></p>

<p>所以如果想要了解 Rails 或者其他 Web 服务底层的实现，那么一定需要了解 Rack 是如何成为应用容器（webserver）和应用框架之间的桥梁的，本文中介绍的是 2.0.3 版本的 rack。</p>

<h2 id="rack-协议">Rack 协议</h2>

<p>在 Rack 的协议中，将 Rack 应用描述成一个可以响应 <code class="highlighter-rouge">call</code> 方法的 Ruby 对象，它仅接受来自外界的一个参数，也就是环境，然后返回一个只包含三个值的数组，按照顺序分别是状态码、HTTP Headers 以及响应请求的正文。</p>

<blockquote>
  <p>A Rack application is a Ruby object (not a class) that responds to call. It takes exactly one argument, the environment and returns an Array of exactly three values: The status, the headers, and the body.</p>
</blockquote>

<p><img src="https://img.draveness.me/2017-10-29-rack-protocol.png" alt="rack-protoco" /></p>

<p>Rack 在 webserver 和应用框架之间提供了一套最小的 API 接口，如果 webserver 都遵循 Rack 提供的这套规则，那么所有的框架都能通过协议任意地改变底层使用 webserver；所有的 webserver 只需要在 <code class="highlighter-rouge">Rack::Handler</code> 的模块中创建一个实现了 <code class="highlighter-rouge">.run</code> 方法的类就可以了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Rack</span>
  <span class="k">module</span> <span class="nn">Handler</span>
    <span class="k">class</span> <span class="nc">WEBrick</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServlet</span><span class="o">::</span><span class="no">AbstractServlet</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
        <span class="c1"># ..</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>这个类方法接受两个参数，分别是一个 Rack 应用对象和一个包含各种参数的 <code class="highlighter-rouge">options</code> 字典，其中可能包括自定义的 ip 地址和端口号以及各种配置，根据 Rack 协议，所有应用对象在接受到一个 <code class="highlighter-rouge">#call</code> 方法并且传入 <code class="highlighter-rouge">env</code> 时，都会返回一个三元组：</p>

<p><img src="https://img.draveness.me/2017-10-29-rack-app.png" alt="rack-app" /></p>

<p>最后的 <code class="highlighter-rouge">body</code> 响应体其实是一个由多个响应内容组成的数组，Rack 使用的 webserver 会将 <code class="highlighter-rouge">body</code> 中几个部分的连接到一起最后拼接成一个 HTTP 响应后返回。</p>

<h2 id="rack-的使用">Rack 的使用</h2>

<p>我们在大致了解 Rack 协议之后，其实可以从一段非常简单的代码入手来了解 Rack 是如何启动 webserver 来处理来自用户的请求的，我们可以在任意目录下创建如下所示的 config.ru 文件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.ru</span>

<span class="n">run</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="p">[</span><span class="s1">'200'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'text/html'</span><span class="p">},</span> <span class="p">[</span><span class="s1">'get rack\'d'</span><span class="p">]]</span> <span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>因为 <code class="highlighter-rouge">Proc</code> 对象也能够响应 <code class="highlighter-rouge">#call</code> 方法，所以上述的 Proc 对象也可以看做是一个 Rack 应用。</p>
</blockquote>

<p>接下来，我们在同一目录使用 <code class="highlighter-rouge">rackup</code> 命令在命令行中启动一个 webserver 进程：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rackup config.ru
<span class="o">[</span>2017-10-26 22:59:26] INFO  WEBrick 1.3.1
<span class="o">[</span>2017-10-26 22:59:26] INFO  ruby 2.3.3 <span class="o">(</span>2016-11-21<span class="o">)</span> <span class="o">[</span>x86_64-darwin16]
<span class="o">[</span>2017-10-26 22:59:26] INFO  WEBrick::HTTPServer#start: <span class="nv">pid</span><span class="o">=</span>83546 <span class="nv">port</span><span class="o">=</span>9292
</code></pre></div></div>

<p>从命令的输出我们可以看到，使用 rackup 运行了一个 WEBrick 的进程，监听了 9292 端口，如果我们使用 curl 来访问对应的请求，就可以得到在 config.ru 文件中出现的 <code class="highlighter-rouge">'get rack\'d'</code> 文本：</p>

<blockquote>
  <p>在这篇文章中，作者都会使用开源的工具 <a href="https://github.com/jakubroztocil/httpie">httpie</a> 代替 curl 在命令行中发出 HTTP 请求，相比 curl 而言 httpie 能够提供与 HTTP 响应有关的更多信息。</p>
</blockquote>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">http</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9292</span>
<span class="no">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="no">OK</span>
<span class="no">Connection</span><span class="p">:</span> <span class="no">Keep</span><span class="o">-</span><span class="no">Alive</span>
<span class="no">Content</span><span class="o">-</span><span class="no">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span>
<span class="no">Date</span><span class="p">:</span> <span class="no">Thu</span><span class="p">,</span> <span class="mi">26</span> <span class="no">Oct</span> <span class="mi">2017</span> <span class="mi">15</span><span class="p">:</span><span class="mo">07</span><span class="p">:</span><span class="mi">47</span> <span class="no">GMT</span>
<span class="no">Server</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">/</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="no">Ruby</span><span class="o">/</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="mi">2016</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">21</span><span class="p">)</span>
<span class="no">Transfer</span><span class="o">-</span><span class="no">Encoding</span><span class="p">:</span> <span class="n">chunked</span>

<span class="n">get</span> <span class="n">rack</span><span class="err">'</span><span class="n">d</span>
</code></pre></div></div>

<p>从上述请求返回的 HTTP 响应头中的信息，我们可以看到 WEBrick 确实按照 config.ru 文件中的代码对当前的 HTTP 请求进行了处理。</p>

<h3 id="中间件">中间件</h3>

<p>Rack 协议和中间件是 Rack 能达到今天地位不可或缺的两个功能或者说特性，Rack 协议规定了 webserver 和 Rack 应用之间应该如何通信，而 Rack 中间件能够在上层改变 HTTP 的响应或者请求，在不改变应用的基础上为 Rack 应用增加新的功能。</p>

<p>Rack 的中间件是一个实现了两个方法 <code class="highlighter-rouge">.initialize</code> 和 <code class="highlighter-rouge">#call</code> 的类，初始化方法会接受两个参数，分别是 <code class="highlighter-rouge">app</code> 和 <code class="highlighter-rouge">options</code> 字典，而 <code class="highlighter-rouge">#call</code> 方法接受一个参数也就是 HTTP 请求的环境参数 <code class="highlighter-rouge">env</code>，在这里我们创建了一个新的 Rack 中间件 <code class="highlighter-rouge">StatusLogger</code>：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">StatusLogger</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">status</span>
    <span class="p">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在所有的 <code class="highlighter-rouge">#call</code> 方法中都<strong>应该</strong>调用 <code class="highlighter-rouge">app.call</code> 让应用对 HTTP 请求进行处理并在方法结束时将所有的参数按照顺序返回。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use</span> <span class="no">StatusLogger</span>
<span class="n">run</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="p">[</span><span class="s1">'200'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'text/html'</span><span class="p">},</span> <span class="p">[</span><span class="s1">'get rack\'d'</span><span class="p">]]</span> <span class="p">}</span>
</code></pre></div></div>

<p>如果需要使用某一个 Rack 中间件只需要在当前文件中使用 <code class="highlighter-rouge">use</code> 方法，在每次接收到来自用户的 HTTP 请求时都会打印出当前响应的状态码。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">rackup</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">19</span><span class="p">:</span><span class="mi">46</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span> <span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">19</span><span class="p">:</span><span class="mi">46</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="no">INFO</span>  <span class="n">ruby</span> <span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="mi">2016</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">21</span><span class="p">)</span> <span class="p">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">darwin16</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">19</span><span class="p">:</span><span class="mi">46</span><span class="p">:</span><span class="mi">40</span><span class="p">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span><span class="c1">#start: pid=5274 port=9292</span>
<span class="mi">200</span>
<span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">27</span><span class="o">/</span><span class="no">Oct</span><span class="o">/</span><span class="mi">2017</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">46</span><span class="p">:</span><span class="mi">53</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s2">"GET / HTTP/1.1"</span> <span class="mi">200</span> <span class="o">-</span> <span class="mf">0.0004</span>
</code></pre></div></div>

<p>除了直接通过 <code class="highlighter-rouge">use</code> 方法直接传入 <code class="highlighter-rouge">StatusLogger</code> 中间件之外，我们也可以在 <code class="highlighter-rouge">use</code> 中传入配置参数，所有的配置都会通过 <code class="highlighter-rouge">options</code> 最终初始化一个中间件的实例，比如，我们有以下的中间件 <code class="highlighter-rouge">BodyTransformer</code>：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BodyTransformer</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
    <span class="vi">@count</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="ss">:count</span><span class="p">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="vi">@app</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span> <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="vi">@count</span><span class="p">].</span><span class="nf">upcase</span> <span class="o">+</span> <span class="n">str</span><span class="p">[</span><span class="vi">@count</span><span class="o">..-</span><span class="mi">1</span><span class="p">]</span> <span class="p">}</span>
    <span class="p">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述中间件会在每次调用时都将 Rack 应用返回的 <code class="highlighter-rouge">body</code> 中前 <code class="highlighter-rouge">count</code> 个字符变成大写的，我们可以在 config.ru 中添加一个新的中间件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use</span> <span class="no">StatusLogger</span>
<span class="n">use</span> <span class="no">BodyTransformer</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">3</span>
<span class="n">run</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="p">[</span><span class="s1">'200'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'text/html'</span><span class="p">},</span> <span class="p">[</span><span class="s1">'get rack\'d'</span><span class="p">]]</span> <span class="p">}</span>
</code></pre></div></div>

<p>当我们再次使用 http 命令请求相同的 URL 时，就会获得不同的结果，同时由于我们保留了 <code class="highlighter-rouge">StatusLogger</code>，所以在 console 中也会打印出当前响应的状态码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># session 1</span>
<span class="err">$</span> <span class="n">rackup</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">21</span><span class="p">:</span><span class="mo">04</span><span class="p">:</span><span class="mo">05</span><span class="p">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span> <span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">21</span><span class="p">:</span><span class="mo">04</span><span class="p">:</span><span class="mo">05</span><span class="p">]</span> <span class="no">INFO</span>  <span class="n">ruby</span> <span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="mi">2016</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">21</span><span class="p">)</span> <span class="p">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">darwin16</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">21</span><span class="p">:</span><span class="mo">04</span><span class="p">:</span><span class="mo">05</span><span class="p">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span><span class="c1">#start: pid=7524 port=9292</span>
<span class="mi">200</span>
<span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">27</span><span class="o">/</span><span class="no">Oct</span><span class="o">/</span><span class="mi">2017</span><span class="p">:</span><span class="mi">21</span><span class="p">:</span><span class="mo">04</span><span class="p">:</span><span class="mi">19</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s2">"GET / HTTP/1.1"</span> <span class="mi">200</span> <span class="o">-</span> <span class="mf">0.0005</span>

<span class="c1"># session 2</span>
<span class="err">$</span> <span class="n">http</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9292</span>
<span class="no">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="no">OK</span>
<span class="no">Connection</span><span class="p">:</span> <span class="no">Keep</span><span class="o">-</span><span class="no">Alive</span>
<span class="no">Content</span><span class="o">-</span><span class="no">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span>
<span class="no">Date</span><span class="p">:</span> <span class="no">Fri</span><span class="p">,</span> <span class="mi">27</span> <span class="no">Oct</span> <span class="mi">2017</span> <span class="mi">13</span><span class="p">:</span><span class="mo">04</span><span class="p">:</span><span class="mi">19</span> <span class="no">GMT</span>
<span class="no">Server</span><span class="p">:</span> <span class="no">WEBrick</span><span class="o">/</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="no">Ruby</span><span class="o">/</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="mi">2016</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">21</span><span class="p">)</span>
<span class="no">Transfer</span><span class="o">-</span><span class="no">Encoding</span><span class="p">:</span> <span class="n">chunked</span>

<span class="no">GET</span> <span class="n">rack</span><span class="err">'</span><span class="n">d</span>
</code></pre></div></div>

<p>Rack 的中间件的使用其实非常简单，我们只需要定义符合要求的类，然后在合适的方法中返回合适的结果就可以了，在接下来的部分我们将介绍 Rack 以及中间件的实现原理。</p>

<h2 id="rack-的实现原理">Rack 的实现原理</h2>

<p>到这里，我们已经对 Rack 的使用有一些基本的了解了，包括如何使用 <code class="highlighter-rouge">rackup</code> 命令启动一个 webserver，也包括 Rack 的中间件如何使用，接下来我们就准备开始对 Rack 是如何实现上述功能进行分析了。</p>

<h3 id="rackup-命令">rackup 命令</h3>

<p>那么 <code class="highlighter-rouge">rackup</code> 到底是如何工作的呢，首先我们通过 <code class="highlighter-rouge">which</code> 命令来查找当前 <code class="highlighter-rouge">rackup</code> 的执行路径并打印出该文件的全部内容：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">which</span> <span class="n">rackup</span>
<span class="sr">/Users/</span><span class="n">draveness</span><span class="o">/</span><span class="p">.</span><span class="nf">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">rackup</span>

<span class="err">$</span> <span class="n">cat</span> <span class="sr">/Users/</span><span class="n">draveness</span><span class="o">/</span><span class="p">.</span><span class="nf">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">rackup</span>
<span class="c1">#!/usr/bin/env ruby_executable_hooks</span>
<span class="c1">#</span>
<span class="c1"># This file was generated by RubyGems.</span>
<span class="c1">#</span>
<span class="c1"># The application 'rack' is installed as part of a gem, and</span>
<span class="c1"># this file is here to facilitate running it.</span>
<span class="c1">#</span>

<span class="nb">require</span> <span class="s1">'rubygems'</span>

<span class="n">version</span> <span class="o">=</span> <span class="s2">"&gt;= 0.a"</span>

<span class="k">if</span> <span class="no">ARGV</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">str</span> <span class="o">=</span> <span class="no">ARGV</span><span class="p">.</span><span class="nf">first</span>
  <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="nf">dup</span><span class="p">.</span><span class="nf">force_encoding</span><span class="p">(</span><span class="s2">"BINARY"</span><span class="p">)</span> <span class="k">if</span> <span class="n">str</span><span class="p">.</span><span class="nf">respond_to?</span> <span class="ss">:force_encoding</span>
  <span class="k">if</span> <span class="n">str</span> <span class="o">=~</span> <span class="sr">/\A_(.*)_\z/</span> <span class="n">and</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="p">.</span><span class="nf">correct?</span><span class="p">(</span><span class="vg">$1</span><span class="p">)</span> <span class="k">then</span>
    <span class="n">version</span> <span class="o">=</span> <span class="vg">$1</span>
    <span class="no">ARGV</span><span class="p">.</span><span class="nf">shift</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">load</span> <span class="no">Gem</span><span class="p">.</span><span class="nf">activate_bin_path</span><span class="p">(</span><span class="s1">'rack'</span><span class="p">,</span> <span class="s1">'rackup'</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</code></pre></div></div>

<p>从上述文件中的注释中可以看到当前文件是由 RubyGems 自动生成的，在文件的最后由一个 <code class="highlighter-rouge">load</code> 方法加载了某一个文件中的代码，我们可以在 pry 中尝试运行一下这个命令。</p>

<p>首先，通过 <code class="highlighter-rouge">gem list</code> 命令得到当前机器中所有 rack 的版本，然后进入 pry 执行 <code class="highlighter-rouge">.activate_bin_path</code> 命令：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">gem</span> <span class="n">list</span> <span class="s2">"^rack$"</span>

<span class="o">***</span> <span class="no">LOCAL</span> <span class="no">GEMS</span> <span class="o">***</span>

<span class="n">rack</span> <span class="p">(</span><span class="mf">2.0</span><span class="o">.</span><span class="mi">3</span><span class="p">,</span> <span class="mf">2.0</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="mf">1.6</span><span class="o">.</span><span class="mi">8</span><span class="p">,</span> <span class="mf">1.2</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>

<span class="err">$</span> <span class="n">pry</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Gem</span><span class="p">.</span><span class="nf">activate_bin_path</span><span class="p">(</span><span class="s1">'rack'</span><span class="p">,</span> <span class="s1">'rackup'</span><span class="p">,</span> <span class="s1">'2.0.3'</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s2">"/Users/draveness/.rvm/gems/ruby-2.3.3/gems/rack-2.0.3/bin/rackup"</span>

<span class="err">$</span> <span class="n">cat</span> <span class="sr">/Users/</span><span class="n">draveness</span><span class="o">/</span><span class="p">.</span><span class="nf">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">rack</span><span class="o">-</span><span class="mf">2.0</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">rackup</span>
<span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s2">"rack"</span>
<span class="no">Rack</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">start</span>
</code></pre></div></div>

<blockquote>
  <p><code class="highlighter-rouge">rackup</code> 命令定义在 rack 工程的 bin/rackup 文件中，在通过 rubygems 安装后会生成另一个加载该文件的可执行文建。</p>
</blockquote>

<p>在最后打印了该文件的内容，到这里我们就应该知道 <code class="highlighter-rouge">.activate_bin_path</code> 方法会查找对应 gem 当前生效的版本，并返回文件的路径；在这个可执行文件中，上述代码只是简单的 <code class="highlighter-rouge">require</code> 了一下 rack 方法，之后运行 <code class="highlighter-rouge">.start</code> 启动了一个 <code class="highlighter-rouge">Rack::Server</code>。</p>

<h3 id="server-的启动">Server 的启动</h3>

<p>从这里开始，我们就已经从 rackup 命令的执行进入了 rack 的源代码，可以直接使用 pry 找到 <code class="highlighter-rouge">.start</code> 方法所在的文件，从方法中可以看到当前类方法初始化了一个新的实例后，在新的对象上执行了 <code class="highlighter-rouge">#start</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">pry</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">'rack'</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="err">$</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span><span class="p">.</span><span class="nf">start</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">147</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Rack::Server&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">start</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
  <span class="n">new</span><span class="p">(</span><span class="n">options</span><span class="p">).</span><span class="nf">start</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="初始化和配置">初始化和配置</h3>

<p>在 <code class="highlighter-rouge">Rack::Server</code> 启动的过程中初始化了一个新的对象，初始化的过程中其实也包含了整个服务器的配置过程：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">185</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Rack::Server&gt;</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
  <span class="vi">@ignore_options</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="k">if</span> <span class="n">options</span>
    <span class="vi">@use_default_options</span> <span class="o">=</span> <span class="kp">false</span>
    <span class="vi">@options</span> <span class="o">=</span> <span class="n">options</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="ss">:app</span><span class="p">]</span> <span class="k">if</span> <span class="n">options</span><span class="p">[</span><span class="ss">:app</span><span class="p">]</span>
  <span class="k">else</span>
    <span class="n">argv</span> <span class="o">=</span> <span class="n">defined?</span><span class="p">(</span><span class="no">SPEC_ARGV</span><span class="p">)</span> <span class="p">?</span> <span class="no">SPEC_ARGV</span> <span class="p">:</span> <span class="no">ARGV</span>
    <span class="vi">@use_default_options</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="vi">@options</span> <span class="o">=</span> <span class="n">parse_options</span><span class="p">(</span><span class="n">argv</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这个 <code class="highlighter-rouge">Server</code> 对象的初始化器中，虽然可以通过 <code class="highlighter-rouge">options</code> 从外界传入参数，但是当前类中仍然存在这个 <code class="highlighter-rouge">#options</code> 和 <code class="highlighter-rouge">#default_options</code> 两个实例方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">199</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">options</span>
  <span class="n">merged_options</span> <span class="o">=</span> <span class="vi">@use_default_options</span> <span class="p">?</span> <span class="n">default_options</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="vi">@options</span><span class="p">)</span> <span class="p">:</span> <span class="vi">@options</span>
  <span class="n">merged_options</span><span class="p">.</span><span class="nf">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="vi">@ignore_options</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>

<span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">204</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">default_options</span>
  <span class="n">environment</span>  <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'development'</span>
  <span class="n">default_host</span> <span class="o">=</span> <span class="n">environment</span> <span class="o">==</span> <span class="s1">'development'</span> <span class="p">?</span> <span class="s1">'localhost'</span> <span class="p">:</span> <span class="s1">'0.0.0.0'</span>
  <span class="p">{</span>
    <span class="ss">:environment</span> <span class="o">=&gt;</span> <span class="n">environment</span><span class="p">,</span>
    <span class="ss">:pid</span>         <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
    <span class="ss">:Port</span>        <span class="o">=&gt;</span> <span class="mi">9292</span><span class="p">,</span>
    <span class="ss">:Host</span>        <span class="o">=&gt;</span> <span class="n">default_host</span><span class="p">,</span>
    <span class="ss">:AccessLog</span>   <span class="o">=&gt;</span> <span class="p">[],</span>
    <span class="ss">:config</span>      <span class="o">=&gt;</span> <span class="s2">"config.ru"</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述两个方法中处理了一些对象本身定义的一些参数，比如默认的端口号 9292 以及默认的 config 文件，config 文件也就是 <code class="highlighter-rouge">rackup</code> 命令接受的一个文件参数，文件中的内容就是用来配置一个 Rack 服务器的代码，在默认情况下为 config.ru，也就是如果文件名是 config.ru，我们不需要向 <code class="highlighter-rouge">rackup</code> 命令传任何参数，它会自动找当前目录的该文件：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">rackup</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">09</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mi">34</span><span class="p">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span> <span class="mf">1.3</span><span class="o">.</span><span class="mi">1</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">09</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mi">34</span><span class="p">]</span> <span class="no">INFO</span>  <span class="n">ruby</span> <span class="mf">2.3</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="mi">2016</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">21</span><span class="p">)</span> <span class="p">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">darwin16</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2017</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">27</span> <span class="mi">09</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mi">34</span><span class="p">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span><span class="c1">#start: pid=96302 port=9292</span>
</code></pre></div></div>

<p>访问相同的 URL 能得到完全一致的结果，在这里就不再次展示了，有兴趣的读者可以亲自尝试一下。</p>

<h3 id="包装应用">『包装』应用</h3>

<p>当我们执行了 <code class="highlighter-rouge">.initialize</code> 方法初始化了一个新的实例之后，接下来就会进入 <code class="highlighter-rouge">#start</code> 实例方法尝试启动一个 webserver 处理 config.ru 中定义的应用了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">258</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">start</span> <span class="o">&amp;</span><span class="n">blk</span>
  <span class="c1"># ...</span>

  <span class="n">wrapped_app</span>
  <span class="c1"># ..</span>

  <span class="n">server</span><span class="p">.</span><span class="nf">run</span> <span class="n">wrapped_app</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span>
<span class="k">end</span>
</code></pre></div></div>

<p>我们已经从上述方法中删除了很多对于本文来说不重要的代码实现，所以上述方法中最重要的部分就是 <code class="highlighter-rouge">#wrapped_app</code> 方法，以及另一个 <code class="highlighter-rouge">#server</code> 方法，首先来看 <code class="highlighter-rouge">#wrapped_app</code> 方法的实现。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">353</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">wrapped_app</span>
  <span class="vi">@wrapped_app</span> <span class="o">||=</span> <span class="n">build_app</span> <span class="n">app</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法有两部分组成，分别是 <code class="highlighter-rouge">#app</code> 和 <code class="highlighter-rouge">#build_app</code> 两个实例方法，其中 <code class="highlighter-rouge">#app</code> 方法的调用栈比较复杂：</p>

<p><img src="https://img.draveness.me/2017-10-29-server-app-call-stack.png" alt="server-app-call-stack" /></p>

<p>整个方法在最终会执行 <code class="highlighter-rouge">Builder.new_from_string</code> 通过 Ruby 中元编程中经常使用的 <code class="highlighter-rouge">eval</code> 方法，将输入文件中的全部内容与两端字符串拼接起来，并直接执行这段代码：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">builder</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">48</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new_from_string</span><span class="p">(</span><span class="n">builder_script</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="s2">"(rackup)"</span><span class="p">)</span>
  <span class="nb">eval</span> <span class="s2">"Rack::Builder.new {</span><span class="se">\n</span><span class="s2">"</span> <span class="o">+</span> <span class="n">builder_script</span> <span class="o">+</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">}.to_app"</span><span class="p">,</span>
    <span class="no">TOPLEVEL_BINDING</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="mi">0</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在 <code class="highlighter-rouge">eval</code> 方法中执行代码的作用其实就是如下所示的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span>
  <span class="n">use</span> <span class="no">StatusLogger</span>
  <span class="n">use</span> <span class="no">BodyTransformer</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">3</span>
  <span class="n">run</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="p">[</span><span class="s1">'200'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'text/html'</span><span class="p">},</span> <span class="p">[</span><span class="s1">'get rack\'d'</span><span class="p">]]</span> <span class="p">}</span>
<span class="p">}.</span><span class="nf">to_app</span>
</code></pre></div></div>

<p>我们先暂时不管这段代码是如何执行的，我们只需要知道上述代码存储了所有的中间件以及 Proc 对象，最后通过 <code class="highlighter-rouge">#to_app</code> 方法返回一个 Rack 应用。</p>

<p>在这之后会使用 <code class="highlighter-rouge">#build_app</code> 方法将所有的中间件都包括在 Rack 应用周围，因为所有的中间件也都是一个响应 <code class="highlighter-rouge">#call</code> 方法，返回三元组的对象，其实也就是一个遵循协议的 App，唯一的区别就是中间件中会调用初始化时传入的 Rack App：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">343</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">build_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
  <span class="n">middleware</span><span class="p">[</span><span class="n">options</span><span class="p">[</span><span class="ss">:environment</span><span class="p">]].</span><span class="nf">reverse_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">middleware</span><span class="o">|</span>
    <span class="n">middleware</span> <span class="o">=</span> <span class="n">middleware</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="k">if</span> <span class="n">middleware</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
    <span class="k">next</span> <span class="k">unless</span> <span class="n">middleware</span>
    <span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="n">middleware</span>
    <span class="n">app</span> <span class="o">=</span> <span class="n">klass</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">app</span>
<span class="k">end</span>
</code></pre></div></div>

<p>经过上述方法，我们在一个 Rack 应用周围一层一层包装上了所有的中间件，最后调用的中间件在整个调用栈中的最外层，当包装后的应用接受来自外界的请求时，会按照如下的方式进行调用：</p>

<p><img src="https://img.draveness.me/2017-10-29-wrapped-app.png" alt="wrapped-app" /></p>

<p>所有的请求都会先经过中间件，每一个中间件都会在 <code class="highlighter-rouge">#call</code> 方法内部调用另一个中间件或者应用，在接收到应用的返回之后会分别对响应进行处理最后由最先定义的中间件返回。</p>

<h3 id="中间件的实现">中间件的实现</h3>

<p>在 Rack 中，中间件是由两部分的代码共同处理的，分别是 <code class="highlighter-rouge">Rack::Builder</code> 和 <code class="highlighter-rouge">Rack::Server</code> 两个类，前者包含所有的能够在 config.ru 文件中使用的 DSL 方法，当我们使用 <code class="highlighter-rouge">eval</code> 执行 config.ru 文件中的代码时，会先初始化一个 <code class="highlighter-rouge">Builder</code> 的实例，然后执行 <code class="highlighter-rouge">instance_eval</code> 运行代码块中的所有内容：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">builder</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">53</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">default_app</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="vi">@use</span><span class="p">,</span> <span class="vi">@map</span><span class="p">,</span> <span class="vi">@run</span><span class="p">,</span> <span class="vi">@warmup</span> <span class="o">=</span> <span class="p">[],</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">default_app</span><span class="p">,</span> <span class="kp">nil</span>
  <span class="nb">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这时，config.ru 文件中的代码就会在当前实例的环境下执行，文件中的 <code class="highlighter-rouge">#use</code> 和 <code class="highlighter-rouge">#run</code> 方法在调用时就会执行 <code class="highlighter-rouge">Builder</code> 的实例方法，我们可以先看一下 <code class="highlighter-rouge">#use</code> 方法是如何实现的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">builder</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">81</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span>

<span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="n">middleware</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="vi">@use</span> <span class="o">&lt;&lt;</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span> <span class="n">middleware</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法会将传入的参数组合成一个接受 <code class="highlighter-rouge">app</code> 作为入参的 <code class="highlighter-rouge">Proc</code> 对象，然后加入到 <code class="highlighter-rouge">@use</code> 数组中存储起来，在这里并没有发生任何其他的事情，另一个 <code class="highlighter-rouge">#run</code> 方法的实现其实就更简单了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">builder</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">103</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
  <span class="vi">@run</span> <span class="o">=</span> <span class="n">app</span>
<span class="k">end</span>
</code></pre></div></div>

<p>它只是将传入的 <code class="highlighter-rouge">app</code> 对象存储到持有的 <code class="highlighter-rouge">@run</code> 实例变量中，如果我们想要获取当前的 <code class="highlighter-rouge">Builder</code> 生成的应用，只需要通过 <code class="highlighter-rouge">#to_app</code> 方法：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">builder</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">144</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span>

<span class="k">def</span> <span class="nf">to_app</span>
  <span class="nb">fail</span> <span class="s2">"missing run or map statement"</span> <span class="k">unless</span> <span class="vi">@run</span>
  <span class="vi">@use</span><span class="p">.</span><span class="nf">reverse</span><span class="p">.</span><span class="nf">inject</span><span class="p">(</span><span class="vi">@run</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>上述方法将所有传入 <code class="highlighter-rouge">#use</code> 和 <code class="highlighter-rouge">#run</code> 命令的应用和中间件进行了组合，通过 <code class="highlighter-rouge">#inject</code> 方法达到了如下所示的效果：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.ru</span>
<span class="n">use</span> <span class="no">MiddleWare1</span>
<span class="n">use</span> <span class="no">MiddleWare2</span>
<span class="n">run</span> <span class="no">RackApp</span>

<span class="c1"># equals to</span>
<span class="no">MiddleWare1</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">MiddleWare2</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">RackApp</span><span class="p">)))</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Builder</code> 类其实简单来看就做了这件事情，将一种非常难以阅读的代码，变成比较清晰可读的 DSL，最终返回了一个中间件（也可以说是应用）对象，虽然在 <code class="highlighter-rouge">Builder</code> 中也包含其他的 DSL 语法元素，但是在这里都没有介绍。</p>

<p>上一小节提到的 <code class="highlighter-rouge">#build_app</code> 方法其实也只是根据当前的环境选择合适的中间件继续包裹到这个链式的调用中：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">343</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">build_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
  <span class="n">middleware</span><span class="p">[</span><span class="n">options</span><span class="p">[</span><span class="ss">:environment</span><span class="p">]].</span><span class="nf">reverse_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">middleware</span><span class="o">|</span>
    <span class="n">middleware</span> <span class="o">=</span> <span class="n">middleware</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="k">if</span> <span class="n">middleware</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
    <span class="k">next</span> <span class="k">unless</span> <span class="n">middleware</span>
    <span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="n">middleware</span>
    <span class="n">app</span> <span class="o">=</span> <span class="n">klass</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">app</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这里的 <code class="highlighter-rouge">#middleware</code> 方法可以被子类覆写，如果不覆写该方法会根据环境的不同选择不同的中间件数组包裹当前的应用：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">229</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Rack::Server&gt;</span>

<span class="k">def</span> <span class="nf">default_middleware_by_environment</span>
  <span class="n">m</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span><span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]}</span>
  <span class="n">m</span><span class="p">[</span><span class="s2">"deployment"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">ContentLength</span><span class="p">],</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">Chunked</span><span class="p">],</span>
    <span class="n">logging_middleware</span><span class="p">,</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">TempfileReaper</span><span class="p">]</span>
  <span class="p">]</span>
  <span class="n">m</span><span class="p">[</span><span class="s2">"development"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">ContentLength</span><span class="p">],</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">Chunked</span><span class="p">],</span>
    <span class="n">logging_middleware</span><span class="p">,</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">ShowExceptions</span><span class="p">],</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">Lint</span><span class="p">],</span>
    <span class="p">[</span><span class="no">Rack</span><span class="o">::</span><span class="no">TempfileReaper</span><span class="p">]</span>
  <span class="p">]</span>
  <span class="n">m</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">.default_middleware_by_environment</code> 中就包含了不同环境下应该使用的中间件，<code class="highlighter-rouge">#build_app</code> 会视情况选择中间件加载。</p>

<h3 id="webserver-的选择">webserver 的选择</h3>

<p>在 <code class="highlighter-rouge">Server#start</code> 方法中，我们已经通过 <code class="highlighter-rouge">#wrapped_app</code> 方法将应用和中间件打包到了一起，然后分别执行 <code class="highlighter-rouge">#server</code> 和 <code class="highlighter-rouge">Server#run</code> 方法选择并运行 webserver，先来看 webserver 是如何选择的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">300</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Server</span>

<span class="k">def</span> <span class="nf">server</span>
  <span class="vi">@_server</span> <span class="o">||=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">options</span><span class="p">[</span><span class="ss">:server</span><span class="p">])</span>
  <span class="k">unless</span> <span class="vi">@_server</span>
    <span class="vi">@_server</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="p">.</span><span class="nf">default</span>
  <span class="k">end</span>
  <span class="vi">@_server</span>
<span class="k">end</span>
</code></pre></div></div>

<p>如果我们在运行 <code class="highlighter-rouge">rackup</code> 命令时传入了 <code class="highlighter-rouge">server</code> 选项，例如 <code class="highlighter-rouge">rackup -s WEBrick</code>，就会直接使用传入的 webserver，否则就会使用默认的 Rack 处理器：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">handler</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">46</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Rack::Handler&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">default</span>
  <span class="c1"># Guess.</span>
  <span class="k">if</span> <span class="no">ENV</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"PHP_FCGI_CHILDREN"</span><span class="p">)</span>
    <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">FastCGI</span>
  <span class="k">elsif</span> <span class="no">ENV</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="no">REQUEST_METHOD</span><span class="p">)</span>
    <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">CGI</span>
  <span class="k">elsif</span> <span class="no">ENV</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"RACK_HANDLER"</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"RACK_HANDLER"</span><span class="p">])</span>
  <span class="k">else</span>
    <span class="n">pick</span> <span class="p">[</span><span class="s1">'puma'</span><span class="p">,</span> <span class="s1">'thin'</span><span class="p">,</span> <span class="s1">'webrick'</span><span class="p">]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在这个方法中，调用 <code class="highlighter-rouge">.pick</code> 其实最终也会落到 <code class="highlighter-rouge">.get</code> 方法上，在 <code class="highlighter-rouge">.pick</code> 中我们通过遍历传入的数组<strong>尝试</strong>对其进行加载：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">handler</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">34</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Rack::Handler&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">pick</span><span class="p">(</span><span class="n">server_names</span><span class="p">)</span>
  <span class="n">server_names</span> <span class="o">=</span> <span class="no">Array</span><span class="p">(</span><span class="n">server_names</span><span class="p">)</span>
  <span class="n">server_names</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">server_name</span><span class="o">|</span>
    <span class="k">begin</span>
      <span class="k">return</span> <span class="n">get</span><span class="p">(</span><span class="n">server_name</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">LoadError</span><span class="p">,</span> <span class="no">NameError</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">raise</span> <span class="no">LoadError</span><span class="p">,</span> <span class="s2">"Couldn't find handler for: </span><span class="si">#{</span><span class="n">server_names</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">', '</span><span class="p">)</span><span class="si">}</span><span class="s2">."</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">.get</code> 方法是用于加载 webserver 对应处理器的方法，方法中会通过一定的命名规范从对应的文件目录下加载相应的常量：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">From</span><span class="p">:</span> <span class="n">lib</span><span class="o">/</span><span class="n">rack</span><span class="o">/</span><span class="n">handler</span><span class="p">.</span><span class="nf">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">11</span><span class="p">:</span>
<span class="no">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:Rack::Handler&gt;</span>

<span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
  <span class="k">return</span> <span class="k">unless</span> <span class="n">server</span>
  <span class="n">server</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="nf">to_s</span>

  <span class="k">unless</span> <span class="vi">@handlers</span><span class="p">.</span><span class="nf">include?</span> <span class="n">server</span>
    <span class="n">load_error</span> <span class="o">=</span> <span class="n">try_require</span><span class="p">(</span><span class="s1">'rack/handler'</span><span class="p">,</span> <span class="n">server</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">if</span> <span class="n">klass</span> <span class="o">=</span> <span class="vi">@handlers</span><span class="p">[</span><span class="n">server</span><span class="p">]</span>
    <span class="n">klass</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">"::"</span><span class="p">).</span><span class="nf">inject</span><span class="p">(</span><span class="no">Object</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">o</span><span class="p">,</span> <span class="n">x</span><span class="o">|</span> <span class="n">o</span><span class="p">.</span><span class="nf">const_get</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">else</span>
    <span class="nb">const_get</span><span class="p">(</span><span class="n">server</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">rescue</span> <span class="no">NameError</span> <span class="o">=&gt;</span> <span class="n">name_error</span>
  <span class="k">raise</span> <span class="n">load_error</span> <span class="o">||</span> <span class="n">name_error</span>
<span class="k">end</span>
</code></pre></div></div>

<p>一部分常量是预先定义在 handler.rb 文件中的，另一部分是由各个 webserver 的开发者自己定义或者遵循一定的命名规范加载的：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">register</span> <span class="s1">'cgi'</span><span class="p">,</span> <span class="s1">'Rack::Handler::CGI'</span>
<span class="n">register</span> <span class="s1">'fastcgi'</span><span class="p">,</span> <span class="s1">'Rack::Handler::FastCGI'</span>
<span class="n">register</span> <span class="s1">'webrick'</span><span class="p">,</span> <span class="s1">'Rack::Handler::WEBrick'</span>
<span class="n">register</span> <span class="s1">'lsws'</span><span class="p">,</span> <span class="s1">'Rack::Handler::LSWS'</span>
<span class="n">register</span> <span class="s1">'scgi'</span><span class="p">,</span> <span class="s1">'Rack::Handler::SCGI'</span>
<span class="n">register</span> <span class="s1">'thin'</span><span class="p">,</span> <span class="s1">'Rack::Handler::Thin'</span>
</code></pre></div></div>

<p>在默认的情况下，如果不在启动服务时指定服务器就会按照 puma、thin 和 webrick 的顺序依次尝试加载响应的处理器。</p>

<h3 id="webserver-的启动">webserver 的启动</h3>

<p>当 Rack 已经使用中间件对应用进行包装并且选择了对应的 webserver 之后，我们就可以将处理好的应用作为参数传入 <code class="highlighter-rouge">WEBrick.run</code> 方法了：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Rack</span>
  <span class="k">module</span> <span class="nn">Handler</span>
    <span class="k">class</span> <span class="nc">WEBrick</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServlet</span><span class="o">::</span><span class="no">AbstractServlet</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
        <span class="n">environment</span>  <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RACK_ENV'</span><span class="p">]</span> <span class="o">||</span> <span class="s1">'development'</span>
        <span class="n">default_host</span> <span class="o">=</span> <span class="n">environment</span> <span class="o">==</span> <span class="s1">'development'</span> <span class="p">?</span> <span class="s1">'localhost'</span> <span class="p">:</span> <span class="kp">nil</span>

        <span class="n">options</span><span class="p">[</span><span class="ss">:BindAddress</span><span class="p">]</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="ss">:Host</span><span class="p">)</span> <span class="o">||</span> <span class="n">default_host</span>
        <span class="n">options</span><span class="p">[</span><span class="ss">:Port</span><span class="p">]</span> <span class="o">||=</span> <span class="mi">8080</span>
        <span class="vi">@server</span> <span class="o">=</span> <span class="o">::</span><span class="no">WEBrick</span><span class="o">::</span><span class="no">HTTPServer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="vi">@server</span><span class="p">.</span><span class="nf">mount</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">::</span><span class="no">WEBrick</span><span class="p">,</span> <span class="n">app</span>
        <span class="k">yield</span> <span class="vi">@server</span>  <span class="k">if</span> <span class="nb">block_given?</span>
        <span class="vi">@server</span><span class="p">.</span><span class="nf">start</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>所有遵循 Rack 协议的 webserver 都会实现上述 <code class="highlighter-rouge">.run</code> 方法接受 <code class="highlighter-rouge">app</code>、<code class="highlighter-rouge">options</code> 和一个 block 作为参数运行一个进程来处理所有的来自用户的 HTTP 请求，在这里就是每个 webserver 自己需要解决的了，它其实并不属于 Rack 负责的部门，但是 Rack 实现了一些常见 webserver 的 handler，比如 CGI、Thin 和 WEBrick 等等，这些 handler 的实现原理都不会包含在这篇文章中。</p>

<h2 id="rails-和-rack">Rails 和 Rack</h2>

<p>在了解了 Rack 的实现之后，其实我们可以发现 Rails 应用就是一堆 Rake 中间件和一个 Rack 应用的集合，在任意的工程中我们执行 <code class="highlighter-rouge">rake middleware</code> 的命令都可以得到以下的输出：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">rake</span> <span class="n">middleware</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Sendfile</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Static</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Executor</span>
<span class="n">use</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">Strategy</span><span class="o">::</span><span class="no">LocalCache</span><span class="o">::</span><span class="no">Middleware</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Runtime</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">RequestId</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">RemoteIp</span>
<span class="n">use</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Rack</span><span class="o">::</span><span class="no">Logger</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">ShowExceptions</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">DebugExceptions</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Reloader</span>
<span class="n">use</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">Callbacks</span>
<span class="n">use</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">::</span><span class="no">CheckPending</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Head</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">ConditionalGet</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">ETag</span>
<span class="n">run</span> <span class="no">ApplicationName</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">routes</span>
</code></pre></div></div>

<p>在这里包含了很多使用 <code class="highlighter-rouge">use</code> 加载的 Rack 中间件，当然在最后也包含一个 Rack 应用，也就是 <code class="highlighter-rouge">ApplicationName::Application.routes</code>，这个对象其实是一个 <code class="highlighter-rouge">RouteSet</code> 实例，也就是说在 Rails 中所有的请求在经过中间件之后都会先有一个路由表来处理，路由会根据一定的规则将请求交给其他控制器处理：</p>

<p><img src="https://img.draveness.me/2017-10-29-rails-application.png" alt="rails-application" /></p>

<p>除此之外，<code class="highlighter-rouge">rake middleware</code> 命令的输出也告诉我们 Rack 其实为我们提供了很多非常方便的中间件比如 <code class="highlighter-rouge">Rack::Sendfile</code> 等可以减少我们在开发一个 webserver 时需要处理的事情。</p>

<h2 id="总结">总结</h2>

<p>Rack 协议可以说占领了整个 Ruby 服务端的市场，无论是常见的服务器还是框架都遵循 Rack 协议进行了设计，而正因为 Rack 以及 Rack 协议的存在我们在使用 Rails 或者 Sinatra 开发 Web 应用时才可以对底层使用的 webserver 进行无缝的替换，在接下来的文章中会逐一介绍不同的 webserver 是如何对 HTTP 请求进行处理以及它们拥有怎样的 I/O 模型。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://github.com/rack/rack">Rack · A modular Ruby webserver interface</a></li>
  <li><a href="http://rack.github.io">Rack: a Ruby Webserver Interface</a></li>
  <li><a href="http://rubydoc.info/github/rack/rack/master/file/SPEC">Rack interface specification</a></li>
  <li><a href="http://guides.rubyonrails.org/rails_on_rack.html">Rails on Rack</a></li>
  <li><a href="http://railscasts.com/episodes/151-rack-middleware">Rack Middleware</a></li>
  <li><a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">Introducing Rack</a></li>
  <li><a href="https://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">Ruby on Rails Server options</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
